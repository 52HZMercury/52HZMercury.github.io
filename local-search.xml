<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcodeHot100刷题总结</title>
    <link href="/2022/06/29/leetcodeHot100%E6%80%BB%E7%BB%93/"/>
    <url>/2022/06/29/leetcodeHot100%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">前言<ul>    <div>本博客主要是刷leetcode热题100所做的笔记</div></ul></div><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="预设pre"><a href="#预设pre" class="headerlink" title="预设pre"></a>预设pre</h2><p>使用双指针进行遍历，对于链表问题，返回结果为头结点时，<strong>通常需要先初始化一个预先指针 pre</strong>，该指针的下一个节点指向真正的头结点head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针(cur)移动，进而会导致头指针丢失，无法返回结果。<a href="https://leetcode.cn/problems/add-two-numbers/">https://leetcode.cn/problems/add-two-numbers/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        ListNode temp1,temp2;<br>        ListNode pre = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode cur = pre;<br>        temp1 = l1;<br>        temp2 = l2;<br>        <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(temp1!=<span class="hljs-keyword">null</span>||temp2!=<span class="hljs-keyword">null</span>||carry!=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">int</span> x = temp1 == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span>:temp1.val;<br>            <span class="hljs-keyword">int</span> y = temp2 == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span>:temp2.val;<br>            <span class="hljs-keyword">int</span> resval = x + y + carry;<br>           <br>            carry = resval/<span class="hljs-number">10</span>;<span class="hljs-comment">// 刷新carry</span><br>            resval = resval % <span class="hljs-number">10</span>;<br>            <br>            ListNode body =  <span class="hljs-keyword">new</span> ListNode(resval);<br>            cur.next = body;<br>            cur = body;<span class="hljs-comment">//移动指针</span><br><br>            <span class="hljs-keyword">if</span>(temp1!=<span class="hljs-keyword">null</span>)&#123;<br>                temp1 = temp1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(temp2!=<span class="hljs-keyword">null</span>)&#123;<br>                temp2 = temp2.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常用的经典代码"><a href="#常用的经典代码" class="headerlink" title="常用的经典代码"></a>常用的经典代码</h2><p>熟记单链表经典的删除，获取有效节点，查找倒数第几个(也可以使用快慢指针)，有时也需要考虑到特殊情况，比如删除的节点就是头节点，就找不到待删除的前一个节点，需要单独判断(预设一个pre节点的话就不需要，这就是预设节点的好处)，比如<a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除</span><br>cur.next = cur.next.next; <br><br><br><span class="hljs-comment">//查找倒数第几个一般是 总长减去倒数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i&lt; size - index; i++) &#123;<br>cur = cur.next;<br>&#125;<br><br><br><span class="hljs-comment">//获取链表的有效节点数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//带头结点的空链表，不带头节点的删除就好</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><br>  HeroNode cur = head.next;<br>  <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>    length++;<br>    cur = cur.next; <span class="hljs-comment">//遍历写一个</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> length;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><h3 id="判断链表是否有环，并找出环的入口"><a href="#判断链表是否有环，并找出环的入口" class="headerlink" title="判断链表是否有环，并找出环的入口"></a>判断链表是否有环，并找出环的入口</h3><p>   如果链表存在环，就好像操场的跑道是一个环形一样。此时让快慢指针都从链表头开始遍历，快指针每次向前移动两个位置，慢指针每次向前移动一个位置；如果快指针到达NULL，说明链表以NULL为结尾，没有环。如果快指针追上慢指针，则表示有环。</p><p>​    如果链表存在环，如果找到环的入口点？当fast若与slow相遇时，slow肯定没有走遍历完链表或者恰好遍历一圈。于是我们从链表头与相遇点分别设一个指针，每次各走一步，两个指针必定相遇，且相遇第一点为环入口点(证明略)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCirle</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    ListNode slow = head,fast = head;<br>    <span class="hljs-keyword">while</span>(fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>)&#123;<br>        slow = slow.next; <span class="hljs-comment">//每次前进一步</span><br>        fast = fast.next.next; <span class="hljs-comment">//每次前进两步</span><br>        <span class="hljs-keyword">if</span>(slow == fast)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">findLoopPort</span><span class="hljs-params">()</span></span>&#123;<br>    ... <span class="hljs-comment">//判断是否有环</span><br>        <br>    slow = head;<br>    <span class="hljs-keyword">while</span>(slow != fast)&#123;<span class="hljs-comment">//当slow和fast再次相遇的时候，那个点就是环的起点</span><br>        slow = slow.next;<br>        fast = fast.next; <br>    &#125;<br>    <span class="hljs-keyword">return</span> slow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在有序链表中寻找中位数"><a href="#在有序链表中寻找中位数" class="headerlink" title="在有序链表中寻找中位数"></a>在有序链表中寻找中位数</h3><p>快指针的移动速度是慢指针的2倍，因此当快指针到达链表尾的时候，满指针到达中点。</p><p>程序还要考虑链表结点个数的奇偶数因素，当快指针移动x次后到达表尾（1+2x），说明链表有奇数个结点，直接返回慢指针指向的数据即可。</p><p>  如果快指针是倒数第二个结点，说明链表结点个数是偶数，这时可以根据“规则”返回上中位数或下中位数或（上中位数+下中位数）的一半。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(fast &amp;&amp; slow)&#123;<br>    <span class="hljs-keyword">if</span>(fast.next == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> slow.data;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fast.next != <span class="hljs-keyword">null</span> &amp;&amp; fast.next.next == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> (slow.data + slow.next.data)/<span class="hljs-number">2</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        fast = fast.next.next;<br>        slow = slow.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出链表中的倒数第K个节点"><a href="#输出链表中的倒数第K个节点" class="headerlink" title="输出链表中的倒数第K个节点"></a>输出链表中的倒数第K个节点</h3><p>快指针先向前走K下，慢指针不动，之后，快慢指针一起动，当快指针到达尾节点的时候，慢指针就是倒数第k个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">ListNode fast = pre, slow = pre;<br><span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>) &#123;<br>    fast = fast.next;<br>    n--;<br>&#125;<br><span class="hljs-keyword">while</span>(fast.next != <span class="hljs-keyword">null</span>) &#123;<br>    fast = fast.next;<br>    slow = slow.next;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表中使用递归"><a href="#链表中使用递归" class="headerlink" title="链表中使用递归"></a>链表中使用递归</h2><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表 - 力扣（LeetCode）</a></p><p>使用递归实现，新链表也不需要构造新节点，我们下面列举递归三个要素</p><ul><li>终止条件：两条链表分别名为 l1 和 l2，当 l1 为空或 l2 为空时结束</li><li>返回值：每一层调用都返回排序好的链表头</li><li>本级递归内容：如果 l1 的 val 值更小，则将 l1.next 与排序好的链表头相接，l2 同理</li><li>O(m+n)O(m+n)，mm 为 l1的长度，nn 为 l2 的长度</li></ul><p><img src="https://img.mercuryblog.site/img/image-20220707202440270.png" alt="图解"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(l1 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l2 == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(l1.val &lt; l2.val) &#123;<br>            l1.next = mergeTwoLists(l1.next, l2);<span class="hljs-comment">//不断赋值连接</span><br>            <span class="hljs-keyword">return</span> l1;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            l2.next = mergeTwoLists(l1, l2.next);<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数据结构与算法</title>
    <link href="/2022/06/20/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/20/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">前言<ul>    <div>本博客主要是学习《大话数据结构》以及<a herf = "https://www.bilibili.com/video/BV1E4411H73v" target = "_blank">尚硅谷的Java数据结构及算法所作的笔记</a></div></ul></div><h1 id="1-稀疏数组和队列"><a href="#1-稀疏数组和队列" class="headerlink" title="1. 稀疏数组和队列"></a>1. 稀疏数组和队列</h1><h2 id="1-1-稀疏数组"><a href="#1-1-稀疏数组" class="headerlink" title="1.1 稀疏数组"></a>1.1 稀疏数组</h2><h3 id="使用的场景"><a href="#使用的场景" class="headerlink" title="使用的场景"></a>使用的场景</h3><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法:"></a>处理方法:</h3><ol><li><p>记录数组<strong>一共有几行几列，有多少个不同</strong>的值</p></li><li><p>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而<strong>缩小程序</strong>的规模队列</p></li></ol><p><img src="https://img.mercuryblog.site/img/image-20220622183934608.png" alt="image-20220622183934608"></p><h3 id="转换思路"><a href="#转换思路" class="headerlink" title="转换思路"></a>转换思路</h3><p><strong>二维-&gt;稀疏数组</strong></p><ol><li>遍历原始的二维数组，得到有效数据的个数sum</li><li>根据sum就可以创建稀疏数组sparseArr int[sum + 1] [3];</li><li>将二维数组的有效数据存入到稀疏数组</li></ol><p><strong>稀疏数组-&gt;二维数组</strong></p><ol><li>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</li><li>再读取稀疏数组后几行的数据，并赋给原始的二维数组</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparseArray</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-comment">//原始的二维数组</span><br>      <span class="hljs-keyword">int</span> chessArr1[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br>      chessArr1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>      chessArr1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;<br>      chessArr1[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">2</span>;<span class="hljs-comment">//棋子在数组里面的位置</span><br><br>      System.out.println(<span class="hljs-string">&quot;原始的二维数组~~&quot;</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : chessArr1) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>, data);<br>         &#125;<br>         System.out.println();<br>      &#125;<br><br>       <span class="hljs-comment">//先遍历一遍，得到意义的数据有哪些</span><br>      <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>) &#123;<br>               sum++;<br>            &#125;<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-comment">//根据sum来创建稀疏数组</span><br>      <span class="hljs-keyword">int</span> sparseArr[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>      <span class="hljs-comment">//赋初值</span><br>      sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;<span class="hljs-comment">//11行</span><br>      sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>;<span class="hljs-comment">//11列</span><br>      sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<span class="hljs-comment">//sum个有意义的数据</span><br>      <br>      <span class="hljs-comment">// 遍历二维数组，将数据存储到稀疏数组中</span><br>      <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">//count用来表示在稀疏数组的第几行</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">11</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>) &#123;<br>               count++;<br>               sparseArr[count][<span class="hljs-number">0</span>] = i;<br>               sparseArr[count][<span class="hljs-number">1</span>] = j;<br>               sparseArr[count][<span class="hljs-number">2</span>] = chessArr1[i][j];<br>            &#125;<br>         &#125;<br>      &#125;<br>      <br>      <span class="hljs-comment">//输出稀疏数组</span><br>      System.out.println();<br>      System.out.println(<span class="hljs-string">&quot;稀疏数组~~~~&quot;</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sparseArr.length; i++) &#123;<br>         System.out.printf(<span class="hljs-string">&quot;%d\t%d\t%d\t\n&quot;</span>, sparseArr[i][<span class="hljs-number">0</span>], sparseArr[i][<span class="hljs-number">1</span>], sparseArr[i][<span class="hljs-number">2</span>]);<br>      &#125;<br>      System.out.println();<br>      <br><br><br>      <span class="hljs-comment">// 将稀疏数组恢复为原始的二维数组</span><br><br>      <span class="hljs-keyword">int</span> chessArr2[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<span class="hljs-comment">//根据第一行的数据创建二维数组</span><br>      <br><br>      <span class="hljs-comment">//遍历稀疏数组循环赋值</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; sparseArr.length; i++) &#123;<br>         chessArr2[sparseArr[i][<span class="hljs-number">0</span>]][sparseArr[i][<span class="hljs-number">1</span>]] = sparseArr[i][<span class="hljs-number">2</span>];<br>      &#125;<br>      <br>      <span class="hljs-comment">//输出恢复后的二维数组为</span><br>      System.out.println();<br>      System.out.println(<span class="hljs-string">&quot;恢复后的二维数组为：&quot;</span>);<br>      <br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : chessArr2) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>, data);<br>         &#125;<br>         System.out.println();<br>      &#125;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-队列"><a href="#1-2-队列" class="headerlink" title="1.2 队列"></a>1.2 队列</h2><h3 id="队列概念"><a href="#队列概念" class="headerlink" title="队列概念"></a>队列概念</h3><ol><li><p> 队列是一个<strong>有序列表</strong>，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</p></li><li><p>遵循<strong>先入先出</strong>的原则。即：<strong>先存入队列的数据，要先取出。后存入的要后取</strong>出</p></li><li><p>示意图：(使用数组模拟队列示意图)</p><p><img src="https://img.mercuryblog.site/img/image-20220622190958986.png" alt="示意图"></p></li></ol><h3 id="数组模拟队列思路"><a href="#数组模拟队列思路" class="headerlink" title="数组模拟队列思路"></a>数组模拟队列思路</h3><ol><li><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队列的最大容量。</p></li><li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 front 及 rear 分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear 则是随着数据输入而改变</p></li><li><p>当我们将数据存入队列时称为”addQueue”，addQueue 的处理需要有两个步骤：</p></li></ol><ul><li><p>将尾指针往后移：rear+1 , 当 front == rear （空） (这里的front是有数据的前一个位置)</p></li><li><p>若尾指针 rear 小于队列的最大下标 maxSize-1，则将数据存入 rear 所指的数组元素中，否则无法存入数据。rear == maxSize - 1(队列满)</p></li></ul><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用数组来模拟队列</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueue</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize; <span class="hljs-comment">//队列的最大容量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front; <span class="hljs-comment">// 头指针，这里代表的是有数据的前一个位置</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear; <span class="hljs-comment">// 尾指针</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr; <span class="hljs-comment">// 存放数据</span><br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arrMaxSize)</span> </span>&#123;<br>maxSize = arrMaxSize;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>front = -<span class="hljs-number">1</span>; <span class="hljs-comment">// ָ赋初值为空</span><br>rear = -<span class="hljs-number">1</span>; <span class="hljs-comment">// ָ赋初值为空</span><br>&#125;<br><br><span class="hljs-comment">// 判断是否已满</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> rear == maxSize - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> rear == front;<br>&#125;<br><br><span class="hljs-comment">// 增加数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><span class="hljs-comment">// 先判断还有没有空间可以加</span><br><span class="hljs-keyword">if</span> (isFull()) &#123;<br>System.out.println(<span class="hljs-string">&quot;队列已满~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>rear++; <span class="hljs-comment">// 将尾指针往后移</span><br>arr[rear] = n; <span class="hljs-comment">// 从后面入队</span><br>&#125;<br><br><span class="hljs-comment">// 获取队首的数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getQueue</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 还是要判断是否是空的</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br><span class="hljs-comment">// 手写一个异常抛出</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>&#125;<br>front++; <span class="hljs-comment">// 移动头指针</span><br><span class="hljs-keyword">return</span> arr[front];<br><br>&#125;<br><br><span class="hljs-comment">// 打印队列里面的全部数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQueue</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 经典判断</span><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>System.out.println(<span class="hljs-string">&quot;队列为空没有数据~~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.printf(<span class="hljs-string">&quot;arr[%d]=%d\n&quot;</span>, i, arr[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 只是查看数据，没有取出，就是没有移动头指针</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">headQueue</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (isEmpty()) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空没有数据~~&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> arr[front + <span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h3><ul><li>front变量指向<strong>队首元素</strong>，初值为0</li><li>rear变量指向队尾元素的<strong>下一个元素</strong>，初值为0。规定空出一个位置</li><li>队列为空的判定条件：front == rear</li><li>队列为满的判定条件：(rear + 1) % maxSize == front</li><li>队列中有效元素的个数：(rear - front + maxSize) % maxSize</li><li>入队和出队时，都需要让标记<strong>对maxSize取模</strong></li></ul><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleArray</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize; <span class="hljs-comment">//队列的最大容量</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front; <span class="hljs-comment">// 头指针</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear; <span class="hljs-comment">// 尾指针 这里代表的是有数据的后一个位置</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr; <span class="hljs-comment">// 存放数据</span><br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CircleArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arrMaxSize)</span> </span>&#123;<br>      maxSize = arrMaxSize;<br>      arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>   &#125;<br>   <br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> (rear  + <span class="hljs-number">1</span>) % maxSize == front;<br>   &#125;<br>   <br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> rear == front;<br>   &#125;<br><br>   <span class="hljs-comment">// 添加元素</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>      <span class="hljs-comment">// 判断是否已满</span><br>      <span class="hljs-keyword">if</span> (isFull()) &#123;<br>         System.out.println(<span class="hljs-string">&quot;队列已满，没有数据~&quot;</span>);<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-comment">//ֱ 赋值</span><br>      arr[rear] = n;<br>      <span class="hljs-comment">// 向后移动指针</span><br>      rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>   &#125;<br>   <br>   <span class="hljs-comment">// 出队</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getQueue</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">int</span> value = arr[front];<br>      front = (front + <span class="hljs-number">1</span>) % maxSize;<br>      <span class="hljs-keyword">return</span> value;<br><br>   &#125;<br>   <br>   <span class="hljs-comment">// 打印队列里面的全部数据</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQueue</span><span class="hljs-params">()</span> </span>&#123;<br><br>      <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>         System.out.println(<span class="hljs-string">&quot;队列为空~~&quot;</span>);<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//因为可能大于maxsize，因此也需要取余</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt; front + size() ; i++) &#123;<br>         System.out.printf(<span class="hljs-string">&quot;arr[%d]=%d\n&quot;</span>, i % maxSize, arr[i % maxSize]);<br>      &#125;<br>   &#125;<br>   <br>   <span class="hljs-comment">// 获取队列中的有效数据有多少个</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">// rear = 2</span><br>      <span class="hljs-comment">// front = 1</span><br>      <span class="hljs-comment">// maxSize = 3 </span><br>      <span class="hljs-keyword">return</span> (rear + maxSize - front) % maxSize;   <br>   &#125;<br>   <br>   <span class="hljs-comment">// 只是查看数据，没有取出，就是没有移动头指针</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">headQueue</span><span class="hljs-params">()</span> </span>&#123;<br><br>      <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空~~&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> arr[front];<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-链表"><a href="#2-链表" class="headerlink" title="2. 链表"></a>2. 链表</h1><h2 id="2-1-单链表"><a href="#2-1-单链表" class="headerlink" title="2.1 单链表"></a>2.1 单链表</h2><h3 id="简单的介绍"><a href="#简单的介绍" class="headerlink" title="简单的介绍"></a>简单的介绍</h3><ul><li><p> 链表是以节点的方式来存储,<strong>是链式存储</strong></p></li><li><p>每个节点包含 data 域， next 域：指向下一个节点.</p></li><li><p>链表的各个节点<strong>不一定</strong>是连续存储.</p></li><li><p>链表分<strong>带头节点的链表</strong>和<strong>没有头节点的链表</strong>，根据实际的需求来确定</p></li></ul><p>链表的逻辑结构示意图如下：</p><p><img src="https://img.mercuryblog.site/img/image-20220627184325255.png" alt="示意图"></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><strong>增加</strong></p><p>直接添加到尾部，把上一个节点的指针指向新的节点</p><p><strong>根据排名添加节点(插入)</strong></p><p>先遍历到需要插入夫人地方，将新的节点先连接到下一个节点上，然后再把上一个节点指向这个节点，</p><p>heroNode.next = temp.next;  //先连接<br>temp.next = heroNode;          //再断开</p><p><strong>修改节点</strong></p><p>遍历找到需要修改的节点，修改信息即可</p><p><strong>删除节点</strong></p><p>找到需要删除的节点的上一个节点，把当前节点(要删除节点的上一个节点)指向需要删除节点的一个节点的上一个节点</p><p>temp.next = temp.next.next;</p><p><strong>逆序打印链表</strong></p><p>使用栈的先进后出的特性来实现</p><p><strong>查找链表的倒数第几个节点</strong></p><p>倒数第几个节点就是顺数第(size-index)个节点，先遍历一遍求得长度，然后求第(size-index)个节点就行</p><p><strong>翻转链表</strong></p><p>感觉和前面的插入没有什么不同，就是需要一个next 来暂存下一个节点，防止断开后找不到下一个节点的位置</p><p><img src="https://img.mercuryblog.site/img/image-20220627193150020.png"></p><p><img src="https://img.mercuryblog.site/img/image-20220627194129143.png"></p><p><img src="https://img.mercuryblog.site/img/image-20220627194520787.png"></p><p><img src="https://img.mercuryblog.site/img/image-20220627194557963.png"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.Mercury.linkedlist;<br><br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedListDemo</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//测试增加</span><br>HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><br><span class="hljs-comment">//创建一个新的链表</span><br>SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br><br><span class="hljs-comment">//添加几个节点</span><br>singleLinkedList.add(hero1);<br>singleLinkedList.add(hero4);<br>singleLinkedList.add(hero2);<br>singleLinkedList.add(hero3);<br><br><span class="hljs-comment">//输出链表</span><br>System.out.println(<span class="hljs-string">&quot;链表数据如下~~&quot;</span>);<br>singleLinkedList.list();<br><br><br>System.out.println(<span class="hljs-string">&quot;逆序打印链表, 没有打印链表的结构~~&quot;</span>);<br>reversePrint(singleLinkedList.getHead());<br><br><span class="hljs-comment">//翻转链表，改变了结构</span><br>System.out.println(<span class="hljs-string">&quot;翻转后的链表为&quot;</span>);<br>reversetList(singleLinkedList.getHead());<br>singleLinkedList.list();<br><br><br>        <span class="hljs-comment">//创建一个新的链表</span><br>SingleLinkedList singleLinkedList2 = <span class="hljs-keyword">new</span> SingleLinkedList();<br><span class="hljs-comment">//按照排名添加</span><br>singleLinkedList2.addByOrder(hero1);<br>singleLinkedList2.addByOrder(hero4);<br>singleLinkedList2.addByOrder(hero2);<br>singleLinkedList2.addByOrder(hero3);<br><br><span class="hljs-comment">//修改节点的值</span><br>HeroNode newHeroNode = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;小卢&quot;</span>, <span class="hljs-string">&quot;玉麒麟~~&quot;</span>);<br>singleLinkedList2.update(newHeroNode);<br><br>System.out.println(<span class="hljs-string">&quot;修改后的~~&quot;</span>);<br>singleLinkedList2.list();<br><br><br>singleLinkedList2.del(<span class="hljs-number">1</span>);<br>singleLinkedList2.del(<span class="hljs-number">4</span>);<br>System.out.println(<span class="hljs-string">&quot;删除后的节点为~~&quot;</span>);<br>singleLinkedList2.list();<br><br><span class="hljs-comment">//求有效节点数</span><br>System.out.println(<span class="hljs-string">&quot;有效节点数=&quot;</span> + getLength(singleLinkedList2.getHead()));<br><br><br>HeroNode res = findLastIndexNode(singleLinkedList2.getHead(), <span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;res=&quot;</span> + res);<br><br><br>&#125;<br><br><br><br><span class="hljs-comment">//使用栈来逆序打印</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(HeroNode head)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;HeroNode&gt;();<br>HeroNode cur = head.next;<br><span class="hljs-comment">// 如果不为空就入栈</span><br><span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>stack.push(cur);<br>cur = cur.next;<br>&#125;<br>        <span class="hljs-comment">//栈不为空就出栈</span><br><span class="hljs-keyword">while</span> (stack.size() &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(stack.pop());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//翻转链表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reversetList</span><span class="hljs-params">(HeroNode head)</span> </span>&#123;<br><span class="hljs-comment">//链表是空的，或者只有一个节点，那还翻转个什么</span><br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span> || head.next.next == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-comment">//一样的用来遍历节点的临时节点</span><br>HeroNode cur = head.next;<br>HeroNode next = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// ָ用来保存当前节点的下一个节点</span><br>HeroNode reverseHead = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-comment">//不断的在头部插入遍历的节点以达到翻转的效果</span><br><span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123; <br>next = cur.next;<span class="hljs-comment">//暂时保存当前节点的下一个节点</span><br>cur.next = reverseHead.next;<span class="hljs-comment">//先连接cur和revers的下一个节点</span><br>reverseHead.next = cur; <span class="hljs-comment">//将头节点指向当前的节点</span><br>cur = next;<span class="hljs-comment">//cur移到下一位</span><br>&#125;<br><br>head.next = reverseHead.next;<span class="hljs-comment">//改变头部</span><br>&#125;<br><br><span class="hljs-comment">//查找单链表中的倒数第 k 个结点</span><br><span class="hljs-comment">//思路</span><br><span class="hljs-comment">//1. 编写一个方法，接收 head 节点，同时接收一个 index</span><br><span class="hljs-comment">//2. index 表示是倒数第 index 个节点</span><br><span class="hljs-comment">//3. 先把链表从头到尾遍历，得到链表的总的长度 getLength</span><br><span class="hljs-comment">//4. 得到 size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到//5. 如果找到了，则返回该节点，否则返回 null</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title">findLastIndexNode</span><span class="hljs-params">(HeroNode head, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> size = getLength(head);<br><br><br><span class="hljs-keyword">if</span>(index &lt;=<span class="hljs-number">0</span> || index &gt; size) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <br>&#125;<br><br>HeroNode cur = head.next; <span class="hljs-comment">//3 // 3 - 1 = 2</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i&lt; size - index; i++) &#123;<br>cur = cur.next;<br>&#125;<br><span class="hljs-keyword">return</span> cur;<br><br>&#125;<br><br><span class="hljs-comment">//获取链表的有效节点数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">(HeroNode head)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//带头结点的空链表</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><br>HeroNode cur = head.next;<br><span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>length++;<br>cur = cur.next; <span class="hljs-comment">//遍历写一个</span><br>&#125;<br><span class="hljs-keyword">return</span> length;<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//SingleLinkedList</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> HeroNode head = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br><br><span class="hljs-comment">//获取头部</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getHead</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<br><br><span class="hljs-comment">//需要用一个temp来遍历</span><br>HeroNode temp = head;<br><span class="hljs-comment">//找尾部</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-comment">//找到了尾部</span><br><span class="hljs-keyword">if</span>(temp.next == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//没有找到，继续向下一个遍历</span><br>temp = temp.next;<br>&#125;<br><span class="hljs-comment">//将新节点赋给尾部</span><br>temp.next = heroNode;<span class="hljs-comment">//Java对象是引用传递</span><br>&#125;<br><br><span class="hljs-comment">//根据排名将英雄添加到指定位置，如果有这个排名，则添加失败，并且给出提示</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span> </span>&#123;<br><br><span class="hljs-comment">//单链表需要找添加位置的前一个节点</span><br>HeroNode temp = head;<br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// flag标志添加的编号是否存在，默认为false</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">if</span>(temp.next == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//遍历到了尾部了</span><br><span class="hljs-keyword">break</span>;<br>&#125; <br><span class="hljs-keyword">if</span>(temp.next.no &gt; heroNode.no) &#123; <span class="hljs-comment">//找到了该添加的位置</span><br><span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no) &#123;<span class="hljs-comment">//编号已经存在，不能再添加</span><br><br>flag = <span class="hljs-keyword">true</span>; <span class="hljs-comment">//设置不能再添加的标志</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next; <span class="hljs-comment">//都不是以上情况，继续遍历下一个</span><br>&#125;<br><span class="hljs-comment">//判断flag的值，看看有没有出现上面的那种情况</span><br><span class="hljs-keyword">if</span>(flag) &#123;<br>System.out.printf(<span class="hljs-string">&quot;准备插入英雄编号 %d 已经存在, 不能再加入\n&quot;</span>, heroNode.no);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//进行插入操作</span><br>heroNode.next = temp.next;<span class="hljs-comment">//先连接</span><br>temp.next = heroNode;<span class="hljs-comment">//再断开</span><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//根据no来修改</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode newHeroNode)</span> </span>&#123;<br><br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;链表为空~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//根据no找到需要修改的节点</span><br>HeroNode temp = head.next;<br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<span class="hljs-comment">//表示是否找到该节点</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(temp.no == newHeroNode.no) &#123;<br><span class="hljs-comment">//找到该节点</span><br>flag = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next;<span class="hljs-comment">//没找到，继续找</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(flag) &#123;<br>temp.name = newHeroNode.name;<br>temp.nickname = newHeroNode.nickname;<span class="hljs-comment">//找到了该节点，进行修改</span><br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//没有找到节点</span><br>System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的节点\n&quot;</span>, newHeroNode.no);<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>HeroNode temp = head;<br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 设置有没有找到的标志</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">if</span>(temp.next == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(temp.next.no == no) &#123;<br><span class="hljs-comment">//找到待删除的前一个节点temp</span><br>flag = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next; <span class="hljs-comment">//temp继续遍历下一个</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(flag) &#123;<br><span class="hljs-comment">//找到了待删除的前一个节点，进行删除</span><br>temp.next = temp.next.next;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的节点\n&quot;</span>, no);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 从头部的下一个开始</span><br>HeroNode temp = head.next;<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><br><span class="hljs-keyword">if</span>(temp == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 一个个接着打印</span><br>System.out.println(temp);<br><span class="hljs-comment">// 打印完以后移位</span><br>temp = temp.next;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//HeroNode</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br><span class="hljs-keyword">public</span> String name;<br><span class="hljs-keyword">public</span> String nickname;<br><span class="hljs-keyword">public</span> HeroNode next; <span class="hljs-comment">//ָ指向下一个节点</span><br><span class="hljs-comment">//构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, String name, String nickname)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.no = no;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.nickname = nickname;<br>&#125;<br><span class="hljs-comment">//重写toString</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, nickname=&quot;</span> + nickname + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出的数据如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">链表数据如下~~<br>HeroNode [no=<span class="hljs-number">1</span>, name=宋江, nickname=及时雨]<br>HeroNode [no=<span class="hljs-number">4</span>, name=林冲, nickname=豹子头]<br>HeroNode [no=<span class="hljs-number">2</span>, name=卢俊义, nickname=玉麒麟]<br>HeroNode [no=<span class="hljs-number">3</span>, name=吴用, nickname=智多星]<br>逆序打印链表, 没有打印链表的结构~~<br>HeroNode [no=<span class="hljs-number">3</span>, name=吴用, nickname=智多星]<br>HeroNode [no=<span class="hljs-number">2</span>, name=卢俊义, nickname=玉麒麟]<br>HeroNode [no=<span class="hljs-number">4</span>, name=林冲, nickname=豹子头]<br>HeroNode [no=<span class="hljs-number">1</span>, name=宋江, nickname=及时雨]<br>翻转后的链表为<br>HeroNode [no=<span class="hljs-number">3</span>, name=吴用, nickname=智多星]<br>HeroNode [no=<span class="hljs-number">2</span>, name=卢俊义, nickname=玉麒麟]<br>HeroNode [no=<span class="hljs-number">4</span>, name=林冲, nickname=豹子头]<br>HeroNode [no=<span class="hljs-number">1</span>, name=宋江, nickname=及时雨]<br>修改后的~~<br>HeroNode [no=<span class="hljs-number">1</span>, name=宋江, nickname=及时雨]<br>HeroNode [no=<span class="hljs-number">2</span>, name=小卢, nickname=玉麒麟~~]<br>HeroNode [no=<span class="hljs-number">3</span>, name=吴用, nickname=智多星]<br>HeroNode [no=<span class="hljs-number">4</span>, name=林冲, nickname=豹子头]<br>删除后的节点为~~<br>HeroNode [no=<span class="hljs-number">2</span>, name=小卢, nickname=玉麒麟~~]<br>HeroNode [no=<span class="hljs-number">3</span>, name=吴用, nickname=智多星]<br>有效节点数=<span class="hljs-number">2</span><br>res=HeroNode [no=<span class="hljs-number">2</span>, name=小卢, nickname=玉麒麟~~]<br></code></pre></td></tr></table></figure><h2 id="2-2-双向链表"><a href="#2-2-双向链表" class="headerlink" title="2.2 双向链表"></a>2.2 双向链表</h2><h3 id="简单的介绍-1"><a href="#简单的介绍-1" class="headerlink" title="简单的介绍"></a>简单的介绍</h3><p>管理单向链表的缺点分析:</p><ol><li><p>单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</p></li><li><p>单向链表不能自我删除，需要靠辅助节点 ，而双向链表，则可以自我删除，所以前面我们单链表删除时节点，总是找到 temp,temp 是待删除节点的前一个节点(认真体会).</p></li></ol><h3 id="思路实现"><a href="#思路实现" class="headerlink" title="思路实现"></a>思路实现</h3><ol><li><p><strong>遍历</strong> 方和 单链表一样，只是可以向前，也可以向后查找 </p></li><li><p><strong>添加</strong> (默认添加到双向链表的最后)</p></li></ol><p>​        先找到双向链表的最后这个节点</p><p>​         temp.next = newHeroNode</p><p>​         newHeroNode.pre = temp;</p><ol start="3"><li><p><strong>修改</strong> 思路和 原来的单向链表一样.</p></li><li><p><strong>删除</strong></p></li></ol><ul><li><p>因为是双向链表，因此，我们可以实现自我删除某个节点直接找到要删除的这个节点，比如 temp</p></li><li><p>temp.pre.next = temp.next</p></li><li><p>temp.next.pre = temp.pre;</p><ul><li>如果这里是最后一个节点的话需要额外判断一下，否则会出现空指针异常</li></ul></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.Mercury.linkedlist;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedListDemo</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>HeroNode2 hero1 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>, <span class="hljs-string">&quot;及时雨&quot;</span>);<br>HeroNode2 hero2 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>, <span class="hljs-string">&quot;玉麒麟&quot;</span>);<br>HeroNode2 hero3 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;吴用&quot;</span>, <span class="hljs-string">&quot;智多星&quot;</span>);<br>HeroNode2 hero4 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;豹子头&quot;</span>);<br><span class="hljs-comment">// 添加节点</span><br>DoubleLinkedList doubleLinkedList = <span class="hljs-keyword">new</span> DoubleLinkedList();<br>doubleLinkedList.add(hero1);<br>doubleLinkedList.add(hero2);<br>doubleLinkedList.add(hero3);<br>doubleLinkedList.add(hero4);<br><br>doubleLinkedList.list();<br><br>        <span class="hljs-comment">//修改节点</span><br>HeroNode2 newHeroNode = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;公孙胜&quot;</span>, <span class="hljs-string">&quot;入云龙&quot;</span>);<br>doubleLinkedList.update(newHeroNode);<br>System.out.println(<span class="hljs-string">&quot;修改后的链表情况&quot;</span>);<br>doubleLinkedList.list();<br><br><span class="hljs-comment">// 删除</span><br>doubleLinkedList.del(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;删除后的链表情况~~&quot;</span>);<br>doubleLinkedList.list();<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 双向链表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span> </span>&#123;<br><br><br><span class="hljs-keyword">private</span> HeroNode2 head = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode2 <span class="hljs-title">getHead</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><br>    <span class="hljs-comment">//链表遍历没有什么变化</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;双向链表为空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>HeroNode2 temp = head.next;<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br><span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>System.out.println(temp);<br>temp = temp.next;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 添加方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode2 heroNode)</span> </span>&#123;<br><br><br>HeroNode2 temp = head;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br><span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>temp = temp.next;<br>&#125;<br><span class="hljs-comment">//就多了一句话</span><br>temp.next = heroNode;<br>heroNode.pre = temp;<br>&#125;<br><br><br><span class="hljs-comment">// 没有什么变化就只是类型变为了 HeroNode2</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode2 newHeroNode)</span> </span>&#123;<br><br><span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;链表为空~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>HeroNode2 temp = head.next;<br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (temp.no == newHeroNode.no) &#123;<br>flag = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next;<br>&#125;<br><span class="hljs-keyword">if</span> (flag) &#123;<br>temp.name = newHeroNode.name;<br>temp.nickname = newHeroNode.nickname;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的节点\n&quot;</span>, newHeroNode.no);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 双向链表的删除这里有着较大的区别</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br><br><span class="hljs-comment">// 熟悉的判断是否为空</span><br><span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;双向链表为空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>HeroNode2 temp = head.next; <span class="hljs-comment">// 熟悉的temp指针</span><br><span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 熟悉的判断有没有找到</span><br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 因为双向的链表的删除不需要找节点的前一个节点了，所以这里直接判断temp是否为空就行</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (temp.no == no) &#123;<br><span class="hljs-comment">// 同样的道理，这里也是直接判断temp的编号</span><br>flag = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = temp.next; <span class="hljs-comment">// temp后移</span><br>&#125;<br><span class="hljs-comment">// 判断flag</span><br><span class="hljs-keyword">if</span> (flag) &#123;<br><span class="hljs-comment">//以前单链表的删除操作</span><br><span class="hljs-comment">// temp.next = temp.next.next;</span><br>temp.pre.next = temp.next;<br><span class="hljs-comment">// 这里有一个问题，如果要删除的temp是链表的最后一个元素的话，下面的这一句话就会出现空指针异常</span><br><span class="hljs-comment">// 所以这里需要再判断一下，如果是最后一个元素就不需要执行下面一句话</span><br><span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>) &#123;<br>temp.next.pre = temp.pre;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的节点\n&quot;</span>, no);<br>&#125;<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode2</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br><span class="hljs-keyword">public</span> String name;<br><span class="hljs-keyword">public</span> String nickname;<br><span class="hljs-keyword">public</span> HeroNode2 next; <span class="hljs-comment">// 指向下一个节点null</span><br><span class="hljs-keyword">public</span> HeroNode2 pre; <span class="hljs-comment">// ָ指向上一个节点null</span><br><br>    <span class="hljs-comment">//构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, String name, String nickname)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.no = no;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.nickname = nickname;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, nickname=&quot;</span> + nickname + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-约瑟夫环"><a href="#2-3-约瑟夫环" class="headerlink" title="2.3 约瑟夫环"></a>2.3 约瑟夫环</h2><h3 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h3><p>Josephu  问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><h3 id="思路实现-1"><a href="#思路实现-1" class="headerlink" title="思路实现"></a>思路实现</h3><p>使用单向环形链表实现，每报到一个数的时候就让这个节点打印出来，然后删除节点，直到只有最后一个节点</p><p> <img src="https://img.mercuryblog.site/img/image-20220627200346925.png" alt="出去的顺序"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.Mercury.linkedlist;<br><br><br><span class="hljs-comment">//约瑟夫环问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Josepfu</span> </span>&#123;<br><br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>      CircleSingleLinkedList circleSingleLinkedList = <span class="hljs-keyword">new</span> CircleSingleLinkedList();<br>      circleSingleLinkedList.addBoy(<span class="hljs-number">5</span>);<span class="hljs-comment">// 添加小孩</span><br>      <span class="hljs-comment">//circleSingleLinkedList.showBoy();</span><br>      <br>      <span class="hljs-comment">//测试</span><br>      circleSingleLinkedList.countBoy(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 2-&gt;4-&gt;1-&gt;5-&gt;3</span><br>   &#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleSingleLinkedList</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> Boy first = <span class="hljs-keyword">null</span>;<br><br>   <span class="hljs-comment">// 添加小孩，构造环形链表</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addBoy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums)</span> </span>&#123;<br>      <span class="hljs-comment">// nums &lt; 1那还添加个啥，总不能添加半个小孩吧</span><br>      <span class="hljs-keyword">if</span> (nums &lt; <span class="hljs-number">1</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot;nums 输入有误，请重新输入&quot;</span>);<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br>      Boy curBoy = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// curboy用来指向当前的节点</span><br>      <span class="hljs-comment">// 以循环添加</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nums; i++) &#123;<br>         <span class="hljs-comment">// 构造新小孩</span><br>         Boy boy = <span class="hljs-keyword">new</span> Boy(i);<br>         <span class="hljs-comment">//如果是第一个小孩</span><br>         <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>            first = boy;<br>            first.setNext(first); <span class="hljs-comment">// 构成环状</span><br>            curBoy = first; <span class="hljs-comment">//cur 当前也在第一个的位置</span><br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            curBoy.setNext(boy);<span class="hljs-comment">// 添加到尾部</span><br>            boy.setNext(first);<span class="hljs-comment">// 指向头部，形成环状</span><br>            curBoy = boy;<span class="hljs-comment">// 移动到新添加的位置</span><br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// 一个展示的函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showBoy</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">// 链表为空</span><br>      <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot;当前链表为空~~&quot;</span>);<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      Boy curBoy = first;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>         System.out.printf(<span class="hljs-string">&quot;当前小孩的编号为 %d \n&quot;</span>, curBoy.getNo());<br>         <span class="hljs-keyword">if</span> (curBoy.getNext() == first) &#123;<span class="hljs-comment">// 说明已经遍历完了一遍</span><br>            <span class="hljs-keyword">break</span>;<br>         &#125;<br>         curBoy = curBoy.getNext(); <span class="hljs-comment">// curBoy后移</span><br>      &#125;<br>   &#125;<br><br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> startNo  表示从第几个小孩开始数数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> countNum  表示数几下</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> nums   表示最初有几个小孩在圈中</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">countBoy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> startNo, <span class="hljs-keyword">int</span> countNum, <span class="hljs-keyword">int</span> nums)</span> </span>&#123;<br><br>      <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span> || startNo &lt; <span class="hljs-number">1</span> || startNo &gt; nums) &#123;<br>         System.out.println(<span class="hljs-string">&quot;链表为空或输入的编号有误&quot;</span>);<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-comment">// 定义一个辅助的变量用来删除出去的节点</span><br>      Boy helper = first;<br>      <span class="hljs-comment">// helper</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>         <span class="hljs-keyword">if</span> (helper.getNext() == first) &#123; <span class="hljs-comment">// 移动helper到第一个节点</span><br>            <span class="hljs-keyword">break</span>;<br>         &#125;<br>         helper = helper.getNext();<br>      &#125;<br>      <span class="hljs-comment">// 移动到开始报数的位置</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; startNo - <span class="hljs-number">1</span>; j++) &#123;<br>         first = first.getNext();<br>         helper = helper.getNext();<br>      &#125;<br><br>      <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>         <span class="hljs-keyword">if</span>(helper == first) &#123; <span class="hljs-comment">// 说明只剩下了一个节点，结束循环</span><br>            <span class="hljs-keyword">break</span>;<br>         &#125;<br>         <span class="hljs-comment">// 要报数几个节点就是 first 和 helper 移动 countNum - 1 位</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; countNum - <span class="hljs-number">1</span>; j++) &#123;<br>            first = first.getNext();<br>            helper = helper.getNext();<br>         &#125;<br><br>         System.out.printf(<span class="hljs-string">&quot;出环的孩子编号为 %d \n&quot;</span>, first.getNo());<br>         <span class="hljs-comment">// first移动到下一位，以便删除</span><br>         first = first.getNext();<br>         helper.setNext(first); <span class="hljs-comment">//helper指向现在的位置，之前first指向的元素即被舍弃，会被GC回收</span><br>         <br>      &#125;<br>      System.out.printf(<span class="hljs-string">&quot;最后出环的孩子编号为 %d \n&quot;</span>, first.getNo());<br>      <br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// boy实体类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boy</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> no;<span class="hljs-comment">// 数据域</span><br>   <span class="hljs-keyword">private</span> Boy next; <span class="hljs-comment">// 指针域</span><br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Boy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.no = no;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNo</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> no;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.no = no;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Boy <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> next;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(Boy next)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.next = next;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-栈"><a href="#3-栈" class="headerlink" title="3. 栈"></a>3. 栈</h1><h2 id="3-1-初识栈"><a href="#3-1-初识栈" class="headerlink" title="3.1 初识栈"></a>3.1 初识栈</h2><h3 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h3><p>栈是一种先进后出的有序列表，限制删除和增加的操作只能在同一端的特殊线性表，变化的一端就是栈顶，另一端被我们称为栈底。</p><p><strong>栈的应用场景</strong></p><ul><li>子程序的调用</li><li>处理递归调用</li><li>表达式的求值</li><li>二叉树的遍历</li><li>图的深度优先搜索</li></ul><h3 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>使用数组来模拟栈</li><li>栈顶定义为top，初始值设为-1</li><li>入栈 top++ ; stack[top] = data;</li><li>出栈 int value = stack[top]; top–;</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用数组来模拟栈</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] stack;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>;<span class="hljs-comment">//栈顶</span><br><br><span class="hljs-comment">//构造器</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<br><span class="hljs-keyword">this</span>.maxSize  = maxSize;<br>stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-keyword">this</span>.maxSize];<br>&#125;<br><br><span class="hljs-comment">//判断栈满</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<span class="hljs-comment">//wc 简直机智</span><br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//入栈</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br><span class="hljs-keyword">if</span>(isFull()) &#123;<br>System.out.println(<span class="hljs-string">&quot;栈已经满了&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>top++;<br>stack[top] = value;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>  <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(isEmpty())&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span>  RuntimeException(<span class="hljs-string">&quot;栈已经空了&quot;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> value = stack[top];<br>top--;<br><span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-comment">//遍历栈</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(isEmpty())&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = top; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>   System.out.printf(<span class="hljs-string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStackDemo</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>ArrayStack arrayStack = <span class="hljs-keyword">new</span> ArrayStack(<span class="hljs-number">4</span>);<br>arrayStack.push(<span class="hljs-number">10</span>);<br>arrayStack.push(<span class="hljs-number">9</span>);<br>arrayStack.push(<span class="hljs-number">4</span>);<br>System.out.println(arrayStack.pop());<br>System.out.println(arrayStack.pop());<br>System.out.println(arrayStack.pop());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">4</span><br><span class="hljs-number">9</span><br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="3-2-表达式求值"><a href="#3-2-表达式求值" class="headerlink" title="3.2 表达式求值"></a>3.2 表达式求值</h2><p>表达式求值是栈的经典的应用之一,简单的来说，就是把一长串的数学表达式，通过程序计算出来，实现一个计算机的功能</p><h3 id="实现的思路"><a href="#实现的思路" class="headerlink" title="实现的思路"></a>实现的思路</h3><ul><li>建立两个栈来分别存储数字和运算符号，并使用一个索引遍历表达式</li><li>遇到数字直接就进入数栈</li><li>遇到符号<ul><li>如果符号栈是空的，直接入符号栈</li><li>如果不是空的，当前的符号的优先级小于或等于栈顶的元素，符号栈弹出一个符号，数字栈弹出两个数字计算，运算结果进入数字栈，然后当前的符号入符号栈</li><li>如果不是空的，当前的符号的优先级大于栈顶的元素，当前的元素直接入符号栈</li></ul></li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.Mercury.stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>String expression = <span class="hljs-string">&quot;7*2*2-5+1-5+3-4&quot;</span>; <span class="hljs-comment">// 18</span><br><br>ArrayStack2 numStack = <span class="hljs-keyword">new</span> ArrayStack2(<span class="hljs-number">10</span>);<br>ArrayStack2 operStack = <span class="hljs-keyword">new</span> ArrayStack2(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> num1 = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">int</span> num2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> oper = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> ch = <span class="hljs-string">&#x27; &#x27;</span>;<br>String keepNum = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>ch = expression.substring(index, index+<span class="hljs-number">1</span>).charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//取出表达式里面的字符</span><br><span class="hljs-keyword">if</span>(operStack.isOper(ch)) &#123;<span class="hljs-comment">//判断是否是符号</span><br><span class="hljs-keyword">if</span>(!operStack.isEmpty()) &#123;<span class="hljs-comment">//如果栈没有空</span><br><span class="hljs-keyword">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;<span class="hljs-comment">//新的符号没有栈顶的符号优先级高</span><br>num1 = numStack.pop();<br>num2 = numStack.pop();<span class="hljs-comment">//弹两个数字出来</span><br>oper = operStack.pop();<span class="hljs-comment">//弹一个符号出来</span><br>res = numStack.cal(num1, num2, oper);<span class="hljs-comment">//计算结果</span><br>numStack.push(res);<span class="hljs-comment">//结果入栈</span><br>operStack.push(ch);<span class="hljs-comment">//新的符号入栈</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//新的符号比栈顶的符号优先级高，直接入栈</span><br>operStack.push(ch);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>operStack.push(ch); <span class="hljs-comment">//符号栈是空的，直接入栈</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//是数字</span><br>keepNum += ch;<span class="hljs-comment">//拼接成字符串</span><br><span class="hljs-keyword">if</span> (index == expression.length() - <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//如果是在字符串的尾巴，说明后面不会再有数字，直接转换为数字入栈</span><br>numStack.push(Integer.parseInt(keepNum));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (operStack.isOper(expression.substring(index+<span class="hljs-number">1</span>,index+<span class="hljs-number">2</span>).charAt(<span class="hljs-number">0</span>))) &#123;<span class="hljs-comment">//后面一位是符号，也是转换为数字后入栈</span><br>numStack.push(Integer.parseInt(keepNum));<br>keepNum = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//入栈后，清空原来的字符串</span><br>&#125;<br><span class="hljs-comment">//如果没有进上面那个if分支，keepNum就会一直加，直到后面一位是符号后才入栈</span><br>&#125;<br>&#125;<br>index++;<br><span class="hljs-keyword">if</span> (index &gt;= expression.length()) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//全部入栈后</span><br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br><span class="hljs-keyword">if</span>(operStack.isEmpty()) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>num1 = numStack.pop();<br>num2 = numStack.pop();<br>oper = operStack.pop();<br>res = numStack.cal(num1, num2, oper);<span class="hljs-comment">//依次弹出栈，进行运算</span><br>numStack.push(res);<br>&#125;<br><span class="hljs-keyword">int</span> res2 = numStack.pop();<span class="hljs-comment">//得到最后的结果</span><br>System.out.printf(<span class="hljs-string">&quot; %s = %d&quot;</span>, expression, res2);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack2</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] stack;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.maxSize = maxSize;<br>stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-keyword">this</span>.maxSize];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> stack[top];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br><br><span class="hljs-keyword">if</span>(isFull()) &#123;<br>System.out.println(<span class="hljs-string">&quot;栈是满的&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>top++;<br>stack[top] = value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">if</span>(isEmpty()) &#123;<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈是空的~&quot;</span>);<br>&#125;<br><span class="hljs-keyword">int</span> value = stack[top];<br>top--;<br><span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(isEmpty()) &#123;<br>System.out.println(<span class="hljs-string">&quot;栈是空的~~&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = top; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>System.out.printf(<span class="hljs-string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">priority</span><span class="hljs-params">(<span class="hljs-keyword">int</span> oper)</span> </span>&#123;<span class="hljs-comment">//判断优先级的额函数</span><br><span class="hljs-keyword">if</span>(oper == <span class="hljs-string">&#x27;*&#x27;</span> || oper == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;+&#x27;</span> || oper == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOper</span><span class="hljs-params">(<span class="hljs-keyword">char</span> val)</span> </span>&#123;<br><span class="hljs-keyword">return</span> val == <span class="hljs-string">&#x27;+&#x27;</span> || val == <span class="hljs-string">&#x27;-&#x27;</span> || val == <span class="hljs-string">&#x27;*&#x27;</span> || val == <span class="hljs-string">&#x27;/&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2, <span class="hljs-keyword">int</span> oper)</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">switch</span> (oper) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>res = num1 + num2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>res = num2 - num1; <span class="hljs-comment">//后弹出栈的减先弹出栈的数字</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>res = num1 * num2;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>res = num2 / num1;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-3-中缀转后缀"><a href="#3-3-中缀转后缀" class="headerlink" title="3.3 中缀转后缀"></a>3.3 中缀转后缀</h2><p><strong>后缀表达式(逆波兰表达式)的计算</strong></p><p>从左到右扫描后缀表达式，遇到数字入栈，遇到符号，弹出两个数字计算，将结果入栈，最后得出最后结果，</p><h3 id="实现思路-2"><a href="#实现思路-2" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>初始化一个符号栈s1，一个存储中间结果的栈s2，从左到右扫描表达式</li><li>遇到数字，直接压入s2</li><li>遇到运算符<ul><li>s1为空，s1栈顶为左括号’ ( ‘,当前符号比栈顶运算符优先级高，直接入栈s1</li><li>否则(s1栈顶的元素优先级小于或等于当前的元素的优先级)将s1栈顶的运算符弹出并压入s2中，再次与s1中的栈顶元素比较</li></ul></li><li>遇到括号<ul><li>遇到左括号’(‘ 直接压入s1</li><li>遇到右括号 ‘)’  依次弹出s1栈顶的运算符并压入s2,直到遇到左括号为止，然后将这一对括号丢弃</li></ul></li><li>将s1中剩余的运算符依次弹出并压入s2</li><li>依次弹出s2中的元素并输出，结果的逆序就是结果</li></ul><p><strong>1+( ( 2 + 3 ) * 4 ) - 5 的转换过程</strong></p><p><img src="https://img.mercuryblog.site/img/image-20220707165627801.png"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PolandNotation</span> </span>&#123;<br><br><br><span class="hljs-comment">//中缀表达式转后缀表达式</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><br><br>String expression = <span class="hljs-string">&quot;1+((2+3)*4)-5&quot;</span>;<br>List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);<br>System.out.println(<span class="hljs-string">&quot;中缀表达式 List=&quot;</span> + infixExpressionList); <span class="hljs-comment">// ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span><br>List&lt;String&gt; suffixExpreesionList = parseSuffixExpreesionList(infixExpressionList);<br>System.out.println(<span class="hljs-string">&quot;后缀表达式 List&quot;</span> + suffixExpreesionList); <span class="hljs-comment">//ArrayList [1,2,3,+,4,*,+,5,-]</span><br>System.out.printf(<span class="hljs-string">&quot;expression=%d&quot;</span>, calculate(suffixExpreesionList)); <span class="hljs-comment">// 最后的计算结果</span><br><br>&#125;<br><br><span class="hljs-comment">// 将表达式装入集合</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">toInfixExpressionList</span><span class="hljs-params">(String s)</span> </span>&#123;<br><br>List&lt;String&gt; ls = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>String str;<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-comment">//如果是数字</span><br><span class="hljs-keyword">if</span>((c=s.charAt(i)) &lt; <span class="hljs-number">48</span> ||  (c=s.charAt(i)) &gt; <span class="hljs-number">57</span>) &#123;<br>ls.add(<span class="hljs-string">&quot;&quot;</span> + c);<br>i++;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>str = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class="hljs-number">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class="hljs-number">57</span>) &#123;<br>str += c;<br>i++;<br>&#125;<br>ls.add(str);<br>&#125;<br>&#125;<span class="hljs-keyword">while</span>(i &lt; s.length());<br><span class="hljs-keyword">return</span> ls;<br>&#125;<br><br><span class="hljs-comment">//中缀转换为后缀的函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">parseSuffixExpreesionList</span><span class="hljs-params">(List&lt;String&gt; ls)</span> </span>&#123;<br><br>Stack&lt;String&gt; s1 = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br>List&lt;String&gt; s2 = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><br><span class="hljs-keyword">for</span>(String item: ls) &#123;<br><span class="hljs-keyword">if</span>(item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123;<br>s2.add(item);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>s1.push(item);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;)&quot;</span>)) &#123;<br><span class="hljs-keyword">while</span>(!s1.peek().equals(<span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>s2.add(s1.pop());<br>&#125;<br>s1.pop();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">while</span>(s1.size() != <span class="hljs-number">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item) ) &#123;<br>s2.add(s1.pop());<br>&#125;<br>s1.push(item);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">while</span>(s1.size() != <span class="hljs-number">0</span>) &#123;<br>s2.add(s1.pop());<br>&#125;<br><span class="hljs-keyword">return</span> s2;<br><br>&#125;<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">getListString</span><span class="hljs-params">(String suffixExpression)</span> </span>&#123;<br><span class="hljs-comment">// suffixExpression</span><br>String[] split = suffixExpression.split(<span class="hljs-string">&quot; &quot;</span>);<br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br><span class="hljs-keyword">for</span>(String ele: split) &#123;<br>list.add(ele);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(List&lt;String&gt; ls)</span> </span>&#123;<br><br>Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;String&gt;();<br><br><span class="hljs-keyword">for</span> (String item : ls) &#123;<br><br><span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>)) &#123; <span class="hljs-comment">// 使用正则表达式判断是不是数字</span><br>stack.push(item);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> num2 = Integer.parseInt(stack.pop());<br><span class="hljs-keyword">int</span> num1 = Integer.parseInt(stack.pop());<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;+&quot;</span>)) &#123;<br>res = num1 + num2;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;-&quot;</span>)) &#123;<br>res = num1 - num2;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;*&quot;</span>)) &#123;<br>res = num1 * num2;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>res = num1 / num2;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;符号非法&quot;</span>);<br>&#125;<br>stack.push(<span class="hljs-string">&quot;&quot;</span> + res);<span class="hljs-comment">//计算结果入栈</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> Integer.parseInt(stack.pop());<span class="hljs-comment">//最后留在栈中的，就是最后的结果</span><br>&#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ADD = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> SUB = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MUL = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> DIV = <span class="hljs-number">2</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(String operation)</span> </span>&#123;<br><span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span> (operation) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>result = ADD;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>result = SUB;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>result = MUL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>result = DIV;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">中缀表达式 List=[<span class="hljs-number">1</span>, +, (, (, <span class="hljs-number">2</span>, +, <span class="hljs-number">3</span>, ), *, <span class="hljs-number">4</span>, ), -, <span class="hljs-number">5</span>]<br>后缀表达式 List[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, +, <span class="hljs-number">4</span>, *, +, <span class="hljs-number">5</span>, -]<br>expression=<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h1 id="4-递归"><a href="#4-递归" class="headerlink" title="4. 递归"></a>4. 递归</h1><h2 id="4-1-初识递归"><a href="#4-1-初识递归" class="headerlink" title="4.1 初识递归"></a>4.1 初识递归</h2><p><strong>递归的简单介绍</strong></p><p>简单的来说就是自己调用自己，每次调用的时候都传入不同的变量，递归有助于解决，复杂的问题，虽然他自己空间复杂度太高有时会导致算法的效率不高</p><h3 id="递归需要遵守的规则"><a href="#递归需要遵守的规则" class="headerlink" title="递归需要遵守的规则"></a>递归需要遵守的规则</h3><ul><li>执行一个方法的时候，就创建一个新的受保护的独立空间(栈空间)</li><li>方法的局部变量是独立的</li><li>如果方法中使用的是引用类型的变量(比如数组)，就会共享该类型的的数据</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现StackOverflowError</li><li>当一个方法执行完毕，或者遇到return的时候，就会返回，遵守谁调用就返回给谁的原则</li></ul><h2 id="4-2-迷宫问题"><a href="#4-2-迷宫问题" class="headerlink" title="4.2 迷宫问题"></a>4.2 迷宫问题</h2><p>从迷宫的左上角走到右下角，问你路径(这里还不是最短路径)</p><h3 id="实现思路-3"><a href="#实现思路-3" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>使用1标记墙，0代表没有走过的路，2代表走过可行的路，3代表走不通的路</li><li>使用递归依次遍历下，右，上，左四个方向，如果走不通则标记当前为3，返回上一级，重新走</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGong</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[][] map =  <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>map[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">7</span>][i] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<br>map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><br>map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br><br>setway(map,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setway</span><span class="hljs-params">(<span class="hljs-keyword">int</span> map[][], <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br><span class="hljs-keyword">if</span>(map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//递归出口</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(map[i][j] == <span class="hljs-number">0</span>)&#123;<br>map[i][j] = <span class="hljs-number">2</span>;<span class="hljs-comment">//先假设走得通，做个标记，表示已经走过</span><br><span class="hljs-keyword">if</span>(setway(map,i+<span class="hljs-number">1</span>,j))&#123;<span class="hljs-comment">//向下</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(setway(map,i,j+<span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//向右</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(setway(map,i-<span class="hljs-number">1</span>,j))&#123;<span class="hljs-comment">//向上</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(setway(map,i,j-<span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//向左</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>map[i][j] = <span class="hljs-number">3</span>;<span class="hljs-comment">//这个点走不通</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// map[i][j] == 1,2,3</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h2 id="4-3-八皇后问题"><a href="#4-3-八皇后问题" class="headerlink" title="4.3 八皇后问题"></a>4.3 八皇后问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>这个问题是一个经典的问题，回溯算法的经典案例，即在一个8*8的棋盘上面，摆放8个皇后棋子，这8个棋子不能在同一行，不能再同一列，也不能在同一条斜线上，问一共有几种摆放的方法</p><h3 id="实现思路-4"><a href="#实现思路-4" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>第一个棋子先放在第一行第一列</li><li>第二个棋子放在第二行第一列，判断是不是可行，不可行就放在第二行第二列，继续判断</li><li>继续上述步骤，直到摆放完8个棋子，得到一个可行的结果，如果都不可行，就返回上一个步骤，放在下一个位置</li><li>一直回溯，直到找到全部的解</li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue8</span> </span>&#123;<br><span class="hljs-keyword">int</span> max = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[max];<span class="hljs-comment">//数组是引用类型</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>  count = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Queue8 queue = <span class="hljs-keyword">new</span> Queue8();<br>queue.cheak(<span class="hljs-number">0</span>);<br>System.out.println(<span class="hljs-string">&quot;总数为 ：&quot;</span>+count);<br>&#125;<br><br><br><span class="hljs-comment">//摆放棋子的函数</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> x   在第几行摆放，也就是横坐标</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">cheak</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br><span class="hljs-comment">//递归的出口</span><br><span class="hljs-keyword">if</span>(x == <span class="hljs-number">8</span>)&#123;<br>print(array);<br>count++;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//i 代表在第几列摆放棋子</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; max; i++) &#123;<br>array[x] = i;<br><span class="hljs-keyword">if</span>(judge(x))&#123;<span class="hljs-comment">//如果在这一列成功摆放</span><br>cheak(x+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-comment">//如果在同一列或者同一条斜线上，则不成立,后面斜线的判断其实就是类似 斜率的判断</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">if</span>(array[i] == array[n] || Math.abs(n-i) == Math.abs(array[n] - array[i]) ) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>System.out.print(<span class="hljs-string">&quot; &quot;</span>+ array[i]);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span><br> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span><br> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span><br> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span><br> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span><br> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span><br> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span><br> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span><br> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span><br> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span><br> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span><br> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span><br> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span><br> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span><br> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span><br> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span><br> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span><br> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span><br> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span><br> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span><br> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span><br> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span><br> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span><br> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span><br> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span><br> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span><br> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span><br> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span><br> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span><br> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span><br> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span><br> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span><br> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span><br> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br>总数为 ：<span class="hljs-number">92</span><br></code></pre></td></tr></table></figure><h1 id="5-排序算法"><a href="#5-排序算法" class="headerlink" title="5. 排序算法"></a>5. 排序算法</h1><h2 id="5-1-算法的时间复杂度"><a href="#5-1-算法的时间复杂度" class="headerlink" title="5.1 算法的时间复杂度"></a>5.1 算法的时间复杂度</h2><p>我们一般使用O()来表示算法的时间复杂度</p><p>推导时间复杂度</p><ol><li>用1取代所有的加法常数</li><li>只保留最高阶项</li><li>去掉最高阶项的常数(非常数的时候)</li></ol><p><strong>常数阶</strong></p><p>比如一般的分支结构都是O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>System.out.println(sum);<br></code></pre></td></tr></table></figure><p><strong>线性阶</strong></p><p>循环结构就是O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>对数阶</strong></p><p>下面的这写代码，每次循环count就变为两倍，则运行的次数就是$2^x=n$,所以$x=log_2 n$,时间复杂度就是O(log n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(count&lt;n)&#123;<br>    count = count*<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>平方阶</strong></p><p>简单来说就是双重循环就是平方阶了，当然还是得按照推导方法来推导</p><p><strong>常见的时间度</strong></p><p>O(1) &lt; O(logn)&lt; O(n)&lt; O(nlogn)&lt; O($n^2$)&lt; O($n^3$)&lt; O($2^n$)&lt; O(n!)&lt; O($n^n$)</p><p><strong>算法的空间复杂度</strong></p><p>衡量算法性能的另一个指示标准，算法的空间复杂度的计算公式记作<strong>S(n) = O(f(n))</strong>;  n为问题的规模，f(n)为语句关于n所占存储空间的函数</p><h2 id="5-2-冒泡排序"><a href="#5-2-冒泡排序" class="headerlink" title="5.2 冒泡排序"></a>5.2 冒泡排序</h2><h3 id="冒泡简介"><a href="#冒泡简介" class="headerlink" title="冒泡简介"></a>冒泡简介</h3><p>冒泡排序应该说是程序员的入门排序算法了，他的基本的思想就是，从数组的较小的元素开始，依次比较相邻的两个元素的值，如果是逆序，则把两个值交换，</p><p>因为需要比较很多次，因此效率很低。</p><div class = "note note-success">优化</div><p>如果一趟比较下来没有进行过交换，就说明序列有序，因此可以通过设置一个flag来判断，用来减少不必要的交换</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif" alt="冒泡"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span></span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>&#125;;<br>      bubblesort(arr);<br>      System.out.println(Arrays.toString(arr));<br><br>      <span class="hljs-comment">//测试性能</span><br>      <span class="hljs-keyword">int</span>[] testArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>;i++) &#123;<br>         testArr[i] = (<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">8000000</span>);<br>      &#125;<span class="hljs-comment">//生成80000万个数据</span><br>      <span class="hljs-keyword">long</span> startTime=System.currentTimeMillis(); <span class="hljs-comment">//获取开始时间</span><br><br>      bubblesort(testArr);<br><br>      <span class="hljs-keyword">long</span> endTime=System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>      System.out.println(<span class="hljs-string">&quot;程序运行时间： &quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br><br>   &#125;<br><br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubblesort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>      <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<span class="hljs-comment">//加flag优化</span><br>      <br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[i]&lt;arr[j])&#123;<br>               flag = <span class="hljs-keyword">true</span>;<br>               temp = arr[i];<br>               arr[i] = arr[j];<br>               arr[j] = temp;<br>            &#125;<br>         &#125;<br>          <br>         <span class="hljs-keyword">if</span>(!flag)&#123;<br>            <span class="hljs-keyword">break</span>;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>            flag = <span class="hljs-keyword">false</span>;<br>         &#125;<br>      &#125;<br><br><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">1</span>]<br>八万个随机数据程序运行时间： 7760ms<br></code></pre></td></tr></table></figure><h2 id="5-3-选择排序"><a href="#5-3-选择排序" class="headerlink" title="5.3 选择排序"></a>5.3 选择排序</h2><h3 id="选择排序简介"><a href="#选择排序简介" class="headerlink" title="选择排序简介"></a>选择排序简介</h3><p>选择排序也属于内部排序法，按指定的规则选出一个元素，再依次按规定交换位置，达到排序的目的，他的基本的思想就是从要开始的排序的下标开始，把当前的数据看作是最小的数据，然后遍历后面的数据，并且不断刷新最小值，遍历完成后，与刚刚位置上面的值相比，如果没有变，就不做处理，否则交换。第二个位置则不断刷新后面未排序的里面的最小值，重复上述操作，直到排序完成。</p><h3 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h3><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015224719590-1433219824.gif" alt="选择"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelectSort</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">101</span>, <span class="hljs-number">34</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">90</span>, <span class="hljs-number">123</span>&#125;;<br>selectsort(arr);<br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">//测试性能</span><br><span class="hljs-keyword">int</span>[] testArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>;i++) &#123;<br>testArr[i] = (<span class="hljs-keyword">int</span>)(Math.random() * <span class="hljs-number">8000000</span>);<br>&#125;<span class="hljs-comment">//生成80000个数据</span><br><span class="hljs-keyword">long</span> startTime=System.currentTimeMillis(); <span class="hljs-comment">//获取开始时间</span><br><br>selectsort(testArr);<br><br><span class="hljs-keyword">long</span> endTime=System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>System.out.println(<span class="hljs-string">&quot;程序运行时间： &quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectsort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>&#123;<br><br><span class="hljs-keyword">int</span> min;<span class="hljs-comment">//熟悉的交换排序</span><br><span class="hljs-keyword">int</span> minIndex;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++) &#123;<br>min = arr[i];<br>minIndex = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<span class="hljs-comment">//寻找后面位置没有进行排序的最小的数字</span><br><span class="hljs-keyword">if</span>(min &gt; arr[j])&#123;<br>min = arr[j];<br>minIndex = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(min != arr[i])&#123;<span class="hljs-comment">//发现了有更小的数字就交换</span><br>arr[minIndex] = arr[i];<br>arr[i] = min;<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">34</span>, <span class="hljs-number">90</span>, <span class="hljs-number">101</span>, <span class="hljs-number">119</span>, <span class="hljs-number">123</span>]<br>八万个随机数据程序运行时间：  1999ms<br></code></pre></td></tr></table></figure><h2 id="5-4-插入排序"><a href="#5-4-插入排序" class="headerlink" title="5.4 插入排序"></a>5.4 插入排序</h2><h3 id="插入排序简介"><a href="#插入排序简介" class="headerlink" title="插入排序简介"></a>插入排序简介</h3><p>插入排序也属于内部排序，基本思想就是把已经排好的数据看作一组，把未排序的数据一个一个在里面找到属于自己的合适位置，并在这个过程中，把已经排好顺序的数据后移，直到那个数据找到合适的位置插入进去。</p><h3 id="图示-2"><a href="#图示-2" class="headerlink" title="图示"></a>图示</h3><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015225645277-1151100000.gif" alt="插入"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//插入排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertSort</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">101</span>, <span class="hljs-number">34</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">89</span>&#125;;<br>        insertsort(arr);<br>        System.out.println(Arrays.toString(arr));<br><br>        <span class="hljs-comment">//测试性能</span><br>        <span class="hljs-keyword">int</span>[] testArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>            testArr[i] = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">8000000</span>);<br>        &#125;<span class="hljs-comment">//生成80000个数据</span><br>        <span class="hljs-keyword">long</span> startTime=System.currentTimeMillis(); <span class="hljs-comment">//获取开始时间</span><br><br>        insertsort(testArr);<br><br>        <span class="hljs-keyword">long</span> endTime=System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>        System.out.println(<span class="hljs-string">&quot;程序运行时间： &quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertsort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> insertVal;<br>        <span class="hljs-keyword">int</span> insertIndex;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            insertVal = arr[i];<br>            insertIndex = i - <span class="hljs-number">1</span>;<span class="hljs-comment">//此时指向前面待插入的最后一位</span><br>            <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<br>                insertIndex--;<br>            &#125;<br>            <span class="hljs-comment">//这时候就找到了应该插入的位置</span><br><br>            <span class="hljs-keyword">if</span> (insertIndex + <span class="hljs-number">1</span> != i) &#123;<span class="hljs-comment">//优化</span><br>                arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<span class="hljs-comment">//这里的索引是多移动了一位的  所以需要加上一个 1</span><br>            &#125;<br><br>        &#125;<br><br><span class="hljs-comment">//        //另一种写法</span><br><span class="hljs-comment">//        for (int i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">//            int insertVal = arr[i];</span><br><span class="hljs-comment">//            int insertIndex = i ;</span><br><span class="hljs-comment">//            if(arr[insertIndex]&lt;arr[insertIndex-gap]) &#123;</span><br><span class="hljs-comment">//                while (insertIndex- gap &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex-gap]) &#123;</span><br><span class="hljs-comment">//                    arr[insertIndex ] = arr[insertIndex- gap];</span><br><span class="hljs-comment">//                    insertIndex -= gap;//不断的向前移动找寻待插入的位置</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            arr[insertIndex] = insertVal;</span><br><span class="hljs-comment">//        &#125;</span><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">34</span>, <span class="hljs-number">89</span>, <span class="hljs-number">101</span>, <span class="hljs-number">119</span>]<br>八万个随机数据程序运行时间： 437ms<br></code></pre></td></tr></table></figure><h2 id="5-5-希尔排序"><a href="#5-5-希尔排序" class="headerlink" title="5.5 希尔排序"></a>5.5 希尔排序</h2><h3 id="希尔排序简介"><a href="#希尔排序简介" class="headerlink" title="希尔排序简介"></a>希尔排序简介</h3><p>很明显，希尔排序是由希尔这个人提出来的，他是简单插入排序的经过改进后的一个更高效的版本，也被称为<strong>缩小增量排序</strong>。他的基本思想就是，把数组数据按照下标的一些分组，不断进行插入排序，分组逐渐减少，当减少到1的时候，算法便终止。</p><h3 id="图示-3"><a href="#图示-3" class="headerlink" title="图示"></a>图示</h3><p><img src="https://images2018.cnblogs.com/blog/849589/201803/849589-20180331170017421-364506073.gif" alt="shell"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//shell排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>&#125;;<br>        shellsortSwap(arr);<br>        System.out.println(Arrays.toString(arr));<br><br>        <span class="hljs-keyword">int</span>[] arr2 = &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>&#125;;<br>        shellsortInsert(arr2);<br>        System.out.println(Arrays.toString(arr2));<br><br>        <span class="hljs-comment">//测试性能</span><br>        <span class="hljs-keyword">int</span>[] testArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>            testArr[i] = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">8000000</span>);<br>        &#125;<span class="hljs-comment">//生成80000个数据</span><br>        <span class="hljs-keyword">long</span> startTime=System.currentTimeMillis(); <span class="hljs-comment">//获取开始时间</span><br><br>        shellsortInsert(testArr);<br><br>        <span class="hljs-keyword">long</span> endTime=System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>        System.out.println(<span class="hljs-string">&quot;程序运行时间： &quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;ms&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-comment">//希尔排序交换法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellsortSwap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-comment">//交换法的希尔排序其实这里面的这一层就是加了步长的冒泡</span><br>            <span class="hljs-comment">//所以效率低下</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap) &#123;<br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;<br>                        temp = arr[j + gap];<br>                        arr[j + gap] = arr[j];<br>                        arr[j] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//这里才是正宗的shell排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellsortInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//步长逐渐减少</span><br>            <span class="hljs-comment">//里面使用直接插入排序</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-keyword">int</span> insertVal = arr[i];<br>                <span class="hljs-keyword">int</span> insertIndex = i;<br>                <span class="hljs-keyword">if</span> (arr[insertIndex] &lt; arr[insertIndex - gap]) &#123;<br>                    <span class="hljs-keyword">while</span> (insertIndex - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex - gap]) &#123;<br>                        arr[insertIndex] = arr[insertIndex - gap];<br>                        insertIndex -= gap;<span class="hljs-comment">//不断的向前移动找寻待插入的位置</span><br>                    &#125;<br>                &#125;<br>                arr[insertIndex] = insertVal;<br>            &#125;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>程序运行时间： 17ms<br></code></pre></td></tr></table></figure><h2 id="5-6-快速排序"><a href="#5-6-快速排序" class="headerlink" title="5.6 快速排序"></a>5.6 快速排序</h2><h3 id="快速排序简介"><a href="#快速排序简介" class="headerlink" title="快速排序简介"></a>快速排序简介</h3><p>快速排序是对冒泡排序的一种改进，基本思想就是把将要排序的数据分为两组，其中一部分的数据比另外的一部分都要小，然后把这两组数据分别再次进行相同的操作，直到排序完成，整个过程通过递归实现。快排是一种不稳定排序</p><h3 id="图示-4"><a href="#图示-4" class="headerlink" title="图示"></a>图示</h3><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230936371-1413523412.gif" alt="快速"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//快速排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;-<span class="hljs-number">9</span>, <span class="hljs-number">78</span>, <span class="hljs-number">0</span>, <span class="hljs-number">23</span>, -<span class="hljs-number">567</span>, <span class="hljs-number">70</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">900</span>, <span class="hljs-number">4561</span>&#125;;<br>        quicksort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>        System.out.println(Arrays.toString(arr));<br><br>        <span class="hljs-comment">//测试性能</span><br>        <span class="hljs-keyword">int</span>[] testArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>            testArr[i] = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">8000000</span>);<br>        &#125;<span class="hljs-comment">//生成80000个数据</span><br>        <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis(); <span class="hljs-comment">//获取开始时间</span><br><br>        quicksort(testArr, <span class="hljs-number">0</span>, testArr.length - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">long</span> endTime = System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>        System.out.println(<span class="hljs-string">&quot;程序运行时间： &quot;</span> + (endTime - startTime) + <span class="hljs-string">&quot;ms&quot;</span>);<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pivot;<br>        <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>            pivot = Partition(arr, low, high);<br>            quicksort(arr, low, pivot - <span class="hljs-number">1</span>);<span class="hljs-comment">//对左边快排</span><br>            quicksort(arr, pivot + <span class="hljs-number">1</span>, high);<span class="hljs-comment">//对右边快排</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pivotkey;<br>        pivotkey = arr[low];<span class="hljs-comment">//把低位的数当作中轴</span><br>        <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br>            <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivotkey) &#123;<br>                high--;<br>            &#125;<br>            Swap(arr, low, high);<span class="hljs-comment">//不断寻找比中轴大的数，交换到右边</span><br>            <span class="hljs-keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivotkey) &#123;<br>                low++;<br>            &#125;<br>            Swap(arr, low, high);<span class="hljs-comment">//不断寻找比中轴小的数，交换到左边</span><br>        &#125;<span class="hljs-comment">//low==high了，退出循环，中轴数已经被环岛路中间</span><br>        <span class="hljs-keyword">return</span> low;<span class="hljs-comment">//返回下标</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> temp = arr[a];<br>        arr[a] = arr[b];<br>        arr[b] = temp;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[-<span class="hljs-number">567</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">23</span>, <span class="hljs-number">70</span>, <span class="hljs-number">78</span>, <span class="hljs-number">900</span>, <span class="hljs-number">4561</span>]<br>程序运行时间： 11ms<br></code></pre></td></tr></table></figure><h2 id="5-7-归并排序"><a href="#5-7-归并排序" class="headerlink" title="5.7 归并排序"></a>5.7 归并排序</h2><h3 id="归并排序简介"><a href="#归并排序简介" class="headerlink" title="归并排序简介"></a>归并排序简介</h3><p>这是一种利用归并思想实现的排序算法，该算法采用经典的分治思想，(分)先把数据分成很小的部分，(治)然后分别排序，即分而治之。</p><h3 id="图示-5"><a href="#图示-5" class="headerlink" title="图示"></a>图示</h3><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230557043-37375010.gif" alt="归并"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//归并排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergetSort</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">int</span> temp[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<span class="hljs-comment">//需要额外的空间</span><br><br>mergeSort(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>,temp);<br>System.out.println(Arrays.toString(arr));<br><br><br><span class="hljs-comment">//测试性能</span><br><span class="hljs-keyword">int</span>[] testArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>testArr[i] = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">8000000</span>);<br>&#125;<span class="hljs-comment">//生成80000个数据</span><br><span class="hljs-keyword">int</span> testTemp[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[testArr.length];<span class="hljs-comment">//需要额外的空间</span><br><br><span class="hljs-keyword">long</span> startTime = System.currentTimeMillis(); <span class="hljs-comment">//获取开始时间</span><br><br>mergeSort(testArr, <span class="hljs-number">0</span>, testArr.length - <span class="hljs-number">1</span>,testTemp);<br><br><span class="hljs-keyword">long</span> endTime = System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>System.out.println(<span class="hljs-string">&quot;程序运行时间： &quot;</span> + (endTime - startTime) + <span class="hljs-string">&quot;ms&quot;</span>);<br><br><br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(left &lt; right) &#123;<br><span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>mergeSort(arr, left, mid, temp);<span class="hljs-comment">//分</span><br>mergeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<span class="hljs-comment">//分</span><br>merge(arr, left, mid, right, temp);<span class="hljs-comment">//治</span><br>&#125;<br>&#125;<br><br>    <span class="hljs-comment">//将小的部分合成有序的大部分的函数，即治</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span> </span>&#123;<br><br><span class="hljs-keyword">int</span> i = left;<br><span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br><span class="hljs-keyword">if</span>(arr[i] &lt;= arr[j]) &#123;<br>temp[t] = arr[i];<br>t += <span class="hljs-number">1</span>;<br>i += <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>temp[t] = arr[j];<br>t += <span class="hljs-number">1</span>;<br>j += <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<span class="hljs-comment">//分别在临时数组中放入两个之中较小的数</span><br><br><span class="hljs-keyword">while</span>( i &lt;= mid) &#123;<br>temp[t] = arr[i];<br>t += <span class="hljs-number">1</span>;<br>i += <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-comment">//将前面剩余的数放入数组</span><br><br><span class="hljs-keyword">while</span>( j &lt;= right) &#123;<br>temp[t] = arr[j];<br>t += <span class="hljs-number">1</span>;<br>j += <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-comment">//将后面剩余的数放入数组</span><br><br>t = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> tempLeft = left;<br><span class="hljs-keyword">while</span>(tempLeft &lt;= right) &#123;<br>arr[tempLeft] = temp[t];<br>t += <span class="hljs-number">1</span>;<br>tempLeft += <span class="hljs-number">1</span>;<span class="hljs-comment">//将数据倒腾回去</span><br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>程序运行时间： 12ms<br></code></pre></td></tr></table></figure><h2 id="5-8-基数排序"><a href="#5-8-基数排序" class="headerlink" title="5.8 基数排序"></a>5.8 基数排序</h2><h3 id="基数排序简介"><a href="#基数排序简介" class="headerlink" title="基数排序简介"></a>基数排序简介</h3><p>基数排序是稳定的排序算法，是桶排序的拓展。基本的思想就是把每个数字切割出来，然后将他们按照个位大小放入桶中，排完之后，取出放入数组，然后比较十位大小，直到排序完。</p><h3 id="图示-6"><a href="#图示-6" class="headerlink" title="图示"></a>图示</h3><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015232453668-1397662527.gif" alt="归并"></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基数排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RadixSort</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> arr[] = &#123; <span class="hljs-number">53</span>, <span class="hljs-number">3</span>, <span class="hljs-number">542</span>, <span class="hljs-number">748</span>, <span class="hljs-number">14</span>, <span class="hljs-number">214</span>&#125;;<br>radixSort(arr);<br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">//测试性能</span><br><span class="hljs-keyword">int</span>[] testArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++) &#123;<br>testArr[i] = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">8000000</span>);<br>&#125;<span class="hljs-comment">//生成80000个数据</span><br><span class="hljs-keyword">int</span> testTemp[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[testArr.length];<span class="hljs-comment">//需要额外的空间</span><br><br><span class="hljs-keyword">long</span> startTime = System.currentTimeMillis(); <span class="hljs-comment">//获取开始时间</span><br><br>radixSort(testArr);<br><br><span class="hljs-keyword">long</span> endTime = System.currentTimeMillis(); <span class="hljs-comment">//获取结束时间</span><br>System.out.println(<span class="hljs-string">&quot;程序运行时间： &quot;</span> + (endTime - startTime) + <span class="hljs-string">&quot;ms&quot;</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br><br><span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>max = arr[i];<span class="hljs-comment">//找出最大的数</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> maxLength = (max + <span class="hljs-string">&quot;&quot;</span>).length();<span class="hljs-comment">//秀，找出有多少位</span><br><br><span class="hljs-keyword">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<span class="hljs-comment">//桶</span><br><span class="hljs-keyword">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> , n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n *= <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-keyword">int</span> digitOfElement = arr[j] / n % <span class="hljs-number">10</span>;<br>bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];<span class="hljs-comment">//在对应桶的第几位上面放上数字</span><br>bucketElementCounts[digitOfElement]++;<span class="hljs-comment">//该桶放的数字数量加一</span><br>&#125;<br><br><span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;<span class="hljs-comment">//遍历每个桶</span><br><span class="hljs-keyword">if</span>(bucketElementCounts[k] != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;<br>arr[index++] = bucket[k][l];<span class="hljs-comment">//将桶内的数据拿出来放在数组里面</span><br>&#125;<br>&#125;<br>bucketElementCounts[k] = <span class="hljs-number">0</span>;<br><br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">53</span>, <span class="hljs-number">214</span>, <span class="hljs-number">542</span>, <span class="hljs-number">748</span>]<br>程序运行时间： 16ms<br></code></pre></td></tr></table></figure><h2 id="5-9-排序算法总结"><a href="#5-9-排序算法总结" class="headerlink" title="5.9 排序算法总结"></a>5.9 排序算法总结</h2><p><img src="https://img.mercuryblog.site/img/image-20220715205437105.png" alt="排序算法"></p><p>相关属术语解释：</p><ul><li>稳定：如果 a 原本在 b 前面，而 a == b ，排序之后 a 仍然在 b 的前面；</li><li>不稳定：如果 a 原本在 b 的前面，而 a == b ，排序之后 a 可能会出现在 b 的后面；</li><li>内排序：所有排序操作都在内存中完成；</li><li>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>时间复杂度：一个算法执行所耗费的时间。</li><li>空间复杂度：运行完一个程序所需内存的大小。</li><li>n :数据规模</li><li>k :“桶”的个数</li><li>In - place :  不占用额外内存</li><li>Out - place ：占用额外内存</li></ul><h1 id="6-查找"><a href="#6-查找" class="headerlink" title="6. 查找"></a>6. 查找</h1><h2 id="6-1-二分查找"><a href="#6-1-二分查找" class="headerlink" title="6.1 二分查找"></a>6.1 二分查找</h2><h3 id="实现思路-5"><a href="#实现思路-5" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li><p>首先通过左右两个索引确定数组的下标，即mid</p><ul><li>$ mid = low + F(k - 1) -1 $</li></ul></li><li><p>让target与中间值对比，如果target大于该值，则继续往前二分查找，否则，就往后继续二分查找</p></li><li><p>如果中间值==target说明目标找到，结束递归，或者左边的索引已经大于了右边的索引，说明没有找到，结束递归</p></li><li><p>特别注意：二分查找的前提是这一系列的数据都已经排序好，后续的几个查找，都需要<strong>排序好</strong></p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>&#125;;<br>        <span class="hljs-keyword">int</span> resIndex = binarySearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">17</span>);<br>        System.out.println(<span class="hljs-string">&quot;resIndex=&quot;</span> + resIndex);<br><br>        <span class="hljs-keyword">int</span> arr2[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>&#125;;<br>        List&lt;Integer&gt; resIndexList = binarySearch2(arr2, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">20</span>);<br>        System.out.println(<span class="hljs-string">&quot;resIndex=&quot;</span> + resIndexList);<br><br><br>    &#125;<br><br>    <br>    <span class="hljs-comment">//查找单一的值，找到就返回下标</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (low &gt; high || target &gt; arr[arr.length - <span class="hljs-number">1</span>] || target &lt; arr[<span class="hljs-number">0</span>]) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] &gt; target) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch(arr, low, mid - <span class="hljs-number">1</span>, target);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; target) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch(arr, mid + <span class="hljs-number">1</span>, high, target);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//找寻等于该值的所有下标</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">binarySearch2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (low &gt; high || target &gt; arr[arr.length - <span class="hljs-number">1</span>] || target &lt; arr[<span class="hljs-number">0</span>]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] &gt; target) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch2(arr, low, mid - <span class="hljs-number">1</span>, target);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; target) &#123;<br>            <span class="hljs-keyword">return</span> binarySearch2(arr, mid + <span class="hljs-number">1</span>, high, target);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//找到下标之后，向两边遍历</span><br>            ArrayList&lt;Integer&gt; resIndexlist = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">int</span> temp = mid - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || arr[temp] != target) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                resIndexlist.add(temp);<br>                temp -= <span class="hljs-number">1</span>;<br>            &#125;<br>            resIndexlist.add(mid);<br><br>            temp = mid +<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>                <span class="hljs-keyword">if</span> (temp &gt;= arr.length || arr[temp] != target) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                resIndexlist.add(temp);<br>                temp += <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> resIndexlist;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">resIndex=<span class="hljs-number">16</span><br>resIndex=[<span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>]<br></code></pre></td></tr></table></figure><h2 id="6-2-插值查找"><a href="#6-2-插值查找" class="headerlink" title="6.2 插值查找"></a>6.2 插值查找</h2><h3 id="实现思路-6"><a href="#实现思路-6" class="headerlink" title="实现思路"></a>实现思路</h3><p>简单的来说，就是把上述二分查找的mid索引，换成了一个新的公式算出来的新索引，其他的都一样</p><p>$ mid = low + \frac{target - arr[low]}{arr[high] - arr[low]} * (high - low) $</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertValueSearch</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">89</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1234</span>&#125;;<br>        <span class="hljs-keyword">int</span> resIndex = insertvalueSearch(arr,<span class="hljs-number">0</span>, arr.length-<span class="hljs-number">1</span>,<span class="hljs-number">1234</span>);<br>        System.out.println(resIndex);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertvalueSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (target &lt; arr[<span class="hljs-number">0</span>] || target &gt; arr[arr.length - <span class="hljs-number">1</span>] || low &gt; high) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> mid = low + (high - low) * (target - arr[low]) / (arr[high] - arr[low]);<span class="hljs-comment">//精髓在于这个公式</span><br>        <span class="hljs-keyword">if</span> (target &gt; arr[mid]) &#123;<br>            <span class="hljs-keyword">return</span> insertvalueSearch(arr, mid + <span class="hljs-number">1</span>, high, target);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; arr[mid]) &#123;<br>            <span class="hljs-keyword">return</span> insertvalueSearch(arr, low, mid - <span class="hljs-number">1</span>, target);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">该数据下标是<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="6-3-斐波那契查找"><a href="#6-3-斐波那契查找" class="headerlink" title="6.3 斐波那契查找"></a>6.3 斐波那契查找</h2><h3 id="实现思路-7"><a href="#实现思路-7" class="headerlink" title="实现思路"></a>实现思路</h3><p>斐波那契查找与前面两种查找类似，仅仅只是改变了中间索引mid的位置，这个索引现在位于黄金分割点附近，即</p><p>$ mid = low + F(k - 1) -1 $</p><p><img src="https://img.mercuryblog.site/img/image-20220715204056396.png" alt="斐波那契查找"></p><p>感觉花里胡哨，并没有提高多少查找效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FibonacciSearch</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> massize = <span class="hljs-number">20</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">89</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1234</span>&#125;;<br>        <span class="hljs-keyword">int</span> resIndex = fibonaccisearch(arr, <span class="hljs-number">1000</span>);<br>        System.out.println(resIndex);<br>    &#125;<br><br>    <span class="hljs-comment">//先构造一个斐波那契数列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] creatfibnacci() &#123;<br>        <span class="hljs-keyword">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[massize];<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; massize; i++) &#123;<br>            f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> f;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibonaccisearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> f[] = creatfibnacci();<br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> high = arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> mid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (high &gt; f[k] - <span class="hljs-number">1</span>) &#123;<br>            k++;<br>        &#125;<span class="hljs-comment">//找到大于数组最大小标的最小fibonacci数</span><br><br>        <span class="hljs-keyword">int</span>[] temp = Arrays.copyOf(arr, f[k]);<br>        <span class="hljs-comment">//创造一个长度为f[k]的包含arr数组的临时数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = high + <span class="hljs-number">1</span>; i &lt; f[k]; i++) &#123;<br>            temp[i] = arr[high];<br>        &#125;<span class="hljs-comment">//将数组后面空出的部分用最大值填满</span><br><br><br>        <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>            mid = low + f[k - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (temp[mid] &gt; target) &#123;<br>                high = mid - <span class="hljs-number">1</span>;<br>                k -= <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//前一段是f[k-1]，f[k-1]再分一次 ，就是 f[k-2]+f[k-3] 所以这里减1</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp[mid] &lt; target) &#123;<br>                low = mid + <span class="hljs-number">1</span>;<br>                k -= <span class="hljs-number">2</span>;<span class="hljs-comment">//后一段是f[k-2]，f[k-2]再分一次，就是 f[k-3]+f[k-4] 所以这里减2</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-comment">//因为数组是补充后的，可能查到后面重复的数字，所以这里返回两者中较小的数字</span><br>                <span class="hljs-keyword">if</span> (mid &lt; high) &#123;<br>                    <span class="hljs-keyword">return</span> mid;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> high;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//没有找到</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>data structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2022/06/16/JVM/"/>
    <url>/2022/06/16/JVM/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">        <div>经过一段时间的期末冲刺预习，现在终于有时间进行jvm的学习了😥</div>      <div>更新日志:</div>      <ul>          <div>2022.6.17 根据狂神的视频进行初步了解掌握</div>      </ul></div><h1 id="1-JVM的探究"><a href="#1-JVM的探究" class="headerlink" title="1. JVM的探究"></a>1. JVM的探究</h1><ol><li>请你谈谈对于JVM的理解？Java8虚拟机和之前的变化更新</li><li>什么是OOM，什么是栈溢出StackOverFlowError? 怎么分析</li><li>JVM的常用调优参数有哪些</li><li>内存快照如何抓取，怎么分析Dump文件</li><li>谈谈JVM中，你对于类加载器的认识</li></ol><div class = "note note-success">三种jvm</div><ul><li><p>SUN公司 hotpot</p></li><li><p>BEA JRockit</p></li><li><p>IBM J9VM</p></li></ul><h1 id="2-JVM-结构"><a href="#2-JVM-结构" class="headerlink" title="2. JVM 结构"></a>2. JVM 结构</h1><p><img src="https://img.mercuryblog.site/img/image-20220619152717928.png" alt="image-20220619152717928"></p><p><img src="https://img.mercuryblog.site/img/image-20220617184022048.png" alt="image-20220617184022048"></p><h2 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1. 类加载器"></a>1. 类加载器</h2><p>类加载器分为四类</p><ul><li><p>虚拟机自带的加载器</p></li><li><p>启动类（根）加载器</p></li><li><p>扩展类加载器</p></li><li><p>应用程序加载器</p></li></ul><h3 id="1-1-双亲委派机制"><a href="#1-1-双亲委派机制" class="headerlink" title="1.1 双亲委派机制"></a>1.1 双亲委派机制</h3><p>主要的作用就是保证安全，一般来说一个类启动的时候会按照这个顺序(APP– EXC –BOOT)寻找加载器,而最终执行的加载器则是从上到下的,BOOT-&gt; EXC-&gt;APP,只有没有找到上面一层的类加载器的时候，才会执行下一层的加载器。.从最内层JVM自带的类加载器开始加载，外层恶意同名类得不到加载从而无法调用</p><ol><li>类加载器收到类的加载的请求</li><li>将这个请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器</li><li>启动加载器检查是否能够加载当前这个类，能加载就结束，使用当前的加载器，否则，抛出异常，通知自家在其进行加载</li><li>重复步骤3</li></ol><h3 id="1-2-沙箱安全机制"><a href="#1-2-沙箱安全机制" class="headerlink" title="1.2 沙箱安全机制"></a>1.2 沙箱安全机制</h3><p>沙箱机制就是讲Java代码限定在虚拟机JVM特定的运行范围中，并且严格限制代码对本地资源的访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。通俗来说就是虚拟机把代码加载到拥有不同权限的域里，然后代码就拥有了该域的所有权限。这样就能控制不同代码拥有不同调用操作系统和本地资源的权限</p><p>组成沙箱的基本组件：<br>1.字节码校验器（bytecode verifier）：确保Java类文件遵循Java语言规范。可以帮助Java程序实现内存保护 。核心类不经过字节码校验<br>2.类装载器：其中类装载器在3个方面对Java沙箱起作用</p><p>防止恶意代码干涉善意代码（双亲委派机制）<br>守护被信任的类库边界<br>它将代码归入保护域，确定了代码可以进行哪些操作</p><h2 id="2-程序计数器"><a href="#2-程序计数器" class="headerlink" title="2. 程序计数器"></a>2. 程序计数器</h2><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在Java虚拟机的概念模型里 ，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><h2 id="3-Native和方法区"><a href="#3-Native和方法区" class="headerlink" title="3. Native和方法区"></a>3. Native和方法区</h2><h3 id="3-1-Native"><a href="#3-1-Native" class="headerlink" title="3.1 Native"></a>3.1 Native</h3><p>有时候我们会在Java的源码里面看见如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">start0</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>凡是带了native关键字的方法，说明Java的作用范围达不到了  需要去调用底层C语言的库，会进入本地方法栈，然后调用本地方法接口 JNI</p><p>本地方法接口就是为了去调本地方法库 扩展Java的使用 融合不同的编程语言为Java所用</p><h3 id="3-2-方法区"><a href="#3-2-方法区" class="headerlink" title="3.2 方法区"></a>3.2 方法区</h3><p>方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单的来说，所有定义的方法的信息都保存在该区域，此区域书于共享区间；方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。虽然《Java虚拟机规范》中把方法区描述为堆的一个<strong>逻辑部分</strong>，但是它却有一个别名叫作“非堆”（Non-Heap），目的是与Java堆区分开来。</p><p>常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。静态变量、常量、类信息(构造方法，接口定义)，运行时的常量池存在方法区中，但是实例变量存在<strong>堆内存</strong>中，和方法区无关</p><h2 id="4-栈"><a href="#4-栈" class="headerlink" title="4. 栈"></a>4. 栈</h2><p>“栈”通常就是指上面讲的虚拟机栈，或者更多的情况下只是指虚拟机栈中局部变量表部分。栈内存，主管程序的运行、生命周期和线程同步。线程结束，栈内存也释放。对于栈来说，不存在垃圾回收问题， 一旦线程结束栈就结束</p><p>栈的运行原理  : 栈帧(栈帧也叫过程活动记录，是编译器用来实现过程函数调用的一种数据结构”。实际上，可以简单理解为：栈帧就是存储在用户栈上的（当然内核栈同样适用）每一次函数调用涉及的相关信息的记录单元。</p><h2 id="5-堆"><a href="#5-堆" class="headerlink" title="5. 堆"></a>5. 堆</h2><p>heap一个jvm只有一个堆内存 堆内存的大小是可以调节的</p><p>堆内存中还要细分三个区域</p><ul><li><p>新生区(伊甸园区 eden space  幸存0区 幸存1区)</p></li><li><p>养老区</p></li><li><p>永久区(1.8后称为元空间)</p></li></ul><p><img src="https://img.mercuryblog.site/img/image-20220617191448788.png" alt="堆内存"></p><ol><li>新生区  </li></ol><p>类诞生和成长的地方 甚至死亡，伊甸园区：所有的对象都是在伊甸园区new出来的</p><ol start="2"><li>永久区(元空间)</li></ol><p>这个区域常驻内存 用来存放自身携带的class对象 interface元数据 存储的是Java运行的一些环境或类信息 这个区域不存在垃圾回收 关闭vm虚拟机就会释放这个区域的内存</p><p>元空间逻辑上存在 物理上不存在</p><h3 id="5-1-堆内存错误"><a href="#5-1-堆内存错误" class="headerlink" title="5.1 堆内存错误"></a>5.1 堆内存错误</h3><p>假设内存满了 OOM  堆内存错误</p><p>java.lang.OutOfMemoryError:Java heap space</p><p>当出现这种错误的时候我们该怎么办呢？</p><p>答案就是JProfiler,可以通过JProfiler进行调优</p><ol><li>下载该插件</li></ol><p><img src="https://img.mercuryblog.site/img/image-20220617192619772.png" alt="image-20220617192619772"></p><ol start="2"><li>下载应用，然后在idea中配置</li></ol><p><img src="https://img.mercuryblog.site/img/image-20220617192638260.png" alt="image-20220617192638260"></p><ol start="3"><li>通过命令生成dump文件，然后进行分析</li></ol><p><img src="https://img.mercuryblog.site/img/image-20220617192656192.png" alt="image-20220617192656192"></p><p>常用的一些命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//- Xms 设置初始化内存分配大小 1/64</span><br><span class="hljs-comment">//- Xmx 谈置最大分配’内存，默认1/4</span><br><span class="hljs-comment">//- XX :+ PrintGCDetails // 打印GC垃圾回收信息</span><br><span class="hljs-comment">//- XX :+HeapDumpOn0utOfMemoryError// oom DUMP</span><br><br><span class="hljs-comment">//-Xms1m-Xmx8m- XX :+ HeapDumpOnOutOfMemoryError </span><br></code></pre></td></tr></table></figure><h1 id="3-Hotpot虚拟机对象探秘"><a href="#3-Hotpot虚拟机对象探秘" class="headerlink" title="3. Hotpot虚拟机对象探秘"></a>3. Hotpot虚拟机对象探秘</h1><h2 id="3-1-对象的创建"><a href="#3-1-对象的创建" class="headerlink" title="3.1 对象的创建"></a>3.1 对象的创建</h2><p>当Java遇到一个新的new指令的时候，它首先会去检查指令的参数能否在常量池中定位到 一个类的符号引用，并且检查这个符号所引用的类是否已经被加载，解析和初始化过，如果没有，则会先进行加载，接下来就会为这个新的对象分配内存，如果Java堆中的内存是规整的，那么分配内存的方法就是把指针向空闲空间的方向挪动一段距离，这种分配方式被称为：“指针碰撞”。如果内存不是规整的，那么就需要建立一个“空闲列表”，用来记录那些内存块分给了哪些对象。</p><p>​    在分配内存的过程中，又会遇到一个问题，就是如果正在给对象A分配内存，但是对象B又同时使用了原来的指针来分配内存的情况。这种时候有两种可选择的方案–一种是堆分配内存的操作进行同步处理，第二种就是建立本地线程分配缓冲</p><p>​    接下来，Java虚拟机还需要对对象进行一些必要的设置，比如这个对象是哪个类的实例，如何找回类的元数据信息，对象的哈希码，对象的GC年龄分代信息。最后执行构造函数等方法，一个完整的对象才被创建出来。</p><div class = "note note-success">一个对象在内存中实例化的过程</div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span></span>&#123;<br>    String name; <span class="hljs-comment">// 定义一个成员变量 name</span><br>    <span class="hljs-keyword">int</span> age; <span class="hljs-comment">// 成员变量 age</span><br>    Double height; <span class="hljs-comment">// 成员变量 height</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人的姓名：&quot;</span>+name);<br>        System.out.println(<span class="hljs-string">&quot;人的年龄：&quot;</span>+age);<br>        System.out.println(<span class="hljs-string">&quot;人的身高：&quot;</span>+height);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String name; <span class="hljs-comment">// 定义一个局部变量 name</span><br>        <span class="hljs-keyword">int</span> age; <span class="hljs-comment">// 局部变量 age</span><br>        Double height; <span class="hljs-comment">// 局部变量 height</span><br>    <br>        People people = <span class="hljs-keyword">new</span> People() ; <span class="hljs-comment">//实例化对象people</span><br>        people.name = <span class="hljs-string">&quot;张三&quot;</span> ;       <span class="hljs-comment">//赋值</span><br>        people.age = <span class="hljs-number">18</span>;             <span class="hljs-comment">//赋值</span><br>        people.height = <span class="hljs-number">180.0</span> ;   <span class="hljs-comment">//赋值</span><br>        people.print();              <span class="hljs-comment">//调用方法sing</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>在还没开始时</li></ol><p><img src="https://img.mercuryblog.site/img/image-20220619102309453.png" alt="image-20220619102309453"></p><ol start="2"><li>开始执行，类中的成员变量和方法会先进入到方法区</li></ol><p><img src="https://img.mercuryblog.site/img/image-20220619102608309.png" alt="image-20220619102608309"></p><ol start="3"><li>main方法被压入栈中</li></ol><p>​                                                <img src="https://img.mercuryblog.site/img/image-20220619102825310.png" alt="image-20220619102825310"></p><ol start="4"><li><p>执行到Person person = new Person()；会在栈中创建Person类的引用，在堆中存放实例化的对象，然后将成员变量和成员方法放在实例中（都是取得成员变量和成员方法的地址值）</p><p><img src="https://img.mercuryblog.site/img/image-20220619103527954.png" alt="image-20220619103527954"></p><ol start="5"><li>接下来对 person 对象进行赋值， person.name = “张三” ; person.age = 13; person.height= 180.0;先在栈区找到 person，然后根据地址值找到 new Person() 进行赋值操作。</li></ol><p>​                                              <img src="https://img.mercuryblog.site/img/image-20220619104355652.png" alt="image-20220619104355652"></p><ol start="6"><li><p>在方法体void ()被调用完成后，就会立刻马上从栈内弹出（出栈)最后，在main()函数完成后，main()函数也会出栈 如图：</p><p><img src="https://img.mercuryblog.site/img/image-20220619104854834.png" alt="image-20220619104854834"></p></li></ol></li></ol><h2 id="3-2-对象的内存布局"><a href="#3-2-对象的内存布局" class="headerlink" title="3.2 对象的内存布局"></a>3.2 对象的内存布局</h2><p>Hotpot虚拟机对象的头部包含两类信息，第一类是存储对象本身运行时的数据，比如哈希码，GC年龄分代，锁状态标志，偏向线程ID，偏向时间戳等，这部分数据被官方称为”Mark word”.如下图所示<img src="https://img.mercuryblog.site/img/image-20220622112951852.png" alt="image-20220622112951852"></p><p>还有一类就是类型指针，Java虚拟机通过这个指针来判断该对象是哪个类的实例，如果对象是数组，还会有一个数据来记录数组的长度。</p><h2 id="3-3-对象的访问定位"><a href="#3-3-对象的访问定位" class="headerlink" title="3.3 对象的访问定位"></a>3.3 对象的访问定位</h2><p>简单的来说，访问主要有句柄访问和指针访问，直接使用指针访问的话，可以节省一次指针定位的时间，累积下来，也是比较可观的，在hotpot中，主要使用指针访问，而在各种语言和框架中，使用句柄访问也很常见</p><p><img src="https://img.mercuryblog.site/img/image-20220622113532052.png" alt="句柄访问"></p><p><img src="https://img.mercuryblog.site/img/image-20220622113607252.png" alt="直接指针访问"></p><h1 id="4-垃圾回收"><a href="#4-垃圾回收" class="headerlink" title="4. 垃圾回收"></a>4. 垃圾回收</h1><h2 id="4-1-什么是垃圾回收"><a href="#4-1-什么是垃圾回收" class="headerlink" title="4.1 什么是垃圾回收"></a>4.1 什么是垃圾回收</h2><p>GC(Garbage Collection )垃圾回收,分为轻量级垃圾回收和重量级垃圾回收 主要是在伊甸园区和年老区</p><p>jvm 在进行GC时，并不是对这三个区域统一回收 回收的都是年轻代</p><p>将对象分为三种状态：年轻代、年老代、持久代。JVM将堆内存划分为 Eden、Survivor 和 Tenured/Old 空间。</p><p>年轻代：所有新生成的对象首先都是放在Eden区。</p><p>年老代：在年轻代中经历了N(默认15)次垃圾回收后仍然存活的对象，就会被放到年老代中。</p><p>持久代：用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响。</p><p>Minor GC:</p><p>用于清理年轻代区域。Eden区满了就会触发一次Minor GC。清理无用对象，将有用对象复制到 Survivor1、Survivor2 区中(这两个区，大小空间也相同，同一时刻Survivor1和Survivor2 只有一个在用，一个为空)</p><p>Major GC:</p><p>用于清理老年代区域。</p><p>Full GC：</p><p>用于清理年轻代、年老代区域。 成本较高，会对系统性能产生影响。</p><p>垃圾回收过程(不是所有的收集器)</p><ul><li>新创建的对象，绝大多数都会存储在Eden中</li><li>当Eden满了，不能创建新对象，则触发Minor GC，将无用对象清理掉，将剩余对象复制到某个Survivor(S1)中，同时清空Eden区</li><li>当Eden再次满了，会将S1中不能清空的对象存到另一个Survivor(S2)，同时将Eden中不能清空的复制到S1，保证Eden、S1均被清空</li><li>重复15次Survivor中未被清理的对象，则复制到老年代区</li><li>当年老代区满了，则会触发一个一次完整的垃圾回收（Full GC）</li></ul><div class = "note note-success">对象已死？</div><ol><li>引用计数法</li></ol><p>​    在对象中添加一个引用计数器，在一个地方引用它的时候，计数器就加一，当引用失效的时候，计数器就减一，任何时候当计数器为零的时候，这个对象就是不可能再使用的，就坐等被回收吧</p><ol start="2"><li><p>可达性分析</p><p>这个算法的基本思路就是通过一系列称为“GC Roots” 的根对象作为起始节点，向下搜索，所搜走过的路径称为“引用链”，如果某个对象与Roots之间没有任何的链相连接，那么就称这个对象不可达，即对象已死。</p></li></ol><h2 id="4-2-GC-的算法"><a href="#4-2-GC-的算法" class="headerlink" title="4.2 GC 的算法"></a>4.2 GC 的算法</h2><h3 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h3><p>这个理论建立在弱分代学说和强分代学说的基础之上，认为收集器应该将内存区域分为几个区域，然后依据其年龄分开进行存储，分别进行回收</p><h3 id="标记清除法-Mark-Sweep"><a href="#标记清除法-Mark-Sweep" class="headerlink" title="标记清除法(Mark-Sweep)"></a>标记清除法(Mark-Sweep)</h3><p>这是最基础的垃圾回收算法，之所以说它是最基础的是因为它最容易实现，思想也是最简单的。标记-清除算法分为两个阶段：标记阶段和清除阶段。标记阶段的任务是标记出所有需要被回收的对象，清除阶段就是回收被标记的对象所占用的空间</p><p>优点： 不需要额外的空间</p><p>缺点：两次扫描 严重浪费时间 会产生大量的内存碎片</p><p><img src="https://img.mercuryblog.site/img/image-20220704101326795.png" alt="image-20220704101326795"></p><h3 id="标记-复制算法-Mark-Copying"><a href="#标记-复制算法-Mark-Copying" class="headerlink" title="标记-复制算法(Mark-Copying)"></a>标记-复制算法(Mark-Copying)</h3><p>为了解决Mark-Sweep算法的缺陷，Copying算法就被提了出来。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用的内存空间一次清理掉，这样一来就不容易出现内存碎片的问题，复制算法最佳的使用场景 对象存活度较低的时候 ，现在的商用Java虚拟机大多都优先采用了这个算法去收集新生代。</p><p>优缺点：没有内存碎片，浪费了一半的内存空间</p><p><img src="https://img.mercuryblog.site/img/image-20220704101610542.png" alt="image-20220704101610542"></p><h3 id="标记-整理算法（Mark-Compact）"><a href="#标记-整理算法（Mark-Compact）" class="headerlink" title="标记-整理算法（Mark-Compact）"></a>标记-整理算法（Mark-Compact）</h3><p>也称标记-压缩法为了解决Copying算法的缺陷，充分利用内存空间，提出了Mark-Compact算法。该算法标记阶段和Mark-Sweep一样，但是在完成标记之后，它不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存. 压缩防止内存碎片产生 再次扫描 向一段一段存活的对象多了一次移动成本</p><p><img src="https://img.mercuryblog.site/img/image-20220704101709355.png" alt="image-20220704101709355"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>内存效率 :复制算法  &gt;  标记清除算法  &gt;  标记压缩算法</p><p>内存整齐度  复制算法  =  标记压缩算法  &gt;  标记清除算法</p><p>内存利用率  标记压缩算法  =  标记清除算法  &gt;  复制算法</p><div class = "note note-danger">没有最好的算法</div><p>年轻代存活率低所以用复制算法</p><p>老年代存活率高用标记清除算法+标记压缩混合实现</p><h2 id="4-3-垃圾回收的作用"><a href="#4-3-垃圾回收的作用" class="headerlink" title="4.3 垃圾回收的作用"></a>4.3 垃圾回收的作用</h2><p>垃圾回收是在内存中中存在没有引用的对象或超过作用域的对象时进行垃圾回收，垃圾回收的目的是识别并且丢弃不再使用的对象来释放和重用资源。查找和回收（清理）无用的对象。以便让JVM更有效的使用内存。</p><h2 id="4-3-经典的垃圾收集器"><a href="#4-3-经典的垃圾收集器" class="headerlink" title="4.3 经典的垃圾收集器"></a>4.3 经典的垃圾收集器</h2><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><p>采用标记-复制算法。这个收集器是最基础，历史最悠久的收集器，看名字就知道，这是一个单线程的收集器，因为是单线程，他在进行垃圾收集的时候必须暂停其他所有的工作，直到它收集完毕，这个过程被称为”stop the world”(砸瓦鲁多！🤔),但是它现在仍然是hotpot虚拟机在客户端模式下的默认新生代收集器。</p><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>采用标记-复制算法。这个收集器是Serial收集器的多线程并行版本，它是不少运行在服务端的虚拟机首选新生代收集器(JDK7之前)，很大的原因就是只有他才能跟CMS配合工作(老年代收集器)，从JDK9开始，ParNew+CMS收集器就不再是官方最推荐的服务器端收集器组合了，因为G1出现了。</p><h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><p>同样是基于标记-复制算法实现的新生代多线程并发收集器，这个收集器主要关注的是达到一个可控制的吞吐量</p><p><img src="https://img.mercuryblog.site/img/image-20220704103520606.png" alt="image-20220704103520606"></p><p>它也提供了一些参数用来控制吞吐量，这里不再详述，因为和吞吐量密切相关，因此也被称为“吞吐量优先收集器”</p><h3 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h3><p>Serial收集器的老年代版本，一个采用标记-整理算法的单线程收集器。主要也是提供给客户端模式下的hotpot虚拟机使用。它也可能有两种用途：一种是在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用，另外一种就是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用</p><h3 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h3><p>Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。用来和Parallel Scavenge收集器搭配，一起专注于吞吐量的组合。适合注重吞吐量和处理器资源稀缺的场景</p><h3 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h3><p>全称Concurrent Mark Sweep收集器，基于标记-清除算法的老年代收集器，是以获取最短回收停顿时间为目标的收集器，但它不是简单的标记-清除。主要分为了  <strong>初识标记</strong>， <strong>并发标记</strong>，<strong>重新标记</strong> ，<strong>并发清除</strong> 四个步骤 ，这个收集器主要特点就是并发收集，低停顿。由于标记-清除算法很容易产生内存碎片，所以CMS收集器予以解决(JDK9后被废除)</p><h3 id="Garbage-First-收集器"><a href="#Garbage-First-收集器" class="headerlink" title="Garbage First 收集器"></a>Garbage First 收集器</h3><p>G1是一款主要面向服务端应用的垃圾收集器。JDK 9发布之日，G1宣告取代Parallel Scavenge加Parallel Old组合，成为服务端模式下的默认垃圾收集器。它可以面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的Mixed GC模式。每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果。</p><h2 id="4-4-低延迟垃圾收集器"><a href="#4-4-低延迟垃圾收集器" class="headerlink" title="4.4 低延迟垃圾收集器"></a>4.4 低延迟垃圾收集器</h2><p>略</p><h1 id="8-JMM"><a href="#8-JMM" class="headerlink" title="8. JMM"></a>8. JMM</h1><p>Java Mermory Model</p><p>(待完善)</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-Plus</title>
    <link href="/2022/05/20/Mybatis-Plus/"/>
    <url>/2022/05/20/Mybatis-Plus/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">     <div>前言：</div>     <ul>         <div>             根据狂神视频整理         </div>         <div>             为什么要学它，因为mybatisplus可以节省我们大量的工作时间，所有的CRUD代码他都可以自动完成，所以才说是懒人后端的福音😁         </div>         <div>             这个是中国人开发的，所以官方写得比较好理解，官方配置文档地址<a href = "https://www.mybatis-plus.com/" target = "_blank">点点我</a>         </div>     <ul></div><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>MyBatis-Plus （简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h1><ol><li>对应的数据库脚本</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br>(<br>id <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>age <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (id, name, age, email) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jone&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;test1@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;test2@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;test3@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Sandy&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;test4@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;Billie&#x27;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;test5@baomidou.com&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>在pom里导入mp（这里是比较早的版本，推荐使用较新的版本</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><div class = "note note-warning">不要同时导入mybatis 和mp,可能会引起版本冲突</div><ol start="3"><li>数据库配置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/dbtest?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><div class = "note note-warning">这里的时区设置的是东八区</div><ol start="4"><li>写实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: mybatis-plus-demo1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: Mr.Like</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span>: 2022-05-19 16:53</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>编写mapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt;</span>&#123;<br>&#125;<br><br><span class="hljs-comment">// 是的，你没有看错，就这么点</span><br></code></pre></td></tr></table></figure><ol start="6"><li>在springboot的启动类中添加扫描注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.mercury.mybatisplusdemo1.mapper&quot;)</span> <span class="hljs-comment">//mapper层的地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusDemo1ApplicationTests</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-keyword">null</span>);<br>        users.forEach(System.out::println);<br>        <span class="hljs-comment">//comsumer?</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>输出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">User(id=<span class="hljs-number">1</span>, name=Jone, age=<span class="hljs-number">18</span>, email=test1<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">2</span>, name=Jack, age=<span class="hljs-number">20</span>, email=test2<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">3</span>, name=Tom, age=<span class="hljs-number">28</span>, email=test3<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">4</span>, name=Sandy, age=<span class="hljs-number">21</span>, email=test4<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">5</span>, name=Billie, age=<span class="hljs-number">24</span>, email=test5<span class="hljs-meta">@baomidou</span>.com)<br></code></pre></td></tr></table></figure><p>这里配置一下日志信息方便查看</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#配置日志<br>mybatis-plus<span class="hljs-selector-class">.configuration</span>.log-impl=org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ibatis</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.stdout</span>.StdOutImpl<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Creating a <span class="hljs-keyword">new</span> SqlSession<br>SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4b65d9f4] was not registered <span class="hljs-keyword">for</span> synchronization because synchronization is not active<br>JDBC Connection [HikariProxyConnection@<span class="hljs-number">1702089463</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@4052c8c2] will not be managed by Spring<br>==&gt; Preparing: SELECT id,name,age,email FROM user   <span class="hljs-comment">//可以看到自动生成的sql</span><br>==&gt; Parameters: <br>&lt;== Columns: id, name, age, email<br>&lt;==  Row: <span class="hljs-number">1</span>, Jone, <span class="hljs-number">18</span>, test1<span class="hljs-meta">@baomidou</span>.com<br>&lt;==  Row: <span class="hljs-number">2</span>, Jack, <span class="hljs-number">20</span>, test2<span class="hljs-meta">@baomidou</span>.com<br>&lt;==  Row: <span class="hljs-number">3</span>, Tom, <span class="hljs-number">28</span>, test3<span class="hljs-meta">@baomidou</span>.com<br>&lt;==  Row: <span class="hljs-number">4</span>, Sandy, <span class="hljs-number">21</span>, test4<span class="hljs-meta">@baomidou</span>.com<br>&lt;==  Row: <span class="hljs-number">5</span>, Billie, <span class="hljs-number">24</span>, test5<span class="hljs-meta">@baomidou</span>.com<br>&lt;==  Total: <span class="hljs-number">5</span>    <br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4b65d9f4]<br>User(id=<span class="hljs-number">1</span>, name=Jone, age=<span class="hljs-number">18</span>, email=test1<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">2</span>, name=Jack, age=<span class="hljs-number">20</span>, email=test2<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">3</span>, name=Tom, age=<span class="hljs-number">28</span>, email=test3<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">4</span>, name=Sandy, age=<span class="hljs-number">21</span>, email=test4<span class="hljs-meta">@baomidou</span>.com)<br>User(id=<span class="hljs-number">5</span>, name=Billie, age=<span class="hljs-number">24</span>, email=test5<span class="hljs-meta">@baomidou</span>.com)<br><span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">19</span> <span class="hljs-number">17</span>:<span class="hljs-number">19</span>:<span class="hljs-number">55.314</span> INFO <span class="hljs-number">23644</span> --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource  : HikariPool-<span class="hljs-number">1</span> - Shutdown initiated...<br><span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">19</span> <span class="hljs-number">17</span>:<span class="hljs-number">19</span>:<span class="hljs-number">55.324</span> INFO <span class="hljs-number">23644</span> --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource  : HikariPool-<span class="hljs-number">1</span> - Shutdown completed.<br></code></pre></td></tr></table></figure><h1 id="3-主键生成策略"><a href="#3-主键生成策略" class="headerlink" title="3. 主键生成策略"></a>3. 主键生成策略</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试插入</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setName(<span class="hljs-string">&quot;mercury02&quot;</span>);<br>    user.setAge(<span class="hljs-number">3</span>);<br>    user.setEmail(<span class="hljs-string">&quot;william@163.com&quot;</span>);<br>    <span class="hljs-keyword">int</span> insert = userMapper.insert(user);<span class="hljs-comment">//自动生成id</span><br>    System.out.println(insert);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>插入结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">==&gt; Preparing: <span class="hljs-function">INSERT INTO <span class="hljs-title">user</span> <span class="hljs-params">( id, name, age, email )</span> <span class="hljs-title">VALUES</span> <span class="hljs-params">( ?, ?, ?, ? )</span> </span><br><span class="hljs-function"></span>==&gt; Parameters: <span class="hljs-number">1527226339787800577</span>(Long), mercury(String), <span class="hljs-number">3</span>(Integer), chenning_william@<span class="hljs-number">163.</span>com(String)<br>&lt;== Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这里<strong>默认</strong>使用的是分布式系统唯一id生成 <span class = "label label-danger"> 雪花算法(SnowFlake)</span></p><p>雪花算法的由来：</p><ul><li>Twitter使用scala语言开源了一种分布式 id 生成算法——SnowFlake算法，被翻译成了雪花算法。</li><li>因为自然界中并不存在两片完全一样的雪花的，每一片雪花都拥有自己漂亮独特的形状、独一无二。雪花算法也表示生成的ID如雪花般独一无二。</li></ul><h3 id="3-1-主键自增"><a href="#3-1-主键自增" class="headerlink" title="3.1 主键自增"></a>3.1 主键自增</h3><p>配置主键自增</p><p>实体类的字段上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><p><span class = "label label-danger">同时数据库里面也要设置为主键自增</span></p><p>can can 源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">IdType</span> </span>&#123;<br>    AUTO(<span class="hljs-number">0</span>),       <span class="hljs-comment">//数据库id自增</span><br>    NONE(<span class="hljs-number">1</span>),       <span class="hljs-comment">//未设置主键</span><br>    INPUT(<span class="hljs-number">2</span>),      <span class="hljs-comment">//手动输入</span><br>    ID_WORKER(<span class="hljs-number">3</span>),  <span class="hljs-comment">//默认的全局唯一id（雪花</span><br>    UUID(<span class="hljs-number">4</span>),       <span class="hljs-comment">//全局唯一id</span><br>    ID_WORKER_STR(<span class="hljs-number">5</span>);<span class="hljs-comment">//ID_WORKER 的字符串表示法</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> key;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IdType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-更新操作"><a href="#4-更新操作" class="headerlink" title="4. 更新操作"></a>4. 更新操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setId(<span class="hljs-number">5l</span>);<br>    user.setName(<span class="hljs-string">&quot;william&quot;</span>);<br>    userMapper.updateById(user);  <span class="hljs-comment">//注意里面的参数是一个对象</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">==&gt; Preparing: UPDATE user SET name=? WHERE id=? <br>==&gt; Parameters: william(String), <span class="hljs-number">5</span>(Long)<br>&lt;== Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="5-自动填充"><a href="#5-自动填充" class="headerlink" title="5. 自动填充"></a>5. 自动填充</h1><p>创建时间，修改时间，这些操作都是自动化完成的</p><p>在国际标准中所有的数据库表gmt_create  gmt_modified几乎所有的表都要配置上，而且需要自动化</p><h2 id="5-1-数据库级别的修改"><a href="#5-1-数据库级别的修改" class="headerlink" title="5.1 数据库级别的修改"></a>5.1 数据库级别的修改</h2><p>增加create_time update_time字段</p><p><img src="https://img.mercuryblog.site/img/image-20220521133004843.png"></p><p>可以看到默认的时间</p><p><img src="https://img.mercuryblog.site/img/image-20220521133024647.png"></p><h2 id="5-2-代码级别的修改"><a href="#5-2-代码级别的修改" class="headerlink" title="5.2 代码级别的修改"></a>5.2 代码级别的修改</h2><p>首先还原数据库的设置，将默认CURRENT_TIMESTAMP和更新取消掉</p><ol><li>实体类字段属性上添加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date createTime;<br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date updateTime;<br></code></pre></td></tr></table></figure><ol start="2"><li>编写handler</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;start insert fill ...&quot;</span>);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>,<span class="hljs-keyword">new</span> Date() ,metaObject);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);   <span class="hljs-comment">//第一次填充的时候两个时间都填充上</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;start update fill ...&quot;</span>);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);   <span class="hljs-comment">//后面更新的时候就只需要填充update这个时间就行</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-乐观锁配置"><a href="#6-乐观锁配置" class="headerlink" title="6. 乐观锁配置"></a>6. 乐观锁配置</h1><p>乐观锁：总认为不会出现问题，无论干什么都不会去上锁，如果出现了问题，再次更新值测试</p><p>悲观锁：它总认为总是出现问题，无论干什么都会去上锁，然后去操作</p><p>什么时候需要乐观锁呢？当要更新一条记录的时候，希望这条记录没有被别人更新</p><p>乐观锁实现方式：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion（整数类型下 newVersion = oldVersion + 1）</li><li>如果version不对，就更新失败</li></ul><ol><li>数据库里增加version字段 (默认初版为1)</li></ol><p><img src="https://img.mercuryblog.site/img/image-20220522130711039.png" alt="image-20220522130711039"></p><ol start="2"><li>实体类中增加</li></ol><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">@Version</span><span class="hljs-comment">//乐观锁的注解</span><br><span class="hljs-keyword">private</span> Integer <span class="hljs-keyword">version</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>注册组件</li></ol><p>写个config来统一配置，新版的注册组件有所不同，详情看官方的配置文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.mercury.mybatisplusdemo1.mapper&quot;)</span> <span class="hljs-comment">//可以把扫描mapper层的组件搬到这里</span><br><span class="hljs-meta">@EnableTransactionManagement</span>   <span class="hljs-comment">//处理事务的注解</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//乐观锁插件</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOptimisticLocker</span><span class="hljs-params">()</span></span>&#123;<br><br>    User user1 = userMapper.selectById(<span class="hljs-number">1l</span>);<br>    user1.setName(<span class="hljs-string">&quot;mercury&quot;</span>);<br>    user1.setEmail(<span class="hljs-string">&quot;mercury@163.com&quot;</span>);<br><br>    <span class="hljs-comment">//模拟还没完成修改的时候，突然来了个线程插队，提前完成了修改</span><br>    User user2 = userMapper.selectById(<span class="hljs-number">1l</span>);<br>    user2.setName(<span class="hljs-string">&quot;william&quot;</span>);<br>    user2.setEmail(<span class="hljs-string">&quot;william@163.com&quot;</span>);<br>    userMapper.updateById(user2);<br><br><br>    userMapper.updateById(user1);<span class="hljs-comment">//version不对导致写入失败，如果没有乐观锁就会导致覆盖</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-查询操作"><a href="#7-查询操作" class="headerlink" title="7. 查询操作"></a>7. 查询操作</h1><h2 id="7-1-单个和多个查询"><a href="#7-1-单个和多个查询" class="headerlink" title="7.1 单个和多个查询"></a>7.1 单个和多个查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectById</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//查询单个</span><br>       User user = userMapper.selectById(<span class="hljs-number">1l</span>);<br>       System.out.println(user);<br><br>       <span class="hljs-comment">//查询多个</span><br>       List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>       users.forEach(System.out::println);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="7-2-条件查询"><a href="#7-2-条件查询" class="headerlink" title="7.2 条件查询"></a>7.2 条件查询</h2><p>使用map实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectBycondition</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//根据条件进行查询</span><br><br>       HashMap&lt;String, Object&gt; Map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>       <span class="hljs-comment">//自定义条件查询</span><br>       Map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;william&quot;</span>);<br>       Map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br>       <span class="hljs-comment">//查询名字为william并且年龄为18的数据</span><br>       List&lt;User&gt; users = userMapper.selectByMap(Map);<br>       users.forEach(System.out::println);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">==&gt;  Preparing: SELECT id,name,age,email,version,deleted,create_time,update_time FROM user WHERE name = ? AND age = ?<br>==&gt; Parameters: william(String), <span class="hljs-number">18</span>(Integer)<br>&lt;==    Columns: id, name, age, email, version, deleted, create_time, update_time<br>&lt;==        Row: <span class="hljs-number">5</span>, william, <span class="hljs-number">18</span>, test5<span class="hljs-meta">@baomidou</span>.com, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">21</span> <span class="hljs-number">13</span>:<span class="hljs-number">15</span>:<span class="hljs-number">42</span>, <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">22</span> <span class="hljs-number">13</span>:<span class="hljs-number">00</span>:<span class="hljs-number">53</span><br>&lt;==      Total: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="7-3-分页查询"><a href="#7-3-分页查询" class="headerlink" title="7.3 分页查询"></a>7.3 分页查询</h2><p>分页查询的几种实现方式</p><ul><li><p>原始的limit进行分页</p></li><li><p>pageHelper第三方插件</p></li><li><p>MP分页</p></li></ul><ol><li>配置分页查询的组件(配置在config里)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页插件</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    PaginationInterceptor paginationInterceptor = <span class="hljs-keyword">new</span> PaginationInterceptor();<br>    <span class="hljs-comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span><br>    <span class="hljs-comment">// paginationInterceptor.setOverflow(false);</span><br>    <span class="hljs-comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span><br>    <span class="hljs-comment">// paginationInterceptor.setLimit(500);</span><br>    <span class="hljs-comment">// 开启 count 的 join 优化,只针对部分 left join</span><br>   <span class="hljs-comment">// paginationInterceptor.setCountSqlParser(new JsqlParserCountOptimize(true));</span><br>    <span class="hljs-keyword">return</span> paginationInterceptor;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>然后直接使用page对象即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testpage</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-comment">//当前页，显示的数据数量</span><br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);   <span class="hljs-comment">//第二页的数据，每页5个</span><br>    userMapper.selectPage(page,<span class="hljs-keyword">null</span>);<br><br>    page.getRecords().forEach(System.out::println);<br>    System.out.println(page.getTotal());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">==&gt;  Preparing: <span class="hljs-function">SELECT <span class="hljs-title">COUNT</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span> FROM user </span><br><span class="hljs-function"></span>==&gt; Parameters: <br>&lt;==    Columns: COUNT(<span class="hljs-number">1</span>)<br>&lt;==        Row: <span class="hljs-number">7</span>        <span class="hljs-comment">//一共7条数据</span><br>==&gt;  Preparing: SELECT id,name,age,email,version,create_time,update_time FROM user WHERE  LIMIT <span class="hljs-number">5</span>,<span class="hljs-number">5</span> <br>==&gt; Parameters: <br>&lt;==    Columns: id, name, age, email, version, create_time, update_time<br>&lt;==        Row: <span class="hljs-number">1527903812435374084</span>, mercury03, <span class="hljs-number">3</span>, william@<span class="hljs-number">163.</span>com, <span class="hljs-number">1</span>, <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">22</span> <span class="hljs-number">13</span>:<span class="hljs-number">27</span>:<span class="hljs-number">46</span>, <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">22</span> <span class="hljs-number">13</span>:<span class="hljs-number">27</span>:<span class="hljs-number">46</span><br>&lt;==        Row: <span class="hljs-number">1527903812435374085</span>, mercury04, <span class="hljs-number">3</span>, mercury@<span class="hljs-number">163.</span>com, <span class="hljs-number">1</span>, <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">22</span> <span class="hljs-number">13</span>:<span class="hljs-number">28</span>:<span class="hljs-number">11</span>, <span class="hljs-number">2022</span>-<span class="hljs-number">05</span>-<span class="hljs-number">22</span> <span class="hljs-number">13</span>:<span class="hljs-number">28</span>:<span class="hljs-number">11</span><br>&lt;==      Total: <span class="hljs-number">2</span>        <span class="hljs-comment">//第二页两条数据</span><br></code></pre></td></tr></table></figure><h1 id="8-删除操作"><a href="#8-删除操作" class="headerlink" title="8. 删除操作"></a>8. 删除操作</h1><h2 id="8-1-单个和批量以及条件删除"><a href="#8-1-单个和批量以及条件删除" class="headerlink" title="8.1 单个和批量以及条件删除"></a>8.1 单个和批量以及条件删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testdelete</span><span class="hljs-params">()</span></span>&#123;<br>        userMapper.deleteById(<span class="hljs-number">1l</span>);<br>        <span class="hljs-comment">//userMapper.deleteBatchIds();  批量删除</span><br>        <span class="hljs-comment">//userMapper.deleteByMap();     条件删除</span><br>    &#125;<br><br><span class="hljs-comment">//和上面的查询是一样的</span><br></code></pre></td></tr></table></figure><h2 id="8-2-逻辑删除"><a href="#8-2-逻辑删除" class="headerlink" title="8.2 逻辑删除"></a>8.2 逻辑删除</h2><ul><li><p>物理删除  从数据库中直接移除</p></li><li><p>逻辑删除 在数据库中没有被删除，而是通过一个变量来让他失效(类似于回收站</p></li></ul><ol><li>数据库增加deleted字段</li></ol><p> <img src="https://img.mercuryblog.site/img/image-20220522143025600.png" alt="image-20220522143025600"></p><ol start="2"><li>实体类中增加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Integer deleted;<br></code></pre></td></tr></table></figure><ol start="3"><li>增加配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ISqlInjector <span class="hljs-title">sqlInjector</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LogicSqlInjector();<br>&#125;<br><span class="hljs-comment">//高版本的已经不需要配置这个，具体请参考官方的配置文件</span><br></code></pre></td></tr></table></figure><ol start="4"><li>application配置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-delete-value</span>= <span class="hljs-string">1 </span><br><span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>= <span class="hljs-string">0 </span><br><span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br></code></pre></td></tr></table></figure><ol start="5"><li>测试，运行删除id为1的数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">==&gt; Preparing: UPDATE user SET deleted=<span class="hljs-number">1</span> WHERE id=? AND deleted=<span class="hljs-number">0</span> <span class="hljs-comment">// 可以看出这里虽然是删除，但其实走的是更新</span><br>==&gt; Parameters: <span class="hljs-number">1</span>(Long)<br>&lt;== Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>那既然没有实际的删除，那么查询的时候可以查询出来吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询的时候会自动过滤被删的数据</span><br>==&gt; Preparing: SELECT id,name,age,email,version,deleted,create_time,update_time FROM user WHERE id=? AND deleted=<span class="hljs-number">0</span>   <span class="hljs-comment">//注意这个sql </span><br>==&gt; Parameters: <span class="hljs-number">1</span>(Long)<br>&lt;==  Total: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="9-性能分析插件"><a href="#9-性能分析插件" class="headerlink" title="9. 性能分析插件"></a>9. 性能分析插件</h1><p>我们在平时的开发中会遇到一些慢sql ，MP也提供性能分析插件，如果超过这个时间就会停止，狂神视频所讲的插件已经移除，官网现在推荐使用p6spy，具体的配置参考官方文档</p><h1 id="10-条件构造器"><a href="#10-条件构造器" class="headerlink" title="10. 条件构造器"></a>10. 条件构造器</h1><p>前面的所讲的都是一些简单查询，那么我们想实现相对较复杂的查询的时候那么该怎么操作呢，这个时候我们就可以使用mp提供的条件构造器了</p><p>下面六个示例基本够用了，如果不够，依然那句话，去查看官方文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">contextLoadstest1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用条件构造</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">//名字和邮箱不为空且年龄大于12的数据</span><br>    wrapper<br>            .isNotNull(<span class="hljs-string">&quot;name&quot;</span>)<br>            .isNotNull(<span class="hljs-string">&quot;email&quot;</span>)<br>            .ge(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">12</span>);<br>    userMapper.selectList(wrapper).forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">contextLoadstest2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用条件构造</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">//查询等于的</span><br>    wrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;william&quot;</span>);<br>    System.out.println(userMapper.selectOne(wrapper));<span class="hljs-comment">//查询一个唯一数据时用，不然会报错</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">contextLoadstest3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用条件构造</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">//查询年龄在20到30之间的</span><br>    wrapper.between(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br>    System.out.println(userMapper.selectCount(wrapper));<span class="hljs-comment">//统计结果数</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">contextLoadstest4</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用条件构造</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">//模糊查询</span><br>    wrapper.notLike(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>)<br>           .likeRight(<span class="hljs-string">&quot;email&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>);<span class="hljs-comment">//t%  这里的left和right指的是%的位置</span><br>    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);<br>    maps.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">contextLoadstest5</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用条件构造</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br><br>    <span class="hljs-comment">//子查询</span><br>    wrapper.inSql(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;select id  from user where id &lt;3&quot;</span>);<br>    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);<br>    objects.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">contextLoadstest6</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//使用条件构造</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br><br>    <span class="hljs-comment">//根据id降序</span><br>    wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br><br>    List&lt;User&gt; users = userMapper.selectList(wrapper);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="11-代码生成器"><a href="#11-代码生成器" class="headerlink" title="11. 代码生成器"></a>11. 代码生成器</h1><p>这里是旧版的生成器，3.5.1+版本的生成器和旧版的生成器有很大的不同，并且不兼容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码自动生成器，写在test里</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeGenerator</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//我们需要构建一个代码生成器对象</span><br>        AutoGenerator mpg = <span class="hljs-keyword">new</span> AutoGenerator();<br>        <span class="hljs-comment">//怎么样去执行，配置策略</span><br>        <span class="hljs-comment">//1、全局配置</span><br>        GlobalConfig gc = <span class="hljs-keyword">new</span> GlobalConfig();  <span class="hljs-comment">//注意这里导包的时候注意要导generator下面的那个，不然后面的点不出来</span><br>        String projectPath = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<span class="hljs-comment">//获取当前目录</span><br>        gc.setOutputDir(projectPath+<span class="hljs-string">&quot;/src/main/java&quot;</span>);<span class="hljs-comment">//输出到哪个目录</span><br>        gc.setAuthor(<span class="hljs-string">&quot;mercury&quot;</span>);<br>        gc.setOpen(<span class="hljs-keyword">false</span>);<br>        gc.setFileOverride(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//是否覆盖</span><br>        gc.setServiceName(<span class="hljs-string">&quot;%sService&quot;</span>);<span class="hljs-comment">//去Service的I前缀</span><br>        gc.setIdType(IdType.ID_WORKER);<br>        gc.setDateType(DateType.ONLY_DATE);<br>        gc.setSwagger2(<span class="hljs-keyword">true</span>);<br>        mpg.setGlobalConfig(gc);<br>        <br>        <span class="hljs-comment">//2、设置数据源</span><br>        DataSourceConfig dsc = <span class="hljs-keyword">new</span> DataSourceConfig();<br>        dsc.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dsc.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        dsc.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db?useSSL=false&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>);<br>        dsc.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dsc.setDbType(DbType.MYSQL);<br>        mpg.setDataSource(dsc);<br>        <br>        <br>        <span class="hljs-comment">//3、包的配置</span><br>        PackageConfig pc = <span class="hljs-keyword">new</span> PackageConfig();<br>        pc.setModuleName(<span class="hljs-string">&quot;study&quot;</span>);<br>        pc.setParent(<span class="hljs-string">&quot;com.wsk&quot;</span>);<br>        pc.setEntity(<span class="hljs-string">&quot;pojo&quot;</span>);<br>        pc.setMapper(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        pc.setService(<span class="hljs-string">&quot;service&quot;</span>);<br>        pc.setController(<span class="hljs-string">&quot;controller&quot;</span>);<br>        mpg.setPackageInfo(pc);<br>        <br>        <span class="hljs-comment">//4、策略配置</span><br>        StrategyConfig strategy = <span class="hljs-keyword">new</span> StrategyConfig();<br>        strategy.setInclude(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;danyuan&quot;</span>,<span class="hljs-string">&quot;building&quot;</span>,<span class="hljs-string">&quot;room&quot;</span>);<span class="hljs-comment">//设置要映射的表名,只需改这里即可</span><br>        strategy.setNaming(NamingStrategy.underline_to_camel);<br>        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<br>        strategy.setEntityLombokModel(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//是否使用lombok开启注解</span><br>        strategy.setLogicDeleteFieldName(<span class="hljs-string">&quot;deleted&quot;</span>);<br>        <span class="hljs-comment">//自动填充配置</span><br>        TableFill gmtCreate = <span class="hljs-keyword">new</span> TableFill(<span class="hljs-string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);<br>        TableFill gmtUpdate = <span class="hljs-keyword">new</span> TableFill(<span class="hljs-string">&quot;gmt_update&quot;</span>, FieldFill.INSERT_UPDATE);<br>        ArrayList&lt;TableFill&gt; tableFills = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        tableFills.add(gmtCreate);<br>        tableFills.add(gmtUpdate);<br>        strategy.setTableFillList(tableFills);<br>        <span class="hljs-comment">//乐观锁配置</span><br>        strategy.setVersionFieldName(<span class="hljs-string">&quot;version&quot;</span>);<br>        strategy.setRestControllerStyle(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//开启驼峰命名</span><br>        strategy.setControllerMappingHyphenStyle(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//localhost:8080/hello_id_2</span><br>        mpg.setStrategy(strategy);<br>        mpg.execute();<span class="hljs-comment">//执行</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2022/04/24/Docker/"/>
    <url>/2022/04/24/Docker/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">     <div>前言：</div>     <ul>         <div>             根据狂神视频整理         </div>     <ul></div><h1 id="一-Docker概述"><a href="#一-Docker概述" class="headerlink" title="一. Docker概述"></a>一. Docker概述</h1><h2 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1. Docker简介"></a>1. Docker简介</h2><p>现在有一个问题，我开发的程序在我的电脑上可以正常运行，版本更新或其他的一些操作可能会导致服务不可用，但是配置环境是十分痛苦的，相信这个大家都有体会😥，在服务器上面配置各种Redis, MySQL, jdk等极其的麻烦，而且还不能跨平台，因此docker诞生了，它给以上的问题给出了一个解决方案。</p><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><p>下面是Docker的文档和仓库</p><p><a href="https://docs.docker.com/">文档</a>  </p><p><a href="https://hub.docker.com/">仓库</a> </p><h2 id="2-Docker与虚拟机技术的比较"><a href="#2-Docker与虚拟机技术的比较" class="headerlink" title="2. Docker与虚拟机技术的比较"></a>2. Docker与虚拟机技术的比较</h2><ul><li><p>传统的虚拟机，虚拟出一条硬件，运行出完整的操作系统，然后在这个系统上安装和运行我们的软件、</p></li><li><p>容器内的应用直接运行在宿主机，容器是没有自己的内核的，也没有虚拟的硬件，所以就会轻便许多</p></li><li><p>每个容器之间是互相隔离的，每个容器的内部有自己的文件系统，互不影响</p></li></ul><h1 id="二-Docker的安装"><a href="#二-Docker的安装" class="headerlink" title="二. Docker的安装"></a>二. Docker的安装</h1><ol><li>卸载旧版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum remove docker \<br></code></pre></td></tr></table></figure><ol start="2"><li>安装需要的安装包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils<br></code></pre></td></tr></table></figure><ol start="3"><li>设置镜像仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo  <br></code></pre></td></tr></table></figure><p>这里使用的是阿里云的镜像</p><ol start="4"><li>这里最好再更新一下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum makecache fast<br></code></pre></td></tr></table></figure><ol start="5"><li>开始安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>安装docker相关的</p><p>-ce社区</p><p>-ee 企业版</p><ol start="6"><li>启动docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure><ol start="7"><li>查看是否安装成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Mercury /]<span class="hljs-comment"># docker version</span><br><br>Client: Docker Engine - Community<br><br> Version:   20.10.14<br><br> API version:  1.41<br><br> Go version:  go1.16.15<br><br> Git commit:  a224086<br><br> Built:    Thu Mar 24 01:49:57 2022<br><br> OS/Arch:   linux/amd64<br><br> Context:   default<br><br> Experimental:  <span class="hljs-literal">true</span><br><br><br><br>Server: Docker Engine - Community<br><br> Engine:<br><br> Version:   20.10.14<br><br> API version:  1.41 (minimum version 1.12)<br><br> Go version:  go1.16.15<br><br> Git commit:  87a90dc<br><br> Built:   Thu Mar 24 01:48:24 2022<br><br> OS/Arch:   linux/amd64<br><br> Experimental:  <span class="hljs-literal">false</span><br><br> containerd:<br><br> Version:   1.5.11<br><br> GitCommit:  3df54a852345ae127d1fa3092b95168e4a88e2f8<br><br> runc:<br><br> Version:   1.0.3<br><br> GitCommit:  v1.0.3-0-gf46b6ba<br><br> docker-init:<br><br> Version:   0.19.0<br><br> GitCommit:  de40ad0<br></code></pre></td></tr></table></figure><p>可以打印出以上信息，说明成功了</p><ol start="8"><li>测试是否可以正常运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Mercury /]<span class="hljs-comment"># docker run hello-world</span><br><br>Unable to find image <span class="hljs-string">&#x27;hello-world:latest&#x27;</span> locally<br><br>latest: Pulling from library/hello-world<br><br>2db29710123e: Pull complete <br><br>Digest: sha256:10d7d58d5ebd2a652f4d93fdd86da8f265f5318c6a73cc5b6a9798ff6d2b2e67<br><br>Status: Downloaded newer image <span class="hljs-keyword">for</span> hello-world:latest<br><br><br><br>Hello from Docker!<br><br>This message shows that your installation appears to be working correctly.<br><br><br><br>To generate this message, Docker took the following steps:<br><br> 1. The Docker client contacted the Docker daemon.<br><br> 2. The Docker daemon pulled the <span class="hljs-string">&quot;hello-world&quot;</span> image from the Docker Hub.<br><br> (amd64)<br><br> 3. The Docker daemon created a new container from that image <span class="hljs-built_in">which</span> runs the<br><br> executable that produces the output you are currently reading.<br><br> 4. The Docker daemon streamed that output to the Docker client, <span class="hljs-built_in">which</span> sent it<br><br> to your terminal.<br><br><br><br>To try something more ambitious, you can run an Ubuntu container with:<br><br> $ docker run -it ubuntu bash<br><br><br><br>Share images, automate workflows, and more with a free Docker ID:<br><br> https://hub.docker.com/<br><br><br><br>For more examples and ideas, visit:<br><br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><ol start="9"><li>查看镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Mercury /]<span class="hljs-comment"># docker images</span><br><br>REPOSITORY TAG  IMAGE ID  CREATED  SIZE<br><br>hello-world latest feb5d9fea6a5 7 months ago 13.3kB<br></code></pre></td></tr></table></figure><div class = "note note-info">卸载</div><p>首先卸载 Docker 引擎、CLI 和 Containerd 软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum remove docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。要删除所有映像、容器和卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo rm -rf /var/lib/docker<br>$ sudo rm -rf /var/lib/containerd<br></code></pre></td></tr></table></figure><h2 id="1-配置阿里云镜像加速器"><a href="#1-配置阿里云镜像加速器" class="headerlink" title="1. 配置阿里云镜像加速器"></a>1. 配置阿里云镜像加速器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkdir -p /etc/docker<br><br>sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br><br>&#123;<br><br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://阿里云给你的镜像加速地址.mirror.aliyuncs.com&quot;</span>]<br><br>&#125;<br>EOF<br><br><br>sudo systemctl daemon-reload<br><br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h1 id="三-Docker常用的一些命令"><a href="#三-Docker常用的一些命令" class="headerlink" title="三. Docker常用的一些命令"></a>三. Docker常用的一些命令</h1><div class = "note note-success">一些基本的命令</div><p>docker version  查看docker 版本信息</p><p>docker info  查看docker的系统信息，包括镜像和容器的数量</p><p>docker –help  查看帮助文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker images --help                                             # 查看image的帮助<br><br>Usage: docker images [OPTIONS] [REPOSITORY[:TAG]]<br><br>List images<br><br>Options:<br><br> -a, --all    Show all images (default hides intermediate images)                  # 可以添加的参数以及对应的解释<br><br>  --digests   Show digests<br><br> -f, --filter filter Filter output based on conditions provided<br><br>  --format string Pretty-print images using a Go template<br><br>  --no-trunc  Don&#x27;t truncate output<br><br> -q, --quiet   Only show image IDs<br></code></pre></td></tr></table></figure><h2 id="1-镜像命令"><a href="#1-镜像命令" class="headerlink" title="1. 镜像命令"></a>1. 镜像命令</h2><h3 id="1-1-查看镜像"><a href="#1-1-查看镜像" class="headerlink" title="1.1 查看镜像"></a>1.1 查看镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker images                                                    # 查看所有的镜像<br><br>REPOSITORY   TAG    IMAGE ID       CREATED       SIZE<br><br>hello-world  latest feb5d9fea6a5   7 months ago  13.3kB<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 释义</span><br>REPOSITOPY 镜像的仓库<br>TAG        镜像的标签<br>TMAGE      镜像的ID<br>CREATED    镜像的创建时间<br>SIZE       镜像的大小<br></code></pre></td></tr></table></figure><h3 id="1-2-搜索镜像"><a href="#1-2-搜索镜像" class="headerlink" title="1.2 搜索镜像"></a>1.2 搜索镜像</h3><p>docker search</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker search mysql<br>NAME                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql                          MySQL is a widely used, open-source relation…   12527     [OK]       <br>mariadb                        MariaDB Server is a high performing open sou…   4819      [OK]       <br>percona                        Percona Server is a fork of the MySQL relati…   575       [OK]       <br>phpmyadmin                     phpMyAdmin - A web interface for MySQL and M…   527       [OK]       <br>bitnami/mysql                  Bitnami MySQL Docker Image                      70                   [OK]<br>linuxserver/mysql-workbench                                                    36                   <br>linuxserver/mysql              A Mysql container, brought to you by LinuxSe…   35                   <br>ubuntu/mysql                   MySQL open source fast, stable, multi-thread…   31                   <br>circleci/mysql                 MySQL is a widely used, open-source relation…   25                   <br>google/mysql                   MySQL server for Google Compute Engine          21                   [OK]<br>vmware/harbor-db               Mysql container for Harbor                      10                   <br>bitnami/mysqld-exporter                                                        3                    <br>ibmcom/mysql-s390x             Docker image for mysql-s390x                    2                    <br>newrelic/mysql-plugin          New Relic Plugin for monitoring MySQL databa…   1                    [OK]<br>vitess/mysqlctld               vitess/mysqlctld                                1                    [OK]<br>nasqueron/mysql                                                                1                    [OK]<br>cimg/mysql                                                                     0                    <br>silintl/mysql-backup-restore   Simple docker image to perform mysql backups…   0                    [OK]<br>drud/mysql-local-57            ddev mysql local container                      0                    <br>drud/mysql                                                                     0                    <br>drud/mysql-docker-local-57     This repo has been deprecated, new tags are …   0                    <br>drud/mysql-docker-local        docker containers for local womysql rk          0                    [OK]<br>docksal/mysql                  MySQL service images for Docksal - https://d…   0                    <br>mirantis/mysql                                                                 0                    <br>drud/mysqld-exporter<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 可选项 通过搜索来过滤</span><br>--filter=STARS=3000  #搜索星星的数量大于3000的<br>[root@Mercury ~]# docker search mysql --filter=STARS=3000<br>NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql     MySQL is a widely used, open-source relation…   12527     [OK]       <br>mariadb   MariaDB Server is a high performing open sou…   4819      [OK]<br></code></pre></td></tr></table></figure><h3 id="1-3-下载镜像"><a href="#1-3-下载镜像" class="headerlink" title="1.3 下载镜像"></a>1.3 下载镜像</h3><p>docker pull 镜像名[:tag]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker pull mysql<br><br>Using default tag: latest                            #如果不指定的话，默认给你下载最新的<br><br>latest: Pulling from library/mysql<br><br>72a69066d2fe: Pull complete                          # 这里是分层下载，等会再讲<br><br>93619dbc5b36: Pull complete <br><br>99da31dd6142: Pull complete <br><br>626033c43d70: Pull complete <br><br>37d5d7efb64e: Pull complete <br><br>ac563158d721: Pull complete <br><br>d2ba16033dad: Pull complete <br><br>688ba7d5c01a: Pull complete <br><br>00e060b6d11d: Pull complete <br><br>1c04857f594f: Pull complete <br><br>4d7cfa90e6ea: Pull complete <br><br>e0431212d27d: Pull complete <br><br>Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709      # 签名<br><br>Status: Downloaded newer image for mysql:latest<br><br>docker.io/library/mysql:latest     #真实的地址<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 这两个是等价的</span><br>docker pull mysql<br>docker pull docker.io/library/mysql:latest<br></code></pre></td></tr></table></figure><p>指定版本下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker pull mysql:5.7             # 指定5.7版本的下载<br><br>5.7: Pulling from library/mysql<br><br>72a69066d2fe: Already exists                        # 可以看到这里不用再下载，这就是分层下载的优势，可以复用，大大减少内存等的压力<br><br>93619dbc5b36: Already exists <br><br>99da31dd6142: Already exists <br><br>626033c43d70: Already exists <br><br>37d5d7efb64e: Already exists <br><br>ac563158d721: Already exists <br><br>d2ba16033dad: Already exists <br><br>0ceb82207cd7: Pull complete <br><br>37f2405cae96: Pull complete <br><br>e2482e017e53: Pull complete <br><br>70deed891d42: Pull complete <br><br>Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94<br><br>Status: Downloaded newer image for mysql:5.7<br><br>docker.io/library/mysql:5.7<br><br><br>[root@Mercury ~]# docker images<br><br>REPOSITORY     TAG      IMAGE ID       CREATED         SIZE<br><br>mysql          5.7      c20987f18b13   4 months ago    448MB<br><br>mysql          latest   3218b38490ce   4 months ago    516MB<br><br>hello-world    latest   feb5d9fea6a5   7 months ago    13.3kB<br></code></pre></td></tr></table></figure><h3 id="1-4-删除镜像"><a href="#1-4-删除镜像" class="headerlink" title="1.4 删除镜像"></a>1.4 删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker rmi -f c20987f18b13       # 删除 通过id 或者名字都行<br><br>Untagged: mysql:5.7<br><br>Untagged: mysql@sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94<br><br>Deleted: sha256:c20987f18b130f9d144c9828df630417e2a9523148930dc3963e9d0dab302a76<br><br>Deleted: sha256:6567396b065ee734fb2dbb80c8923324a778426dfd01969f091f1ab2d52c7989<br><br>Deleted: sha256:0910f12649d514b471f1583a16f672ab67e3d29d9833a15dc2df50dd5536e40f<br><br>Deleted: sha256:6682af2fb40555c448b84711c7302d0f86fc716bbe9c7dc7dbd739ef9d757150<br><br>Deleted: sha256:5c062c3ac20f576d24454e74781511a5f96739f289edaadf2de934d06e910b92<br><br>[root@Mercury ~]# docker images<br><br>REPOSITORY    TAG     IMAGE ID      CREATED        SIZE<br><br>mysql         latest  3218b38490ce  4 months ago   516MB<br><br>hello-world   latest  feb5d9fea6a5  7 months ago   13.3kB<br></code></pre></td></tr></table></figure><p>全部删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker rmi -f $(docker images -aq)   # 里面的那句话是查询全部的dockerid<br><br>Untagged: mysql:latest<br><br>Untagged: mysql@sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709<br><br>Deleted: sha256:3218b38490cec8d31976a40b92e09d61377359eab878db49f025e5d464367f3b<br><br>Deleted: sha256:aa81ca46575069829fe1b3c654d9e8feb43b4373932159fe2cad1ac13524a2f5<br><br>Deleted: sha256:0558823b9fbe967ea6d7174999be3cc9250b3423036370dc1a6888168cbd224d<br><br>Deleted: sha256:a46013db1d31231a0e1bac7eeda5ad4786dea0b1773927b45f92ea352a6d7ff9<br><br>Deleted: sha256:af161a47bb22852e9e3caf39f1dcd590b64bb8fae54315f9c2e7dc35b025e4e3<br><br>Deleted: sha256:feff1495e6982a7e91edc59b96ea74fd80e03674d92c7ec8a502b417268822ff<br><br>Deleted: sha256:8805862fcb6ef9deb32d4218e9e6377f35fb351a8be7abafdf1da358b2b287ba<br><br>Deleted: sha256:872d2f24c4c64a6795e86958fde075a273c35c82815f0a5025cce41edfef50c7<br><br>Deleted: sha256:6fdb3143b79e1be7181d32748dd9d4a845056dfe16ee4c827410e0edef5ad3da<br><br>Deleted: sha256:b0527c827c82a8f8f37f706fcb86c420819bb7d707a8de7b664b9ca491c96838<br><br>Deleted: sha256:75147f61f29796d6528486d8b1f9fb5d122709ea35620f8ffcea0e0ad2ab0cd0<br><br>Deleted: sha256:2938c71ddf01643685879bf182b626f0a53b1356138ef73c40496182e84548aa<br><br>Deleted: sha256:ad6b69b549193f81b039a1d478bc896f6e460c77c1849a4374ab95f9a3d2cea2<br><br>Untagged: hello-world:latest<br><br>Untagged: hello-world@sha256:10d7d58d5ebd2a652f4d93fdd86da8f265f5318c6a73cc5b6a9798ff6d2b2e67<br><br>Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412<br><br>[root@Mercury ~]# docker images<br>REPOSITORY  TAG    IMAGE ID  CREATED  SIZE                         # 可以看到已经没有镜像了<br></code></pre></td></tr></table></figure><h2 id="2-容器命令"><a href="#2-容器命令" class="headerlink" title="2. 容器命令"></a>2. 容器命令</h2><h3 id="2-1-启动和退出容器"><a href="#2-1-启动和退出容器" class="headerlink" title="2.1 启动和退出容器"></a>2.1 启动和退出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@Mercury ~]# docker images<br><br>REPOSITORY  TAG     IMAGE ID      CREATED       SIZE<br><br>centos      latest  5d0da3dc9764  7 months ago  231MB<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 启动并进入容器</span><br><br>[root@Mercury ~]# docker run -it centos /bin/bash<br><br>[root@2e2aa125d5c4 /]# ls                     # 可以看到root后面的主机号已经变了<br><br>bin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var<br></code></pre></td></tr></table></figure><p>退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@2e2aa125d5c4 /]# exit                   # 这个是退出并关闭容器<br><br>exit<br><br><br>[root@2e2aa125d5c4 /]  [root@Mercury ~]       # 按住ctrl + p + q ,退出但是并不关闭<br><br></code></pre></td></tr></table></figure><h3 id="2-2-列出所有运行的容器"><a href="#2-2-列出所有运行的容器" class="headerlink" title="2.2 列出所有运行的容器"></a>2.2 列出所有运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> docker ps   列出当前正在运行的命令</span><br><span class="hljs-meta">#</span><span class="bash">  -a         列出当前运行的容器+历史运行过的容器</span><br><span class="hljs-meta">#</span><span class="bash">  -n=?       显示最近创建过的容器</span><br><span class="hljs-meta">#</span><span class="bash">  -q         只显示容器的编号</span><br><br>[root@Mercury ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES<br>3968ef35633d   centos    &quot;/bin/bash&quot;   25 hours ago   Up 25 hours             quirky_lewin<br><br>[root@Mercury ~]# docker ps -a<br>CONTAINER ID   IMAGE         COMMAND       CREATED        STATUS                   PORTS     NAMES<br>3968ef35633d   centos        &quot;/bin/bash&quot;   25 hours ago   Up 25 hours                        quirky_lewin<br>2e2aa125d5c4   centos        &quot;/bin/bash&quot;   2 days ago     Exited (0) 2 days ago              nervous_golick<br>62c5b7704890   hello-world   &quot;/hello&quot;      2 weeks ago    Exited (0) 2 weeks ago             serene_bohr<br><br>[root@Mercury ~]# docker ps -aq<br>3968ef35633d<br>2e2aa125d5c4<br>62c5b7704890<br><br></code></pre></td></tr></table></figure><h3 id="2-3-删除容器"><a href="#2-3-删除容器" class="headerlink" title="2.3 删除容器"></a>2.3 删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm 容器id                  #删除指定的容器 不能删除正在运行容器<br><br>docker rm -f $(docker ps -aq)    #删除所有的容器<br><br>docker ps -a -q|xargs docker rm  #删除所有的容器<br></code></pre></td></tr></table></figure><h3 id="2-4-启动和停止容器的操作"><a href="#2-4-启动和停止容器的操作" class="headerlink" title="2.4 启动和停止容器的操作"></a>2.4 启动和停止容器的操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start 容器id               # 启动容器<br>docker restart 容器id             # 重启容器<br>docker stop 容器id                # 停止容器<br>docker kill 容器id                # 强制停止当前的容器<br></code></pre></td></tr></table></figure><div note note-warning>区别</div><p>docker run 后面指定的是一个镜像，而docker start指定的是一个容器，docker run是利用镜像生成容器，并启动容器，而docker start是启动一个之前生成过的容器</p><h2 id="3-常用的其他命令"><a href="#3-常用的其他命令" class="headerlink" title="3. 常用的其他命令"></a>3. 常用的其他命令</h2><h3 id="3-1-后台启动容器"><a href="#3-1-后台启动容器" class="headerlink" title="3.1 后台启动容器"></a>3.1 后台启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令 docker run -d 镜像名</span><br>[root@Mercury /]# docker run -d centos <br><span class="hljs-meta">#</span><span class="bash"> 这里有个坑</span><br><span class="hljs-meta">#</span><span class="bash"> 容器使用后台运行，就必须要一个后台进程，docker发现没有应用，就会自动停止</span><br></code></pre></td></tr></table></figure><div note note-warning> docker run -it centos /bin/bash 后面的 bin/bash的作用</div><p>首先，docker run -it centos 的意思是，为centos这个镜像创建一个容器， -i和-t这两个参数的作用是，为该docker创建一个伪终端，这样就可以进入到容器的交互模式？（也就是直接进入到容器里面）后面的/bin/bash的作用是表示载入容器后运行bash ,docker中必须要保持一个进程的运行，要不然整个容器启动后就会马上kill itself，这样当你使用docker ps 查看启动的容器时，就会发现你刚刚创建的那个容器并不在已启动的容器队列中。这个/bin/bash就表示启动容器后启动bash，但是有些镜像不适合bash shell风格，会报错。</p><h3 id="3-2-查看日志"><a href="#3-2-查看日志" class="headerlink" title="3.2 查看日志"></a>3.2 查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -f -t --tail 容器id<br><br>-tf              # 显示日志<br>--tail number    # 要显示的日志数<br><br>docker logs -f -t --tail 10 dce7b86172bf     # 显示十条日志<br></code></pre></td></tr></table></figure><h3 id="3-3-查看进程信息"><a href="#3-3-查看进程信息" class="headerlink" title="3.3 查看进程信息"></a>3.3 查看进程信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令docker top 容器id</span><br>[root@Mercury ~]# docker top 3968ef35633d<br>UID       PID           PPID             C              STIME               TTY             TIME          CMD           <br>root      10899         10880            0              May07               pts/0           00:00:00      /bin/bash<br></code></pre></td></tr></table></figure><h3 id="3-4-查看镜像的元数据"><a href="#3-4-查看镜像的元数据" class="headerlink" title="3.4 查看镜像的元数据"></a>3.4 查看镜像的元数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令 docker inspect 容器id</span><br>[root@Mercury ~]# docker inspect 3968ef35633d<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;3968ef35633d72bcb0a27b4a29d24f640e02306f196f392cd0d54967a67c11ee&quot;,<br>        &quot;Created&quot;: &quot;2022-05-07T08:18:55.224515441Z&quot;,<br>        &quot;Path&quot;: &quot;/bin/bash&quot;,<br>        &quot;Args&quot;: [],<br>        &quot;State&quot;: &#123;<br>            &quot;Status&quot;: &quot;running&quot;,<br>            &quot;Running&quot;: true,<br>            &quot;Paused&quot;: false,<br>            &quot;Restarting&quot;: false,<br>            &quot;OOMKilled&quot;: false,<br>            &quot;Dead&quot;: false,<br>            &quot;Pid&quot;: 10899,<br>            &quot;ExitCode&quot;: 0,<br>            &quot;Error&quot;: &quot;&quot;,<br>            &quot;StartedAt&quot;: &quot;2022-05-07T08:18:55.866857542Z&quot;,<br>            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;<br>        &#125;,<br>        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,<br>        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/3968ef35633d72bcb0a27b4a29d24f640e02306f196f392cd0d54967a67c11ee/resolv.conf&quot;,<br>        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/3968ef35633d72bcb0a27b4a29d24f640e02306f196f392cd0d54967a67c11ee/hostname&quot;,<br>        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/3968ef35633d72bcb0a27b4a29d24f640e02306f196f392cd0d54967a67c11ee/hosts&quot;,<br>        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/3968ef35633d72bcb0a27b4a29d24f640e02306f196f392cd0d54967a67c11ee/3968ef35633d72bcb0a27b4a29d24f640e02306f196f392cd0d54967a67c11ee-json.log&quot;,<br>        &quot;Name&quot;: &quot;/quirky_lewin&quot;,<br>        &quot;RestartCount&quot;: 0,<br>        &quot;Driver&quot;: &quot;overlay2&quot;,<br>        &quot;Platform&quot;: &quot;linux&quot;,<br>        &quot;MountLabel&quot;: &quot;&quot;,<br>        &quot;ProcessLabel&quot;: &quot;&quot;,<br>        &quot;AppArmorProfile&quot;: &quot;&quot;,<br>        &quot;ExecIDs&quot;: null,<br>        &quot;HostConfig&quot;: &#123;<br>            &quot;Binds&quot;: null,<br>            &quot;ContainerIDFile&quot;: &quot;&quot;,<br>            &quot;LogConfig&quot;: &#123;<br>                &quot;Type&quot;: &quot;json-file&quot;,<br>                &quot;Config&quot;: &#123;&#125;<br>            &#125;,<br>            &quot;NetworkMode&quot;: &quot;default&quot;,<br>            &quot;PortBindings&quot;: &#123;&#125;,<br>            &quot;RestartPolicy&quot;: &#123;<br>                &quot;Name&quot;: &quot;no&quot;,<br>                &quot;MaximumRetryCount&quot;: 0<br>            &#125;,<br>            &quot;AutoRemove&quot;: false,<br>            &quot;VolumeDriver&quot;: &quot;&quot;,<br>            &quot;VolumesFrom&quot;: null,<br>            &quot;CapAdd&quot;: null,<br>            &quot;CapDrop&quot;: null,<br>            &quot;CgroupnsMode&quot;: &quot;host&quot;,<br>            &quot;Dns&quot;: [],<br>            &quot;DnsOptions&quot;: [],<br>            &quot;DnsSearch&quot;: [],<br>            &quot;ExtraHosts&quot;: null,<br>            &quot;GroupAdd&quot;: null,<br>            &quot;IpcMode&quot;: &quot;private&quot;,<br>            &quot;Cgroup&quot;: &quot;&quot;,<br>            &quot;Links&quot;: null,<br>            &quot;OomScoreAdj&quot;: 0,<br>            &quot;PidMode&quot;: &quot;&quot;,<br>            &quot;Privileged&quot;: false,<br>            &quot;PublishAllPorts&quot;: false,<br>            &quot;ReadonlyRootfs&quot;: false,<br>            &quot;SecurityOpt&quot;: null,<br>            &quot;UTSMode&quot;: &quot;&quot;,<br>            &quot;UsernsMode&quot;: &quot;&quot;,<br>            &quot;ShmSize&quot;: 67108864,<br>            &quot;Runtime&quot;: &quot;runc&quot;,<br>            &quot;ConsoleSize&quot;: [<br>                0,<br>                0<br>            ],<br>            &quot;Isolation&quot;: &quot;&quot;,<br>            &quot;CpuShares&quot;: 0,<br>            &quot;Memory&quot;: 0,<br>            &quot;NanoCpus&quot;: 0,<br>            &quot;CgroupParent&quot;: &quot;&quot;,<br>            &quot;BlkioWeight&quot;: 0,<br>            &quot;BlkioWeightDevice&quot;: [],<br>            &quot;BlkioDeviceReadBps&quot;: null,<br>            &quot;BlkioDeviceWriteBps&quot;: null,<br>            &quot;BlkioDeviceReadIOps&quot;: null,<br>            &quot;BlkioDeviceWriteIOps&quot;: null,<br>            &quot;CpuPeriod&quot;: 0,<br>            &quot;CpuQuota&quot;: 0,<br>            &quot;CpuRealtimePeriod&quot;: 0,<br>            &quot;CpuRealtimeRuntime&quot;: 0,<br>            &quot;CpusetCpus&quot;: &quot;&quot;,<br>            &quot;CpusetMems&quot;: &quot;&quot;,<br>            &quot;Devices&quot;: [],<br>            &quot;DeviceCgroupRules&quot;: null,<br>            &quot;DeviceRequests&quot;: null,<br>            &quot;KernelMemory&quot;: 0,<br>            &quot;KernelMemoryTCP&quot;: 0,<br>            &quot;MemoryReservation&quot;: 0,<br>            &quot;MemorySwap&quot;: 0,<br>            &quot;MemorySwappiness&quot;: null,<br>            &quot;OomKillDisable&quot;: false,<br>            &quot;PidsLimit&quot;: null,<br>            &quot;Ulimits&quot;: null,<br>            &quot;CpuCount&quot;: 0,<br>            &quot;CpuPercent&quot;: 0,<br>            &quot;IOMaximumIOps&quot;: 0,<br>            &quot;IOMaximumBandwidth&quot;: 0,<br>            &quot;MaskedPaths&quot;: [<br>                &quot;/proc/asound&quot;,<br>                &quot;/proc/acpi&quot;,<br>                &quot;/proc/kcore&quot;,<br>                &quot;/proc/keys&quot;,<br>                &quot;/proc/latency_stats&quot;,<br>                &quot;/proc/timer_list&quot;,<br>                &quot;/proc/timer_stats&quot;,<br>                &quot;/proc/sched_debug&quot;,<br>                &quot;/proc/scsi&quot;,<br>                &quot;/sys/firmware&quot;<br>            ],<br>            &quot;ReadonlyPaths&quot;: [<br>                &quot;/proc/bus&quot;,<br>                &quot;/proc/fs&quot;,<br>                &quot;/proc/irq&quot;,<br>                &quot;/proc/sys&quot;,<br>                &quot;/proc/sysrq-trigger&quot;<br>            ]<br>        &#125;,<br>        &quot;GraphDriver&quot;: &#123;<br>            &quot;Data&quot;: &#123;<br>                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/2a0cabf5bad359705499d87ae235e88f9f35f81a4d990e0ec5cb30de3fe78ded-init/diff:/var/lib/docker/overlay2/c55a40a69f5947ab379bbcf187bb281e1eeaf6bec2e5b85e231ff9c4ba5884aa/diff&quot;,<br>                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/2a0cabf5bad359705499d87ae235e88f9f35f81a4d990e0ec5cb30de3fe78ded/merged&quot;,<br>                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/2a0cabf5bad359705499d87ae235e88f9f35f81a4d990e0ec5cb30de3fe78ded/diff&quot;,<br>                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/2a0cabf5bad359705499d87ae235e88f9f35f81a4d990e0ec5cb30de3fe78ded/work&quot;<br>            &#125;,<br>            &quot;Name&quot;: &quot;overlay2&quot;<br>        &#125;,<br>        &quot;Mounts&quot;: [],<br>        &quot;Config&quot;: &#123;<br>            &quot;Hostname&quot;: &quot;3968ef35633d&quot;,<br>            &quot;Domainname&quot;: &quot;&quot;,<br>            &quot;User&quot;: &quot;&quot;,<br>            &quot;AttachStdin&quot;: true,<br>            &quot;AttachStdout&quot;: true,<br>            &quot;AttachStderr&quot;: true,<br>            &quot;Tty&quot;: true,<br>            &quot;OpenStdin&quot;: true,<br>            &quot;StdinOnce&quot;: true,<br>            &quot;Env&quot;: [<br>                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;<br>            ],<br>            &quot;Cmd&quot;: [<br>                &quot;/bin/bash&quot;<br>            ],<br>            &quot;Image&quot;: &quot;centos&quot;,<br>            &quot;Volumes&quot;: null,<br>            &quot;WorkingDir&quot;: &quot;&quot;,<br>            &quot;Entrypoint&quot;: null,<br>            &quot;OnBuild&quot;: null,<br>            &quot;Labels&quot;: &#123;<br>                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,<br>                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,<br>                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,<br>                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,<br>                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;<br>            &#125;<br>        &#125;,<br>        &quot;NetworkSettings&quot;: &#123;<br>            &quot;Bridge&quot;: &quot;&quot;,<br>            &quot;SandboxID&quot;: &quot;ae8f277d769fa5de37a1ba3b41eec18a0dd9377560570375fad7d3ef95d5501b&quot;,<br>            &quot;HairpinMode&quot;: false,<br>            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,<br>            &quot;LinkLocalIPv6PrefixLen&quot;: 0,<br>            &quot;Ports&quot;: &#123;&#125;,<br>            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/ae8f277d769f&quot;,<br>            &quot;SecondaryIPAddresses&quot;: null,<br>            &quot;SecondaryIPv6Addresses&quot;: null,<br>            &quot;EndpointID&quot;: &quot;20bfd8331adfc270031bd6c2e26cbf4e7a215d5af2394fb173953ac0624cf999&quot;,<br>            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,<br>            &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>            &quot;GlobalIPv6PrefixLen&quot;: 0,<br>            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,<br>            &quot;IPPrefixLen&quot;: 16,<br>            &quot;IPv6Gateway&quot;: &quot;&quot;,<br>            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,<br>            &quot;Networks&quot;: &#123;<br>                &quot;bridge&quot;: &#123;<br>                    &quot;IPAMConfig&quot;: null,<br>                    &quot;Links&quot;: null,<br>                    &quot;Aliases&quot;: null,<br>                    &quot;NetworkID&quot;: &quot;210f490ac0f5fe787e4a55b53622328897a75ad50fabf976732734b961ddcf4a&quot;,<br>                    &quot;EndpointID&quot;: &quot;20bfd8331adfc270031bd6c2e26cbf4e7a215d5af2394fb173953ac0624cf999&quot;,<br>                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,<br>                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,<br>                    &quot;IPPrefixLen&quot;: 16,<br>                    &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6PrefixLen&quot;: 0,<br>                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,<br>                    &quot;DriverOpts&quot;: null<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="3-5-进入当前正在运行的容器"><a href="#3-5-进入当前正在运行的容器" class="headerlink" title="3.5 进入当前正在运行的容器"></a>3.5 进入当前正在运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 方式一</span><br><span class="hljs-meta">#</span><span class="bash"> 命令 docker <span class="hljs-built_in">exec</span> -it 容器id bashshell</span><br><br>[root@Mercury ~]# docker exec -it 3968ef35633d /bin/bash<br>[root@3968ef35633d /]# ls<br>bin dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var<br>[root@3968ef35633d /]#<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方式二</span><br><span class="hljs-meta">#</span><span class="bash"> 命令docker attach 容器id</span><br>[root@Mercury ~]# docker attach 3968ef35633d<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> docker <span class="hljs-built_in">exec</span>   <span class="hljs-comment"># 进入容器后开启一个新的终端，可以再里里面进行操作</span></span><br><span class="hljs-meta">#</span><span class="bash"> docker attach <span class="hljs-comment"># 进入容器正在执行的终端，不会启动新的终端</span></span><br></code></pre></td></tr></table></figure><h3 id="3-6-从容器拷贝文件到主机上"><a href="#3-6-从容器拷贝文件到主机上" class="headerlink" title="3.6 从容器拷贝文件到主机上"></a>3.6 从容器拷贝文件到主机上</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> docker cp 容器id : 容器内的路径   目的主机地址</span><br>[root@Mercury ~]# docker cp 3968ef35633d:/home/test.java /home<br></code></pre></td></tr></table></figure><h2 id="4-小小的来实战一波"><a href="#4-小小的来实战一波" class="headerlink" title="4. 小小的来实战一波"></a>4. 小小的来实战一波</h2><h3 id="4-1-安装nginx"><a href="#4-1-安装nginx" class="headerlink" title="4.1 安装nginx"></a>4.1 安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 首先docekr pull nginx 就不说了</span><br><span class="hljs-meta">#</span><span class="bash"> 下载好后就开始运行</span><br><span class="hljs-meta">#</span><span class="bash">  -d 后台运行</span><br><span class="hljs-meta">#</span><span class="bash">  -p 映射端口</span><br><span class="hljs-meta">#</span><span class="bash">  --name 起个名字</span><br><br>[root@Mercury ~]# docker run -d --name nginx01 -p 3344:80 nginx<br><br>7dfb5ccc4ee6146ca43cfecb66eeb52ad8ee01202e6cf5020b18e5d94e9048f3<br><br>[root@Mercury ~]# docker ps<br><br>CONTAINER ID   IMAGE    COMMAND                  CREATED           STATUS         PORTS                  NAMES<br><br>7dfb5ccc4ee6   nginx    &quot;/docker-entrypoint.…&quot;   11 seconds ago    Up 9 seconds   0.0.0.0:3344-&gt;80/tcp   nginx01<br>s<br>3968ef35633d   centos   &quot;/bin/bash&quot;              2 days ago        Up 2 days                             quirky_lewin<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# curl localhost:3344<br><br>&lt;!DOCTYPE html&gt;<br><br>&lt;html&gt;<br><br>&lt;head&gt;<br><br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br><br>&lt;style&gt;<br><br>html &#123; color-scheme: light dark; &#125;<br><br>body &#123; width: 35em; margin: 0 auto;<br><br>font-family: Tahoma, Verdana, Arial, sans-serif; &#125;<br><br>&lt;/style&gt;<br><br>&lt;/head&gt;<br><br>&lt;body&gt;<br><br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br><br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br><br>working. Further configuration is required.&lt;/p&gt;<br><br><br><br>&lt;p&gt;For online documentation and support please refer to<br><br>&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br><br>Commercial support is available at<br><br>&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br><br><br>&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;<br><br>&lt;/body&gt;<br><br>&lt;/html&gt;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 测试成功！</span><br></code></pre></td></tr></table></figure><h3 id="4-2-安装可视化操作面板portainer"><a href="#4-2-安装可视化操作面板portainer" class="headerlink" title="4.2 安装可视化操作面板portainer"></a>4.2 安装可视化操作面板portainer</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker run -d -p 8080:9000 \<br><span class="hljs-meta"></span><br><span class="hljs-meta">&gt;</span><span class="bash"> --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="hljs-literal">true</span> portainer/portainer</span><br></code></pre></td></tr></table></figure><p>没什么讲的，尽量不适用可视化面板</p><h1 id="四-Docker镜像讲解"><a href="#四-Docker镜像讲解" class="headerlink" title="四. Docker镜像讲解"></a>四. Docker镜像讲解</h1><h2 id="1-镜像是什么"><a href="#1-镜像是什么" class="headerlink" title="1. 镜像是什么"></a>1. 镜像是什么</h2><p>镜像是一种轻量级，可执行的独立软件包，用来打包软件运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码，运行时的库环境变量和配置文件。所有的应用，直接打包docker镜像，就可以直接跑起来</p><div class = "note note-warning">那么如何得到镜像呢？</div><ul><li>从远程仓库下载</li><li>拷贝</li><li>自己制作一个DockerFile</li></ul><h2 id="2-Docker镜像加载原理"><a href="#2-Docker镜像加载原理" class="headerlink" title="2. Docker镜像加载原理"></a>2. Docker镜像加载原理</h2><div class = "note note-success">UnionFS联合文件系统</div><p>UnionFS(联合文件系统)是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，Union文件系统是docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种集体的应用镜像</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到文件系统，联合加载会把各层文件叠加起来，这样最终的文件系统会包含所有的文件和目录</p><div class = "note note-success">Docker镜像加载原理</div><p>docker的镜像实际上哟一层一层的文件系统组成，这种层级的文件系统UnionFS.</p><p>bootfs(boot file system) 主要包含bootloader和kernal，bootloader主要是引导加载kernal，linux刚启动时会加载bootfs文件系统，在docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix 系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时额你存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs</p><p>rootfs(root file system),在bootfs之上。包含的就是典型Linux系统的 /dev,/proc/,/bin,/etc等标准目录和文件。rootf就是各种不同操作系统发行版。比如Ubuntu,Centos等等</p><div note note-success>为什么平时安装虚拟机的Centos都是好几个G，但是Docker才200多M?</div><p>简单的来说就是，这个centos只有最基本的一些命令，是不完全的centos，是被阉割过的(刀法精准)，因此才会比较小</p><h2 id="3-分层理解"><a href="#3-分层理解" class="headerlink" title="3. 分层理解"></a>3. 分层理解</h2><p>从之前的下载就可以看出，docker下载的时候是分层下载的</p><div note note-danger>为什么要采用分层下载这种方式呢？</div><p>最大的好处就是资源共享，比如这里有多个镜像都从相同的Base镜像构建而来，那么宿主机只需要在磁盘上面保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><div note note-success>特点</div><p>Docker的镜像都是只读的，当容器启动的时候，一个新的可写层被加载到镜像的顶部，这一层就是我们通常所讲的容器层，而容器之下的都叫镜像层。</p><h1 id="五-容器数据卷"><a href="#五-容器数据卷" class="headerlink" title="五. 容器数据卷"></a>五. 容器数据卷</h1><p>总的来说就是容器的持久化和同步操作，容器之间也是可以数据共享的，这里就需要把容器内的内容同步一下</p><p>挂载命令：docker run -it -v  主机目录: 容器内的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it -v  /home/test:/home  centos /bin/bash<br></code></pre></td></tr></table></figure><div note note-warning>注意:</div><p>这里的挂载是双向同步，哪一边修改了，都会进行同步</p><p>可以使用inspect命令查看挂载，里面的mount即是挂载相关的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;Mounts&quot;: [<br>   &#123;<br>    &quot;Type&quot;: &quot;bind&quot;,<br>    &quot;Source&quot;: &quot;/home/test&quot;,<br>    &quot;Destination&quot;: &quot;/home&quot;,<br>    &quot;Mode&quot;: &quot;&quot;,<br>    &quot;RW&quot;: true,<br>    &quot;Propagation&quot;: &quot;rprivate&quot;<br>   &#125;<br>  ]<br></code></pre></td></tr></table></figure><p>我们这里就可以想到一个实际的用途(不然发明挂载干什么🤣) ，比如修改容器内的nginx的配置文件，</p><h2 id="1-持久化mysql数据实战"><a href="#1-持久化mysql数据实战" class="headerlink" title="1. 持久化mysql数据实战"></a>1. 持久化mysql数据实战</h2><p>安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><p>启动和配置</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag<br># 这个是官方的配置代码<br><br><span class="hljs-deletion">-d 后台运行</span><br><br><span class="hljs-deletion">-p 端口映射</span><br><br><span class="hljs-deletion">-v 卷挂载</span><br><br><span class="hljs-deletion">-e 环境配置</span><br><br><span class="hljs-deletion">--name 容器的名字</span><br></code></pre></td></tr></table></figure><p>我们再额外配置一下端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 3310:3306 -v /home/mysql:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7<br></code></pre></td></tr></table></figure><p>假设将容器删除，挂载到本地的数据卷依旧并不会丢失，实现持久化功能</p><h2 id="2-具名挂载和匿名挂载"><a href="#2-具名挂载和匿名挂载" class="headerlink" title="2. 具名挂载和匿名挂载"></a>2. 具名挂载和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 匿名挂载</span><br>-v 容器内路径<br>[root@Mercury dockerfile]# docker run -d -p --name nginx01 -v /et/nginx nginx<br><span class="hljs-meta">#</span><span class="bash"> 就是-v的时候只写了容器内的路径没有写容器外的路径，就是匿名挂载</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看所有volume 的情况</span><br>docker volume ls<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 具名挂载</span><br>[root@Mercury dockerfile]# docker run -d -P --name nginx02 -v jumping-nginx:/etc/nginx nginx<br>[root@Mercury dockerfile]# docker volume ls<br>DRIVER    VOLUME NAME<br>local     2e6932c90fc933391e4481d1360ee083eb3477ceb7a097b1123d3370f43a7611<br>local     45d9e1935720bdab02775b3131bffe2a26bacda3090e2ad807d4a94385f52974<br>local     jumping-nginx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 可以看到最下面的那个有了我们赋值的名字</span><br></code></pre></td></tr></table></figure><p>查看一下这个卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury dockerfile]# docker volume inspect jumping-nginx<br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2022-05-14T19:35:12+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/jumping-nginx/_data&quot;,<br>        &quot;Name&quot;: &quot;jumping-nginx&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>所有的docker容器内的卷，没有指定目录情况下都是在<span class = "label label-danger">/var/lib/docker/volumes/xxxx/_data</span></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">-v 容器内路径           # 匿名挂载<br>-v 卷名：容器内路径      # 具名挂载<br>-v 宿主机路径：容器内路径 # 指定路径挂载<br></code></pre></td></tr></table></figure><div class = "note note-success">拓展</div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 通过-v 容器内路径 ro rw 改变读写权限</span><br>ro         read only <br>rw         read write<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 只要有ro就说明这个路径只能通过宿主机来操作，容器内是无法操作的,默认都是rw</span><br>docker run -d -P --name nginx02 -v jumping-nginx:/etc/nginx:ro nginx<br>docker run -d -P --name nginx02 -v jumping-nginx:/etc/nginx:rw nginx<br></code></pre></td></tr></table></figure><h2 id="3-多个容器数据同步"><a href="#3-多个容器数据同步" class="headerlink" title="3. 多个容器数据同步"></a>3. 多个容器数据同步</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury dockerfile]# docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7<br><br>[root@Mercury dockerfile]# docker run -d -p 3310:3306  -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volume-from mysql01 mysql:5.7<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 以上</span><br></code></pre></td></tr></table></figure><p>容器之间的数据传递，数据卷容器的生命周期一直持续到容器停止使用为止，但如果持久化到了本地，便不会丢失</p><h1 id="六-DockerFile"><a href="#六-DockerFile" class="headerlink" title="六. DockerFile"></a>六. DockerFile</h1><h2 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1. 初识Docker"></a>1. 初识Docker</h2><p>介绍：</p><p>构建步骤</p><ol><li>编写dockerfile文件</li><li>docker build构建成为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像</li></ol><p>基础知识</p><p>每个关键字 （指令）都必须是大写字母</p><p>执行从上到下顺序执行</p><p># 表示注释</p><p>每一个指令都会创建提交一个新的镜像层，并提交</p><p><img src="https://img.mercuryblog.site/img/image-20220514195654277.png" alt="image-20220514195654277"></p><h2 id="2-dockerfile命令"><a href="#2-dockerfile命令" class="headerlink" title="2. dockerfile命令"></a>2. dockerfile命令</h2><ul><li><p>FROM 基础镜像，一切从这里构建</p></li><li><p>MAINTAINER  镜像是谁写的，姓名+邮箱</p></li><li><p>RUN 镜像构建的时候需要运行的命令</p></li><li><p>ADD 步骤，添加镜像内容</p></li><li><p>WORKDIR 镜像的工作目录</p></li><li><p>VOLUME 挂载的目录</p></li><li><p>EXPOSE 暴露端口</p></li><li><p>CMD 指定这个容器启动的时候需要的命令 只有最后一个会生效可以被替代</p></li><li><p>ENTRYPOINT 指定这个容器启动的时候需要的命令可以追加命令</p></li><li><p>ONBUILD 当构建一个被继承DockerFile 这个时候就会运行ONBUILD 的指令</p></li><li><p>COPY 类似ADD 将我们文件拷贝到镜像中</p></li><li><p>ENV 构建的时候设置环境变量</p></li></ul><p>通过这个脚本生成镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos<br><br><br>VOLUME [&quot;volume01&quot;, &quot;volume02 &quot;]<br><br><br>CMD echo &quot;-----end-----&quot;<br><br>CMD /bin/bash<br><br><br>docker build -f dockerfilel -t /kuangshen/centos .<br></code></pre></td></tr></table></figure><h2 id="3-构建一个自己的centos"><a href="#3-构建一个自己的centos" class="headerlink" title="3. 构建一个自己的centos"></a>3. 构建一个自己的centos</h2><p>从源码中可以发现dockerhub中大部分的镜像都是从scratch 过来的，然后配置需要的软件来进行构建</p><ol><li>编写一个dockerfile文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim mydockerfile-centos<br></code></pre></td></tr></table></figure><p>编写脚本安装 vim 和 net-tools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br><br>MAINTAINER chenning&lt;chenning_william@163.com&gt;<br><br><br>ENV MYPATH /usr/local<br><br>WORKDIR $MYPATH<br><br><br>RUN yum -y install vim<br><br>RUN yum -y install net-tools<br><br> <br>EXPOSE 80<br><br><br>CMD echo $MYPATH <br><br>CMD echo &quot;----end----&quot;<br><br>CMD /bin/bash<br></code></pre></td></tr></table></figure><p>2.build</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .<br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 成功后返回</span><br><br>Successfully built 76804282c147<br><br>Successfully tagged mycentos:0.1<br></code></pre></td></tr></table></figure><p>3.测试运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器</span><br>[root@4859366666ba local]# pwd<br>/usr/local<br>[root@4859366666ba local]# ifconfig<br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500<br>  inet 172.17.0.6 netmask 255.255.0.0 broadcast 172.17.255.255<br>  ether 02:42:ac:11:00:06 txqueuelen 0 (Ethernet)<br>  RX packets 0 bytes 0 (0.0 B)<br>  RX errors 0 dropped 0 overruns 0 frame 0<br>  TX packets 0 bytes 0 (0.0 B)<br>  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536<br>  inet 127.0.0.1 netmask 255.0.0.0<br>  loop txqueuelen 1000 (Local Loopback)<br>  RX packets 0 bytes 0 (0.0 B)<br>  RX errors 0 dropped 0 overruns 0 frame 0<br>  TX packets 0 bytes 0 (0.0 B)<br>  TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0<br><span class="hljs-meta">#</span><span class="bash"> 可以看到工作路径变成了  /usr/<span class="hljs-built_in">local</span> 而且ipconfig也能正常使用，说明成功了</span><br></code></pre></td></tr></table></figure><ol start="4"><li>我们可以列出变更的历史</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury dockerfile]# docker history 76804282c147<br>IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT<br>76804282c147   7 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B        <br>ef56285a896a   7 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        <br>f43334273bac   7 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        <br>9aee7126d86d   7 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        <br>ec21bf9df499   7 minutes ago   /bin/sh -c yum -y install net-tools             166MB     <br>61dc5db67561   7 minutes ago   /bin/sh -c yum -y install vim                   221MB     <br>95e5b666e6fc   8 minutes ago   /bin/sh -c #(nop) WORKDIR /usr/local            0B        <br>3febcbabfc09   8 minutes ago   /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B        <br>d08da42f9b1f   8 minutes ago   /bin/sh -c #(nop)  MAINTAINER chenning&lt;chenn…   0B        <br>eeb6ee3f44bd   8 months ago    /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        <br>&lt;missing&gt;      8 months ago    /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        <br>&lt;missing&gt;      8 months ago    /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB<br></code></pre></td></tr></table></figure><h2 id="4-CMD和ENTRYPOINT区别"><a href="#4-CMD和ENTRYPOINT区别" class="headerlink" title="4. CMD和ENTRYPOINT区别"></a>4. CMD和ENTRYPOINT区别</h2><p>CMD </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 编写dockerfile文件</span><br>[root@Mercury dockerfile]# vim dockerfile-cmd-test<br>FROM centos<br>CMD [&quot;ls&quot;,&quot;-a&quot;]<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 构建镜像</span><br>[root@Mercury dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest<br>[root@Mercury dockerfile]# docker run dd8e4401d47f   <br>...<br><span class="hljs-meta">#</span><span class="bash"> ls -a命令生效</span><br><br>[root@Mercury dockerfile]# docker run dd8e4401d47f -l<br>docker:error<br><span class="hljs-meta">#</span><span class="bash"> 但是如果追加命令docker run dd8e4401d47f -l 便会报错，因为-l取代了CMD [<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>]命令</span><br></code></pre></td></tr></table></figure><p>ENTRYPOINT</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 编写dockerfile文件</span><br>[root@Mercury dockerfile]# vim dockerfile-cmd-test<br>FROM centos<br>ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 构建镜像</span><br>[root@Mercury dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest<br>[root@Mercury dockerfile]# docker run dd8e4401d47f   <br>...<br><span class="hljs-meta">#</span><span class="bash"> ls -a命令生效</span><br><br>[root@Mercury dockerfile]# docker run dd8e4401d47f -l<br>...<br><span class="hljs-meta">#</span><span class="bash"> 如果追加命令docker run dd8e4401d47f -l 可以正常追加命令执行。</span><br></code></pre></td></tr></table></figure><h2 id="5-实战tomcat镜像"><a href="#5-实战tomcat镜像" class="headerlink" title="5. 实战tomcat镜像"></a>5. 实战tomcat镜像</h2><ol><li><p>准备tomcat jdk压缩包</p></li><li><p>编写Dockerfile  官方命名<span class = "label label-danger">Dockerfile</span></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br><br>MAINTAINER chenning&lt;chenning_william@163.com&gt;<br>COPY readme.txt /usr/local/readme.txt<br><br><br>ADD jdk-8u333-linux-x64.tar.gz /usr/local<br>ADD apache-tomcat-9.0.62.tar.gz /usr/local<br><br><br>RUN yum -y install vim<br><br>ENV MYPATH /usr/local<br>WORKDIR $MYPATH<br><br><br><br>ENV JAVA_HOME /usr/local/jdk1.8.0_333<br>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>ENV CATALINA_HONE /usr/local/apache-tomcat-9.0.62<br>ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.62<br>ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HONE/bin<br><br><br>EXPOSE 8080<br><br><br>CMD /usr/local/apache-tomcat-9.0.62/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.62/bin/logs/catalina.out<br></code></pre></td></tr></table></figure><ol start="3"><li>构建镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury tomcat]# docker build -t diytomcat .<br></code></pre></td></tr></table></figure><p><span class = "label label-danger">一定需要注意最后面有个点</span></p><ol start="4"><li>启动测试</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury tomcat]# docker run -d -p 9090:8080 --name mercurytomcat -v /home/tomcat/test:/usr/local/apache-tomcat-9.0.62/webapps/test -v /home/tomcat/tomcatlogs:/usr/local/apache-tomcat-9.0.62/logs diytomcat<br><br>[root@Mercury tomcat]# curl localhost:9090<br><br>&lt;!DOCTYPE html&gt;<br><br>&lt;html lang=&quot;en&quot;&gt;<br><br> &lt;head&gt;<br><br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br><br>  &lt;title&gt;Apache Tomcat/9.0.62&lt;/title&gt;<br><br>  &lt;link href=&quot;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-icon&quot; /&gt;<br><br>  &lt;link href=&quot;tomcat.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;<br><br> &lt;/head&gt;<br></code></pre></td></tr></table></figure><p>可以看到正常加载了，说明成功了,然后就可以在挂载的目录里面直接发布项目了</p><h2 id="6-发布自己的镜像"><a href="#6-发布自己的镜像" class="headerlink" title="6. 发布自己的镜像"></a>6. 发布自己的镜像</h2><h3 id="6-1-DockerHub"><a href="#6-1-DockerHub" class="headerlink" title="6.1 DockerHub"></a>6.1 DockerHub</h3><ol><li>登录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker login -u username<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury tomcat]# docker login -u 52hzmercury<br>Password: <br>WARNING! Your password will be stored unencrypted in /root/.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https://docs.docker.com/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br></code></pre></td></tr></table></figure><ol start="2"><li>更改项目名</li></ol><p>就是在前面加上自己的用户名后面家伙是那个版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker tag image-id 52hzmercury/diytomcat:1.0<br></code></pre></td></tr></table></figure><ol start="3"><li>推送</li></ol><p> 尽量带上版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker push 52hzmercury/diytomcat:1.0<br></code></pre></td></tr></table></figure><h3 id="6-2-阿里云"><a href="#6-2-阿里云" class="headerlink" title="6.2 阿里云"></a>6.2 阿里云</h3><p>官方文档里面写得非常的清楚</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker login --username=52hz的mercury registry.cn-hangzhou.aliyuncs.com</span><br><span class="hljs-meta">$</span><span class="bash"> docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/52hzmercury/mercury:[镜像版本号]</span><br><span class="hljs-meta">$</span><span class="bash"> docker push registry.cn-hangzhou.aliyuncs.com/52hzmercury/mercury:[镜像版本号]</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>docker的全部流程</p><p><img src="https://img.mercuryblog.site/img/image-20220515205955013.png" alt="image-20220515205955013"></p><h1 id="七-Docker网络"><a href="#七-Docker网络" class="headerlink" title="七. Docker网络"></a>七. Docker网络</h1><h2 id="1-初识docker网络"><a href="#1-初识docker网络" class="headerlink" title="1. 初识docker网络"></a>1. 初识docker网络</h2><p>首先我们知道通过ip addr 可以查看IP的相关信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# ip addr<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    link/ether 00:16:3e:12:a0:63 brd ff:ff:ff:ff:ff:ff<br>    inet 172.26.25.110/18 brd 172.26.63.255 scope global dynamic eth0<br>       valid_lft 312060333sec preferred_lft 312060333sec<br>3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default <br>    link/ether 02:42:15:a3:19:b8 brd ff:ff:ff:ff:ff:ff<br>    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0<br>       valid_lft forever preferred_lft forever<br>41: veth2731295@if40: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default <br>    link/ether ba:f3:19:6f:a2:7e brd ff:ff:ff:ff:ff:ff link-netnsid 0<br></code></pre></td></tr></table></figure><p>查看容器相关的ip信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker exec -it tomcat01 ip addr<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>42: eth0@if43: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default <br>    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0<br>    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>容器无法执行相关的指令，需要进入容器安装，执行<span class = "label label-danger">apt update &amp;&amp; apt install -y iproute2</span></p><p>发现eth0@if43地址,这就是docker分配的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# ping 172.17.0.2<br>PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.<br>64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.114 ms<br>64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.068 ms<br>64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.097 ms<br></code></pre></td></tr></table></figure><div class = "note note-success">原理</div><p>每启动一个docker容器 docker就会给docker容器分配一个ip 只要安装了docker 就会有一个网卡docker0桥接模式吗，使用的技术是evth-pair技术</p><p>容器带来的网卡都是一对一对的,evth-pair 就是一 对的虚拟设备接口，他们都是承兑出现的，一段连着协议，一段彼此相连</p><p>正因为有这个特性，evht-pair充当着桥梁 连接着各种虚拟网络设备启动容器后再次查看容器的ip信息，可以看到多了43这一行，并且后面信息跟着42</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# ip addr<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    link/ether 00:16:3e:12:a0:63 brd ff:ff:ff:ff:ff:ff<br>    inet 172.26.25.110/18 brd 172.26.63.255 scope global dynamic eth0<br>       valid_lft 312058161sec preferred_lft 312058161sec<br>3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default <br>    link/ether 02:42:15:a3:19:b8 brd ff:ff:ff:ff:ff:ff<br>    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0<br>       valid_lft forever preferred_lft forever<br>43: veth7a74e4d@if42: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default <br>    link/ether 9a:72:2b:67:26:e5 brd ff:ff:ff:ff:ff:ff link-netnsid 0<br></code></pre></td></tr></table></figure><p>再启动一个tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker run -d -P --name tomcat02 tomcat<br>3bbabab9c34a800b7663746f07f2ed9ed27aa292d291cfd6bbb4b5a5e0675899<br>[root@Mercury ~]# ip addr<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    link/ether 00:16:3e:12:a0:63 brd ff:ff:ff:ff:ff:ff<br>    inet 172.26.25.110/18 brd 172.26.63.255 scope global dynamic eth0<br>       valid_lft 312058079sec preferred_lft 312058079sec<br>3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default <br>    link/ether 02:42:15:a3:19:b8 brd ff:ff:ff:ff:ff:ff<br>    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0<br>       valid_lft forever preferred_lft forever<br>43: veth7a74e4d@if42: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default <br>    link/ether 9a:72:2b:67:26:e5 brd ff:ff:ff:ff:ff:ff link-netnsid 0<br>45: vethccc3ec9@if44: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default <br>    link/ether ce:6b:95:66:9e:f8 brd ff:ff:ff:ff:ff:ff link-netnsid 1<br></code></pre></td></tr></table></figure><p>测试tomcat01 ping tomcat02是可以ping通的，原理就是下面这张图</p><p><img src="https://img.mercuryblog.site/img/image-20220517161020371.png" alt="image-20220517161020371"></p><h2 id="2-容器互联-–link"><a href="#2-容器互联-–link" class="headerlink" title="2. 容器互联 –link"></a>2. 容器互联 –link</h2><p>再来一个容器,把它和tomcat02连接起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -P --name tomcat03 --link tomcat02 tomcat<br></code></pre></td></tr></table></figure><div class = "note note-danger">如果没提示有ping命令</div><p>在容器内执行 apt-get update &amp;&amp; apt-get install iputils-ping</p><p>再ping一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker exec -it tomcat03 ping tomcat02<br>PING tomcat02 (172.17.0.3) 56(84) bytes of data.<br>64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.182 ms<br>64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.081 ms<br>64 bytes from tomcat02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.135 ms<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 可以看到是ping通的</span><br></code></pre></td></tr></table></figure><p>反向来一下子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker exec -it tomcat02 ping tomcat03<br>ping: tomcat03: Name or service not known<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">ping 不通</span><br></code></pre></td></tr></table></figure><p>我们来看一下tomcat03的容器配置，可以看到tomcat03在本地配置了tomcat02的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker exec -it tomcat03 cat /etc/hosts<br>127.0.0.1localhost<br>::1localhost ip6-localhost ip6-loopback<br>fe00::0ip6-localnet<br>ff00::0ip6-mcastprefix<br>ff02::1ip6-allnodes<br>ff02::2ip6-allrouters<br>172.17.0.3tomcat02 3bbabab9c34a      #在这里配置了tomcat02的连接<br>172.17.0.476e0fe012ef9<br></code></pre></td></tr></table></figure><p>再来看看tomcat02的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@Mercury ~]# docker exec -it tomcat02 cat /etc/hosts<br>127.0.0.1localhost<br>::1localhost ip6-localhost ip6-loopback<br>fe00::0ip6-localnet<br>ff00::0ip6-mcastprefix<br>ff02::1ip6-allnodes<br>ff02::2ip6-allrouters<br>172.17.0.33bbabab9c34a<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 并没有配置</span><br></code></pre></td></tr></table></figure><p>因此反向是ping不通的</p><h2 id="3-网络模式"><a href="#3-网络模式" class="headerlink" title="3. 网络模式"></a>3. 网络模式</h2><ul><li>bridge: 桥接 docker默认</li><li>none 不配置网络</li><li>host 和容器共享网络</li><li>container 容器网络联通</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看所有docker网络</span><br>[root@Mercury ~]# docker network ls<br>NETWORK ID  NAME  DRIVER SCOPE<br>210f490ac0f5 bridge bridge local<br>6c94eae8c3c6 host  host  local<br>8a937df872e9 none  null  local<br></code></pre></td></tr></table></figure><p>自定义网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet<br></code></pre></td></tr></table></figure><p>网络和容器联通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network connect mynet tomcat01<br></code></pre></td></tr></table></figure><p>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=END<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=<del>=</del>=</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2022/04/23/Ajax/"/>
    <url>/2022/04/23/Ajax/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">     <div>前言：</div>     <ul>         <div>             根据狂神视频以及教学ppt整理         </div>     <ul></div><h1 id="AJax"><a href="#AJax" class="headerlink" title="AJax"></a>AJax</h1><p>Ajax 全程 Asynchronous JavaScript and XML 即 异步的JavaScript 和XML，AJax是一种无需重新加载整个网页的情况下，能够更新部分网页的技术，AJax不是一种的编程语言，而是一种用于创建更好更快以及更强的Web应用的技术</p><p>在2005年，Google Suggest使用AJax 创建出动态性极强的web界面：当你在谷歌的搜索框输入关键字时，JavaScript会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p><div class = "note note-warning">注意:</div><p>AJax需要引入JQuery</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    /*<br>       所有的参数：<br>                url: 待载入页面的URL地址(必填)<br>                data: 待发送的 key/value 参数<br>                success: 载入成功时的回调函数<br>                 data: 请求返回的数据<br>                 status: 请求返回的状态<br>    <br>    */<br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $.ajax(&#123;                         <span class="hljs-comment">//Ajax 默认是get请求，若想改为post，将这里改为$.post 即可</span></span><br><span class="javascript">                <span class="hljs-attr">url</span> :<span class="hljs-string">&quot;&quot;</span>,                     <span class="hljs-comment">//必填</span></span><br><span class="javascript">                <span class="hljs-attr">data</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>:$(<span class="hljs-string">&quot;#textName&quot;</span>).val()&#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span> :<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data,status</span>)</span>&#123;</span><br><span class="javascript">                    alert(data);</span><br><span class="javascript">                    alert(success);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">           </span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;textname&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="两个实例"><a href="#两个实例" class="headerlink" title="两个实例"></a>两个实例</h2><h3 id="获取数据嵌入到html中"><a href="#获取数据嵌入到html中" class="headerlink" title="获取数据嵌入到html中"></a>获取数据嵌入到html中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;获取数据&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    $(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;      <span class="hljs-comment">//如果click事件写在这里前面需要加上$(document).ready(function()&#123;&#125;)</span></span><br><span class="javascript">        $.post(&#123;</span><br><span class="javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> html = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="javascript">                    html +=<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>+</span><br><span class="javascript">                       <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+ data[i].name+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+data[i].age+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+data[i].sex+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span><br><span class="javascript">                           <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span> </span><br><span class="javascript">                &#125;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#content&quot;</span>).html(html);    <span class="hljs-comment">//最后将html塞入到页面中</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">          &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    &#125;)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $.post(&#123;</span><br><span class="javascript">                <span class="hljs-attr">url</span> :<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>: &#123;<span class="hljs-string">&quot;pwd&quot;</span>:$(<span class="hljs-string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span> :<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(data.toString()==<span class="hljs-string">&#x27;ok&#x27;</span>)&#123;</span><br><span class="javascript">                        $(<span class="hljs-string">&quot;#userinfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        $(<span class="hljs-string">&quot;#userinfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#userinfo&quot;</span>).html(data);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;textname&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a2()&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;userinfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="考试的真题"><a href="#考试的真题" class="headerlink" title="考试的真题"></a>考试的真题</h3><p>第一个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>产品录入<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/input.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#search</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first</span>-child&#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: right;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#submit</span> <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">268px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#submit input&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                 <span class="hljs-keyword">var</span> searchText = $(<span class="hljs-string">&quot;#search input&quot;</span>).val();</span><br><span class="javascript">                 <span class="hljs-keyword">if</span>(searchText === <span class="hljs-string">&quot;&quot;</span>)&#123;</span><br><span class="javascript">                     $(<span class="hljs-string">&quot;#error&quot;</span>).text(<span class="hljs-string">&quot;产品名称必须输入&quot;</span>);</span><br><span class="javascript">                     $(<span class="hljs-string">&quot;#error&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;#ff0000&quot;</span>);</span><br><span class="javascript">                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;\\d&quot;</span>).test(searchText))&#123;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#error&quot;</span>).text(<span class="hljs-string">&quot;产品名称中不能有数字&quot;</span>)</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#error&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;#ff0000&quot;</span>);</span><br><span class="javascript">                 &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                     <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;product.html&quot;</span>; <span class="hljs-comment">//使用js跳转，类似a标签</span></span><br><span class="javascript">                 &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>产品名称<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入产品名称&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;录入&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>产品<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">table</span>, <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">td</span></span><br><span class="css">        &#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">tr</span> <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">tr</span> <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#00ff00</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">tr</span>&gt;<span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>)&#123;</span><br><span class="css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffffd0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#search&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                $.post(&#123;</span><br><span class="javascript">                    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://47.108.14.103:8001/getProduct&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:$(<span class="hljs-string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="javascript">                    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//document.write(JSON.stringify(data));</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> html = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">                        html+=<span class="hljs-string">&quot;&lt;table &gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;品牌&lt;/td&gt; &lt;td&gt;型号&lt;/td&gt; &lt;td&gt;价格&lt;/td&gt;&lt;/tr&gt;&quot;</span></span><br><span class="javascript">                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;data.data.length;i++)&#123; <span class="hljs-comment">//因为是嵌套的。所以需要再.解析访问</span></span><br><span class="javascript">                           <span class="hljs-comment">// alert(data.data[i].image)</span></span><br><span class="javascript">                            html+=<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;img src=&#x27;http://47.108.14.103:8001/img/&quot;</span>+data.data[i].image+<span class="hljs-string">&quot;&#x27; width=&#x27;100px&#x27; height=&#x27;100px&#x27;&gt;&lt;/td&gt;&lt;td&gt;&quot;</span>+data.data[i].brand+<span class="hljs-string">&quot;&lt;/td&gt; &lt;td&gt;&lt;a href=&#x27;http://47.108.14.103:8001/img/&quot;</span>+data.data[i].image+<span class="hljs-string">&quot;&#x27; target=&#x27;_blank&#x27;&gt;&quot;</span>+data.data[i].model+<span class="hljs-string">&quot;&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&quot;</span>+data.data[i].price+<span class="hljs-string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                        html+=<span class="hljs-string">&quot;&lt;/table&gt;&quot;</span></span><br><span class="javascript">                        $(<span class="hljs-string">&quot;#product&quot;</span>).html(html);</span><br><span class="javascript"></span><br><span class="javascript">                    &#125;</span><br><span class="javascript"></span><br><span class="javascript">                &#125;)</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入产品名称&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;product&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery</title>
    <link href="/2022/04/22/jQuery/"/>
    <url>/2022/04/22/jQuery/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="导入jQuery"><a href="#导入jQuery" class="headerlink" title="导入jQuery"></a>导入jQuery</h2><p>导入在线的 或者本地的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">//在线引用<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;某某在线引用网址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>//本地引用<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;文件的目录&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-1.11.2.js&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>//仔细一想这不是智障吗，我为什么还要拎出来写<br></code></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>$(“p”)是用于选择网页中所有的p元素；</p><p>$(“p”).click()方法指定选中的<code>&lt;p&gt;</code>元素的click单击事件处理函数</p><p>$(this)是一个 jQuery对象，表示当前引用的HTML元素对象（此处指p元素）。</p><p>$(this).hide()表示选中当前的HTML元素，并将其隐藏。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(selector).action() <span class="hljs-comment">//这个就是jQuery最核心的内容</span><br></code></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p>ID选择器可以根据指定ID值返回一个唯一的元素，下面主要就是这个公式的具体应用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;test-jqery&quot;</span>&gt;</span>牛逼<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&quot;#test-jqery&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//id选择器就是在前面加上一个#</span></span><br><span class="javascript">            alert(<span class="hljs-string">&quot;hello jqery&quot;</span>)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;p&quot;</span>).click();<br></code></pre></td></tr></table></figure><p>选择所有的p标签</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器可以根据元素的CSS类选择一组元素。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.left&quot;</span>)               <span class="hljs-comment">//为选择页面中所有的class属性为left的元素；</span><br><br>$(<span class="hljs-string">&quot;p.left&quot;</span>)              <span class="hljs-comment">//为选择页面中所有的class为left的p元素。</span><br></code></pre></td></tr></table></figure><h3 id="祖先后代选择器"><a href="#祖先后代选择器" class="headerlink" title="祖先后代选择器"></a>祖先后代选择器</h3><p>祖先后代选择器中祖先和后代选择符之间使用空格隔开，不限制嵌套层次数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.left p&quot;</span>) <br><br>$(<span class="hljs-string">&quot;form input&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="父子选择器"><a href="#父子选择器" class="headerlink" title="父子选择器"></a>父子选择器</h3><p>父子选择器的父元素和子元素之间使用符号“&gt;”隔开，前后元素的嵌套关系只能是一层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div &gt; ul&quot;</span>)       <span class="hljs-comment">//为选择div元素内直接嵌套的ul元素。</span><br></code></pre></td></tr></table></figure><div class = "note note-info">父子选择器和祖先后代选择器的区别</div><p>父子选择器的父元素和子元素之间使用符号“&gt;”隔开，前后元素的嵌套关系只能是一层。</p><p>祖先后代选择器中祖先和后代选择符之间使用空格隔开，不限制嵌套层次数。</p><h3 id="前后选择器"><a href="#前后选择器" class="headerlink" title="前后选择器"></a>前后选择器</h3><p>前后选择器可以选择某元素的下一个同级兄弟元素</p><p>前后元素中间使用“+”分隔，选择在某元素后面的next元素，相当于next()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#my+img&quot;</span>)              <span class="hljs-comment">//是选择id为my的元素后的第一个同级别img元素，相当于</span><br><br>$(<span class="hljs-string">&quot;#my&quot;</span>).next(<span class="hljs-string">&quot;img&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>:contains(text)</td><td>匹配包含给定文本的元素</td></tr><tr><td>:has(selector)</td><td>匹配含有选择器所匹配的元素的元素</td></tr><tr><td>:empty()</td><td>匹配所有不包含子元素或者文本的空元素</td></tr><tr><td>:parent()</td><td>匹配含有子元素或者文本的元素，与:empty()相反</td></tr></tbody></table><h3 id="可见性过滤器"><a href="#可见性过滤器" class="headerlink" title="可见性过滤器"></a>可见性过滤器</h3><p>可见性过滤器可以根据元素的可见性进行选择，可见性过滤器包括:hidden和:visible。</p><p>其中可见选择器“:hidden”不仅包含样式属性 display 为 none 的元素, 也包含文本隐藏域 （<code>&lt;input type=&quot;hidden&quot;&gt;</code>）和visible:hidden之类的元素；</p><p>可见选择器“:visible”可以匹配所有可见的元素。</p><h3 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h3><p>属性过滤选择器的过滤规则是通过元素的属性来获取相应的元素</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>[attribute]</td><td>匹配包含给定属性的元素</td></tr><tr><td>[attribute=value]</td><td>匹配给定属性为特定值的元素</td></tr><tr><td>[attribute!=value]</td><td>匹配给定属性不等于特定值的元素</td></tr><tr><td>[attribute^=value]</td><td>匹配给定属性是以特定值开头的元素</td></tr><tr><td>[attribute$=value]</td><td>匹配给定属性是以特定值结尾的元素</td></tr><tr><td>[attribute*=value]</td><td>匹配给定属性包含特定值的元素</td></tr><tr><td>[attributeFilter1]  [attributeFilter2] …</td><td>复合属性选择器，匹配属性同时满足多个条件的元素</td></tr></tbody></table><h3 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h3><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>:first-child</td><td>获取第一个子元素</td></tr><tr><td>:last-child</td><td>获取最后一个子元素</td></tr><tr><td>:nth-child(index|even|eq|odd)</td><td>通过相关指数获取子元素</td></tr><tr><td>:only-child</td><td>获取子元素唯一的元素</td></tr></tbody></table><h2 id="获取或设置HTML元素的内容"><a href="#获取或设置HTML元素的内容" class="headerlink" title="获取或设置HTML元素的内容"></a>获取或设置HTML元素的内容</h2><p>如果要获取HTML元素的内容，其语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> htmlStr= $(selector).html();<br></code></pre></td></tr></table></figure><p>如果要设置HTML元素的内容，其语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(selector).html(<span class="hljs-string">&quot;修改字符串&quot;</span>);<br></code></pre></td></tr></table></figure><table><thead><tr><th>方    法</th><th>说     明</th></tr></thead><tbody><tr><td>$(selector).text()</td><td>用于返回或设置元素的文本内容；</td></tr><tr><td>$(selector).html()</td><td>用于返回或设置元素的内容（包括HTML标记在内）；</td></tr><tr><td>$(selector).val()</td><td>用于返回或设置表单字段的值；</td></tr></tbody></table><h2 id="jQuery常用事件"><a href="#jQuery常用事件" class="headerlink" title="jQuery常用事件"></a>jQuery常用事件</h2><table><thead><tr><th>事件函数</th><th>说   明</th></tr></thead><tbody><tr><td>$(“选择器”).click()</td><td>鼠标单击触发事件，参数可选（data，function）</td></tr><tr><td>$(“选择器”).dblclick()</td><td>双击触发，同上</td></tr><tr><td>$(“选择器”).mousedown()/mouseup()</td><td>鼠标按下/弹起触发事件</td></tr><tr><td>$(“选择器”).mousemove()</td><td>鼠标移动事件</td></tr><tr><td>$(“选择器”).mouseover()/mouseout()</td><td>鼠标移入/移出触发事件</td></tr><tr><td>$(“选择器”).mouseenter()/mouseleave()</td><td>鼠标进入/离开触发事件*</td></tr><tr><td>$(“选择器”).hover(func1,func2)</td><td>鼠标移入调用func1函数，移出调用func2函数</td></tr><tr><td>$(“选择器”).focusin()</td><td>鼠标聚焦到该元素时触发事件</td></tr><tr><td>$(“选择器”).focusout()</td><td>鼠标失去焦点时触发事件</td></tr><tr><td>$(“选择器”).focus()/.blur()</td><td>鼠标聚焦/失去焦点触发事件（不支持冒泡）</td></tr><tr><td>$(“选择器”).change()</td><td>表单元素发生改变时触发事件</td></tr><tr><td>$(“选择器”).select()</td><td>文本元素被选中时触发事件</td></tr><tr><td>$(“选择器”).submit()</td><td>表单提交动作触发*</td></tr><tr><td>$(“选择器”).keydown()/keyup()</td><td>键盘按键按下/弹起触发</td></tr><tr><td>$(“选择器”).keypress()</td><td>键盘按下过程中触发</td></tr></tbody></table><h2 id="jQuery显示与隐藏"><a href="#jQuery显示与隐藏" class="headerlink" title="jQuery显示与隐藏"></a>jQuery显示与隐藏</h2><p>在jQuery中使用show()方法显示，hide()方法进行隐藏。</p><p>其语法格式如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;选择器&quot;</span>).hide(speed,callback)<br><br>$(<span class="hljs-string">&quot;选择器&quot;</span>).show(speed,callback)<br></code></pre></td></tr></table></figure><h2 id="jQuery淡入与淡出"><a href="#jQuery淡入与淡出" class="headerlink" title="jQuery淡入与淡出"></a>jQuery<strong>淡入</strong>与淡出</h2><p>fadeIn()：用于淡入已隐藏的元素；</p><p>fadeOut()：用于淡出可见元素；</p><p>fadeToggle()：可以在 fadeIn() 与 fadeOut() 方法之间进行切换；</p><p>fadeTo()：允许渐变到指定的不透明度</p><h2 id="jQuery向上或向下滑动"><a href="#jQuery向上或向下滑动" class="headerlink" title="jQuery向上或向下滑动"></a>jQuery向上或向下滑动</h2><p>slideUp()用于向上滑动元素</p><p>slideDown()方法用于向下滑动元素</p><p>调用方法分别为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(selector).slideUp(speed,[callback])<br><br>$(selector).slideDown(speed,[callback])<br></code></pre></td></tr></table></figure><h2 id="jQuery简单动画"><a href="#jQuery简单动画" class="headerlink" title="jQuery简单动画"></a>jQuery简单动画</h2><p>自定义动画的语法定义格式如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">animate(params,speed,callback)<br></code></pre></td></tr></table></figure><p><strong>停止动画</strong></p><p>网页中有时需要停止匹配元素正在进行的动画，这时要使用停止元素的动画方法stop()，其语法结构形式如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">stop([clearQueue],[gotoEnd])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github加速</title>
    <link href="/2022/04/13/github%E5%8A%A0%E9%80%9F/"/>
    <url>/2022/04/13/github%E5%8A%A0%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<p class="note note-success">前言</p><p>由于众所周知的原因，全球最大的同性交友网站github在国内的连接十分的不稳定，因此十分不方便交到我们交友，经常在推送和下载仓库时断线或者连接超时，这篇博文就是用来解决这个问题(下载和clone仓库时加速)，通过修改系统hosts文件，绕过国内dns解析，直接访问GitHub的CDN节点，从而达到加速的目的.</p><h2 id="查询github的地址"><a href="#查询github的地址" class="headerlink" title="查询github的地址"></a>查询github的地址</h2><p>查询的地址链接   <a href = "https://www.ipaddress.com/">https://www.ipaddress.com/</a></p><p>在此网站查询以下三个网址的ip</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">github<span class="hljs-selector-class">.com</span> <br>assets-cdn<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span> <br>github<span class="hljs-selector-class">.global</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.fastly</span>.net<br></code></pre></td></tr></table></figure><p>由于时间不同查询到的IP可能不同</p><h2 id="修改host文件"><a href="#修改host文件" class="headerlink" title="修改host文件"></a>修改host文件</h2><h3 id="host在windows的路径"><a href="#host在windows的路径" class="headerlink" title="host在windows的路径"></a>host在windows的路径</h3><blockquote><p>C:\Windows\System32\drivers\etc</p></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">140.82.112.3</span>    github.com<br><span class="hljs-number">185.199.109.153</span>    assets-cdn.github.com<br><span class="hljs-number">199.232.69.194</span>    github.global.ssl.fastly.net<br></code></pre></td></tr></table></figure><p>在文件最下面加上上面这三行，前面的IP就是上一步里面你查询的IP，然后保存退出</p><h2 id="刷新DNS缓存"><a href="#刷新DNS缓存" class="headerlink" title="刷新DNS缓存"></a>刷新DNS缓存</h2><p>在windows中打开 powershell </p><p>输入命令 <strong>ipconfig /flushdns</strong></p><p>成功刷新后就全部完成了，推送的时候终于不会掉线超时了。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题杂谈</title>
    <link href="/2022/04/07/perpare/"/>
    <url>/2022/04/07/perpare/</url>
    
    <content type="html"><![CDATA[<h2 id="一些常用的eclipse的快捷键"><a href="#一些常用的eclipse的快捷键" class="headerlink" title="一些常用的eclipse的快捷键"></a>一些常用的eclipse的快捷键</h2><p>ctrl+shift+o   快速导包</p><p>ctrl+alt+down  快速把当前行复制到下一行</p><h1 id="常用代码"><a href="#常用代码" class="headerlink" title="常用代码"></a>常用代码</h1><h3 id="交叉排序"><a href="#交叉排序" class="headerlink" title="交叉排序"></a>交叉排序</h3><p>关于Comparator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(a, l1, r1 + <span class="hljs-number">1</span>);<br>Arrays.sort(a, l2, r2 + <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> o2-o1;<br>&#125;<br><span class="hljs-comment">//实现数组倒序排序</span><br>&#125;);<br><br>Collections.sort(list, <span class="hljs-keyword">new</span> Comparator&lt;Dog&gt;() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Dog o1, Dog o2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o1.name.compareTo(o2.name);<br>          <span class="hljs-comment">/*  如果参数字符串等于此字符串，则返回值 0；</span><br><span class="hljs-comment">              如果此字符串小于字符串参数，则返回一个小于 0 的值；</span><br><span class="hljs-comment">              如果此字符串大于字符串参数，则返回一个大于 0 的值。</span><br><span class="hljs-comment">          */</span><br>        &#125;<br>    &#125;);<br>    System.out.println(<span class="hljs-string">&quot;给狗狗按名字字母顺序排序：&quot;</span>+list);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> b == <span class="hljs-number">0</span> ? a : gcd(b, a % b);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="获取所有因数的算法"><a href="#获取所有因数的算法" class="headerlink" title="获取所有因数的算法"></a>获取所有因数的算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> i=<span class="hljs-number">1</span>;i&lt;=Math.sqrt(n);i++)&#123;<br>    <span class="hljs-comment">//通过求一半，减少复杂度</span><br><span class="hljs-keyword">if</span>(n%i == <span class="hljs-number">0</span>)&#123;<br>a1.add(i);<br><span class="hljs-keyword">if</span>(n != i*i)&#123;<br>                    <span class="hljs-comment">//这里其实也可以不要，但是最好写上</span><br>a1.add(n/i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="excel算日期"><a href="#excel算日期" class="headerlink" title="excel算日期"></a>excel算日期</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">=<span class="hljs-built_in">DATEDIF</span>(<span class="hljs-symbol">A1</span>,<span class="hljs-symbol">A2</span>,<span class="hljs-string">&quot;d&quot;</span>) //日期之差<br>=<span class="hljs-built_in">DATEDIF</span>(<span class="hljs-symbol">A1</span>,<span class="hljs-symbol">A2</span>,<span class="hljs-string">&quot;m&quot;</span>) //月份之差<br>=<span class="hljs-built_in">DATEDIF</span>(<span class="hljs-symbol">A1</span>,<span class="hljs-symbol">A2</span>,<span class="hljs-string">&quot;y&quot;</span>) //年之差<br>=<span class="hljs-symbol">A1</span>-<span class="hljs-number">30</span> 日期加减<br></code></pre></td></tr></table></figure><h3 id="斐波拉契"><a href="#斐波拉契" class="headerlink" title="斐波拉契"></a>斐波拉契</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">static <span class="hljs-built_in">int</span> <span class="hljs-constructor">Fbo(<span class="hljs-params">long</span> <span class="hljs-params">n</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span><span class="hljs-pattern-match"><span class="hljs-operator">||</span>n<span class="hljs-operator">==</span>2) &#123;</span><br><span class="hljs-pattern-match">    return 1;</span><br><span class="hljs-pattern-match">    &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="hljs-pattern-match">    return <span class="hljs-constructor">Fbo(<span class="hljs-params">n</span>-1)</span>+<span class="hljs-constructor">Fbo(<span class="hljs-params">n</span>-2)</span>;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="斐波拉契公约数"><a href="#斐波拉契公约数" class="headerlink" title="斐波拉契公约数"></a>斐波拉契公约数</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">gcd(<span class="hljs-name">f</span>(<span class="hljs-name">n</span>),f(<span class="hljs-name">m</span>)) = f(<span class="hljs-name">gcd</span>(<span class="hljs-name">n</span>,m))<br></code></pre></td></tr></table></figure><h3 id="使用hasNextInt"><a href="#使用hasNextInt" class="headerlink" title="使用hasNextInt"></a>使用hasNextInt</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><br><span class="hljs-keyword">if</span>(sc.hasNextInt()) &#123;<br><span class="hljs-built_in">int</span> countA  = sc.nextInt()<span class="hljs-comment">;</span><br><br><span class="hljs-built_in">break</span><span class="hljs-comment">;</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>sc.<span class="hljs-keyword">next</span>()<span class="hljs-comment">;</span><br>                &#125;<br><br>&#125;//如果需要hasNextInt用来判断需要 .<span class="hljs-keyword">next</span> 用来吃缓存<br></code></pre></td></tr></table></figure><h3 id="字符相关"><a href="#字符相关" class="headerlink" title="字符相关"></a>字符相关</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">char</span> b<span class="hljs-literal">[]</span> = data.<span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>;<br><br>使用这个方法将字符串转换为<span class="hljs-built_in">char</span>数组，方便遍历<br><br>num.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>-<span class="hljs-character">&#x27;0&#x27;</span><br><br>关于ascall码中字符数字转换为数字<br><br><br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;num.length<span class="hljs-literal">()</span>-<span class="hljs-number">1</span>;i++) &#123;<br><span class="hljs-comment">//如果式子里面有i+1这种操作，一定要记住不要遍历完，不然会越界</span><br><br><span class="hljs-keyword">if</span>((num.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>-<span class="hljs-character">&#x27;0&#x27;</span>)*<span class="hljs-number">10</span>+(num.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>+1)</span>-<span class="hljs-character">&#x27;0&#x27;</span>)&gt;<span class="hljs-number">26</span>) &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print((<span class="hljs-built_in">char</span>)((num.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>-<span class="hljs-character">&#x27;0&#x27;</span>)+<span class="hljs-number">64</span>));<br><br><br></code></pre></td></tr></table></figure><h3 id="dfs"><a href="#dfs" class="headerlink" title="dfs"></a>dfs</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>],book[<span class="hljs-number">10</span>],n;<br><span class="hljs-comment">//这里还有需要注意的地方C语言全局变量默认为0</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> step)</span></span>&#123; <span class="hljs-comment">//此时在第step盒子面前，需要往里面放第i张扑克牌</span><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">if</span>(step==n+<span class="hljs-number">1</span>)&#123;    <span class="hljs-comment">//这里说明前面的n个盒子已经放好了，这是dfs结束的标志 </span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> ;<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">注意这个 return 它的作用不是返回主函数，而是返回上一级的dfs函数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">例：如果此时是  dfs(5),遇到这个 return 就会回到上一级的 dfs函数 </span><br><span class="hljs-comment">也就是dfs(4),但此时dfs(4)的大部分语句已经执行了，只需要接着执行 book[i]=0</span><br><span class="hljs-comment">然后继续进入for循环进入下一次的 dfs函数，直到结束。 </span><br><span class="hljs-comment">*/</span> <br><br>&#125;<br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(book[i]==<span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//说明i号扑克牌还在手里，需要放入step号盒子</span><br>a[step]=i;<span class="hljs-comment">//将i号扑克牌放到第step个盒子中</span><br>book[i]=<span class="hljs-number">1</span>;<span class="hljs-comment">//此时i号扑克牌已经被使用</span><br><span class="hljs-built_in">dfs</span>(step+<span class="hljs-number">1</span>);<br><span class="hljs-comment">/*注意这里是自己调用自己，表示此时走到了第step+1个盒子面前*/</span><br>book[i]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">/*book[i]=0表示dfs调用结束了，换句话说就是扑克牌已经全部放完了</span><br><span class="hljs-comment">  需要按照顺序将扑克牌收回，重新放，也就是前面所说的</span><br><span class="hljs-comment"> */</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>;<span class="hljs-comment">//这里表示这一级别的dfs函数已经结束了，返回上一级 dfs函数 </span><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);   <span class="hljs-comment">//dfs函数的开始 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br><span class="hljs-keyword">public</span> class BFS &#123;<br>    <span class="hljs-comment">//存放节点关系的hashtable</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> bfs(<span class="hljs-keyword">HashMap</span>&lt;Character, LinkedList&lt;Character&gt;&gt; graph, <span class="hljs-keyword">HashMap</span>&lt;Character, Integer&gt; <span class="hljs-built_in">dist</span>, Character s) &#123;<br>        <span class="hljs-comment">//建立队列</span><br>        Queue&lt;Character&gt; q = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-comment">//给定起始节点</span><br>        Character start = s;<br>        <span class="hljs-comment">//起始节点放到距离表中</span><br>        <span class="hljs-built_in">dist</span>.put(start, <span class="hljs-number">0</span>);<br>        ((LinkedList&lt;Character&gt;) q).<span class="hljs-built_in">add</span>(start);<br>        <span class="hljs-comment">//遍历,一定要取出栈顶节点再加入</span><br>        <span class="hljs-keyword">while</span> (q != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//取出栈顶节点和栈顶节点到起始节点的距离</span><br>            Character poll = q.poll();<br>            <span class="hljs-keyword">if</span>(poll == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            Integer distance = <span class="hljs-built_in">dist</span>.<span class="hljs-built_in">get</span>(poll);<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;节点&quot;</span> + poll + <span class="hljs-string">&quot;到起始节点&quot;</span> + start + <span class="hljs-string">&quot;的距离为&quot;</span> + distance);<br>            distance++;<br>            <span class="hljs-comment">//将邻接节点加入</span><br>            <span class="hljs-keyword">for</span> (Character c : graph.<span class="hljs-built_in">get</span>(poll)) &#123;<br>                <span class="hljs-comment">//如果没遍历过这个节点,加入到队列和距离表中</span><br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dist</span>.containsKey(c)) &#123;<br>                    <span class="hljs-built_in">dist</span>.put(c, distance);<br>                    q.offer(c);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br>核心代码<br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 广度优先搜索 </span><br><span class="hljs-comment"> * @param Vs 起点 </span><br><span class="hljs-comment"> * @param Vd 终点 </span><br><span class="hljs-comment"> */</span> <br>bool BFS(Node&amp; Vs, Node&amp; Vd)&#123;  <br>    queue&lt;node&gt; Q;  <br>    Node Vn, Vw;  <br>    <span class="hljs-built_in">int</span> i;  <br>   <br>    <span class="hljs-comment">//初始状态将起点放进队列Q  </span><br>    Q.push(Vs);  <br>    hash(Vw) = <span class="hljs-keyword">true</span>;<span class="hljs-comment">//设置节点已经访问过了！  </span><br>   <br>    <span class="hljs-keyword">while</span> (!Q.empty())&#123;<span class="hljs-comment">//队列不为空，继续搜索！  </span><br>        <span class="hljs-comment">//取出队列的头Vn  </span><br>        Vn = Q.front();  <br>   <br>        <span class="hljs-comment">//从队列中移除  </span><br>        Q.pop();  <br>   <br>        <span class="hljs-keyword">while</span>(Vw = Vn通过某规则能够到达的节点)&#123;  <br>            <span class="hljs-keyword">if</span> (Vw == Vd)&#123;<span class="hljs-comment">//找到终点了！  </span><br>                <span class="hljs-comment">//把路径记录，这里没给出解法  </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//返回  </span><br>            &#125;  <br>   <br>            <span class="hljs-keyword">if</span> (isValid(Vw) &amp;&amp; !visit[Vw])&#123;  <br>                <span class="hljs-comment">//Vw是一个合法的节点并且为白色节点  </span><br>                Q.push(Vw);<span class="hljs-comment">//加入队列Q  </span><br>                hash(Vw) = <span class="hljs-keyword">true</span>;<span class="hljs-comment">//设置节点颜色  </span><br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<span class="hljs-comment">//无解  </span><br>&#125;  &lt;/node&gt;<br></code></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span>                    <span class="hljs-comment">//查找我（x）的掌门</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> r=x;                      <span class="hljs-comment">//委托 r 去找掌门</span><br>    <span class="hljs-keyword">while</span> (pre[r ]!=r)           <span class="hljs-comment">//如果r的上级不是r自己（也就是说找到的大侠他不是掌门 = =）</span><br>    r=pre[r ] ;                 <span class="hljs-comment">// r 就接着找他的上级，直到找到掌门为止。</span><br>    <span class="hljs-keyword">return</span>  r ;                <span class="hljs-comment">//掌门驾到~~~</span><br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span>          <span class="hljs-comment">//我想让虚竹和周芷若做朋友</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fx=<span class="hljs-built_in">find</span>(x),fy=<span class="hljs-built_in">find</span>(y);         <span class="hljs-comment">//虚竹的老大是玄慈，芷若MM的老大是灭绝</span><br>    <span class="hljs-keyword">if</span>(fx!=fy)                         <span class="hljs-comment">//玄慈和灭绝显然不是同一个人</span><br>    pre[fx ]=fy;                       <span class="hljs-comment">//方丈只好委委屈屈地当了师太的手下啦</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="大数"><a href="#大数" class="headerlink" title="大数"></a>大数</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>大数相关知识点<br><span class="hljs-regexp">//</span>https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/qfikh/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">52832196</span><br><br>        BigInteger sum = BigInteger.ZERO;<br>        <span class="hljs-regexp">//</span>还有 BigInteger.ONE    <br>        <span class="hljs-regexp">//</span>还有 BigInteger.TNE    <br>        <span class="hljs-regexp">//</span>还有 BigInteger.TWO  等大数常量    <br>        <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>        BigInteger iB = new BigInteger(i+<span class="hljs-string">&quot;&quot;</span>).pow(<span class="hljs-number">8</span>);<br>        <span class="hljs-regexp">//</span>大数获取值的时候需要使用字符串，如果是个变量i 可以向上面一样变成字符串<br>        <span class="hljs-regexp">//</span>或者使用 BigInteger mod = BigInteger.valueOf(<span class="hljs-number">123456789</span>) 这样取值<br>        sum = sum.add(iB).mod(mod);<span class="hljs-regexp">//</span>每次都取余一下，保证不会溢出<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//改变输出流，输出到work.txt文件</span><br>PrintStream ps = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PrintStream(<span class="hljs-params">new</span> FileOutputStream(<span class="hljs-string">&quot;D:/work.txt&quot;</span>)</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>set<span class="hljs-constructor">Out(<span class="hljs-params">ps</span>)</span>;  <span class="hljs-comment">//文件输出  用System.out.println()即可将内容输出到文件中</span><br><span class="hljs-comment">//文件流输出后直接打印就行</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;niub&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(x + <span class="hljs-string">&quot;&quot;</span> + ((y.compare<span class="hljs-constructor">To(BigInteger.ZERO)</span> &gt; <span class="hljs-number">0</span>)? <span class="hljs-string">&quot;+&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) + y + <span class="hljs-string">&quot;i&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>还没整理，考完整理。。。</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2022/03/07/Redis/"/>
    <url>/2022/03/07/Redis/</url>
    
    <content type="html"><![CDATA[<p class="note note-success">前言:依据狂神说视频整理</p><h1 id="一、Nosql概述"><a href="#一、Nosql概述" class="headerlink" title="一、Nosql概述"></a>一、Nosql概述</h1><h2 id="1、初识Nosql"><a href="#1、初识Nosql" class="headerlink" title="1、初识Nosql"></a>1、初识Nosql</h2><p>为什么会使用Nosql呢？我们现在所处于大数据时代，用户的个人信息，社交网络，地理位置，用户自己产生的数据等，数据量十分的庞大，而一般的数据库无法进行分析处理。当访问量过大后，一个服务器承受不了，当出现这种情况后，于是Nosql便应运而生了，Nosql 的全程是Not only sql 不仅仅是sql，因此，他能做的sql 更多。</p><h2 id="2、Nosql的特点"><a href="#2、Nosql的特点" class="headerlink" title="2、Nosql的特点"></a>2、Nosql的特点</h2><ul><li><p>方便扩展</p></li><li><p>大数据量的高性能</p></li><li><p>数据类型是多样性的</p></li></ul><p class  = "note note-success">传统RDBMS和Nosql</p><p><span class = "label label-primary">传统的RDBMS</span></p><ul><li><p>结构化的组织</p></li><li><p>SQL</p></li><li><p>数据和关系都存在单独的表中</p></li><li><p>数据定义语言</p></li><li><p>严格的一致性</p></li><li><p>基础的事务</p></li></ul><p><span class = "label label-info">Nosql</span></p><ul><li>不仅仅是数据</li><li>没有固定的查询语言</li><li>键值对存储，列存储、文档存储、图形数据库</li><li>最终一致性</li><li>CAP定理和BASE(异地多活)</li><li>高性能、高可用、高可扩</li><li></li></ul><h2 id="3、3V-3高"><a href="#3、3V-3高" class="headerlink" title="3、3V+3高"></a>3、3V+3高</h2><p>大数据时代的3V：主要是描述问题的<br>1、海量的Volume<br>2、多样的Variety<br>3、实时的Velocity<br>大数据时代的3高：主要是对程序的要求<br>1、高并发<br>2、高可拓<br>3、高性能</p><h2 id="4、Nosql的四大分类"><a href="#4、Nosql的四大分类" class="headerlink" title="4、Nosql的四大分类"></a>4、Nosql的四大分类</h2><ul><li><p> KV键值对    例如：redis</p></li><li><p>文档型数据库 例如：MongoDB</p></li><li><p>列存储数据库 例如：Hbase</p></li><li><p>图关系型数据库 例如 ：Neo4j</p></li></ul><h1 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>Redis全称remote dictionary server 远程字典服务，是一个使用C语言编写、支持网络、可基于内存亦可持久化的日志型key-Value数据库，并提供了多种语言的API。Redis 是一个开源的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。</p><p>链接: <a href="https://redis.io/">redis官网</a>  | <a href="https://github.com/redis">GitHub上的开源地址</a></p><p>不建议windows ，windows端的github上面已经停更很久了，redis推荐linux</p><p><img src="https://img-blog.csdnimg.cn/a13cff236102447e99a52fa50a512053.png" alt="redis官网上的"></p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>CSDN上面有很多教程，这里不再赘述</p><h1 id="三、基本指令"><a href="#三、基本指令" class="headerlink" title="三、基本指令"></a>三、基本指令</h1><h2 id="1、切换数据库"><a href="#1、切换数据库" class="headerlink" title="1、切换数据库"></a>1、切换数据库</h2><p>redis 默认有16个数据库<br><img src="https://img-blog.csdnimg.cn/ec8e9de43ea542e89eb0bfff344a6702.png" alt="配置文件里面的"></p><p>可以使用select进行切换数据库</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; select <span class="hljs-number">3</span>                 # 切换数据库<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[3]</span>&gt; dbsize                #查看数据库所占的大小 <br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[3]</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="2、set和get"><a href="#2、set和get" class="headerlink" title="2、set和get"></a>2、set和get</h2><p>因为是key-vakue类型的数据库。所以需要使用set和get来进行操作</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[3]</span>&gt;set name chenning      #set key value<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[3]</span>&gt; get name<br><br><span class="hljs-string">&quot;chenning&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3、查看所有键值"><a href="#3、查看所有键值" class="headerlink" title="3、查看所有键值"></a>3、查看所有键值</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>[<span class="hljs-number">3</span>]&gt;keys *<br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4、清除"><a href="#4、清除" class="headerlink" title="4、清除"></a>4、清除</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[3]</span>&gt;flushdb               # 清除当前数据库的数据<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[3]</span>&gt; keys *<br><br>(empty array)<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; flushall                #清空所有数据库的数据<br><br>OK<br></code></pre></td></tr></table></figure><p><strong>补充说明：</strong></p><p>redis是单线程的 redis是基于内存操作的，cpu不是redis的性能瓶颈 redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程 于是就用了单线程</p><blockquote><p>为什么单线程还这么快?</p></blockquote><ul><li><p>误区一 高性能的服务器一定 是多线程的</p></li><li><p>误区二 多线程的一定比单线程的效率高</p></li></ul><p>redis是将所有的数据放在内存中的所有说使用单线程去擦欧总就是最高的 多线程cpu会上下文切换 对于内存系统来说，没有上下文的切换效率就是最高的，在内存情况下，单线程就是效率最高的方案</p><h1 id="四、Redis入门"><a href="#四、Redis入门" class="headerlink" title="四、Redis入门"></a>四、Redis入门</h1><h2 id="1、key-相关指令"><a href="#1、key-相关指令" class="headerlink" title="1、key 相关指令"></a>1、key 相关指令</h2><h3 id="1-1-查看是否拥有key"><a href="#1-1-查看是否拥有key" class="headerlink" title="1.1 查看是否拥有key"></a>1.1 查看是否拥有key</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; exists name                        #查看是否拥有 name这个键<br><br>(integer) <span class="hljs-number">1</span>                                        #拥有则返回<span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; exists name1<br><br>(integer) <span class="hljs-number">0</span>                                        #不拥有则返回<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="1-2、移动key"><a href="#1-2、移动key" class="headerlink" title="1.2、移动key"></a>1.2、移动key</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; move name <span class="hljs-number">1</span>                        #move key db  将key移动到对应的数据库<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; keys *<br><br>(empty array)<br></code></pre></td></tr></table></figure><h3 id="1-3、查看key值是否存在"><a href="#1-3、查看key值是否存在" class="headerlink" title="1.3、查看key值是否存在"></a>1.3、查看key值是否存在</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; exists name                        #查看name这个key在这里存在吗<br><br>(integer) <span class="hljs-number">1</span>                                        #存在<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; exists name1<br><br>(integer) <span class="hljs-number">0</span>                                        #不存在<br><br><br></code></pre></td></tr></table></figure><h3 id="1-4、设置存活时间"><a href="#1-4、设置存活时间" class="headerlink" title="1.4、设置存活时间"></a>1.4、设置存活时间</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; set name chenning<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; expire name <span class="hljs-number">10</span>                    # 设置存活时间为<span class="hljs-number">10</span>秒<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ttl name                          # 查看剩余的时间<br><br>(integer) <span class="hljs-number">5</span>                                       #还剩<span class="hljs-number">5</span>秒<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ttl name <br><br>(integer) -<span class="hljs-number">2</span>                                      #已经过期<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get name <br><br>(nil)                                             #值已经无法获取<br><br></code></pre></td></tr></table></figure><h3 id="1-5、查看value的类型"><a href="#1-5、查看value的类型" class="headerlink" title="1.5、查看value的类型"></a>1.5、查看value的类型</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set name chenning<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; type name                        #查看value的类型<br><br>string<br></code></pre></td></tr></table></figure><h2 id="2、String"><a href="#2、String" class="headerlink" title="2、String"></a>2、String</h2><h3 id="2-1、追加"><a href="#2-1、追加" class="headerlink" title="2.1、追加"></a>2.1、追加</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; get name<br><br><span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; append name <span class="hljs-string">&quot;niubi&quot;</span>              #追加 如果没有的话就会新建<br><br>(integer) <span class="hljs-number">13</span>                                     #这里返回的是字符串的长度<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get name<br><br><span class="hljs-string">&quot;chenningniubi&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-2、查询长度"><a href="#2-2、查询长度" class="headerlink" title="2.2、查询长度"></a>2.2、查询长度</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; strlen name<br><br>(integer) <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><h3 id="2-3、自增和自减"><a href="#2-3、自增和自减" class="headerlink" title="2.3、自增和自减"></a>2.3、自增和自减</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set views <span class="hljs-number">0</span><br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get views<br><br><span class="hljs-string">&quot;0&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; incr views             # 增加 <span class="hljs-number">1</span><br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; incr views<br><br>(integer) <span class="hljs-number">2</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; decr views             # 减少 <span class="hljs-number">1</span><br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; decr views<br><br>(integer) <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>增加和减少的时候是可以设置步长的</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; incrby views <span class="hljs-number">10</span>        # 设置步长为<span class="hljs-number">10</span>  一次增加<span class="hljs-number">10</span><br><br>(integer) <span class="hljs-number">12</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; decrby views <span class="hljs-number">4</span>         # 设置步长为<span class="hljs-number">4</span>  一次减少<span class="hljs-number">4</span><br><br>(integer) <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="2-4、截取字符串"><a href="#2-4、截取字符串" class="headerlink" title="2.4、截取字符串"></a>2.4、截取字符串</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; getrange name <span class="hljs-number">0</span> <span class="hljs-number">3</span>      #截取 <span class="hljs-number">0</span> 到 <span class="hljs-number">3</span> 位置的字符串<br><br><span class="hljs-string">&quot;chen&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; getrange name <span class="hljs-number">0</span> -<span class="hljs-number">1</span>     #获取全部的额字符串<br><br><span class="hljs-string">&quot;chenningniubi&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-5、替代字符串"><a href="#2-5、替代字符串" class="headerlink" title="2.5、替代字符串"></a>2.5、替代字符串</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SETRANGE name <span class="hljs-number">1</span> xx     #将<span class="hljs-number">1</span>后的部分字符串替换为xx<br><br>(integer) <span class="hljs-number">13</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get name <br><br><span class="hljs-string">&quot;cxxnningniubi&quot;</span>                        # 结果<br></code></pre></td></tr></table></figure><h3 id="2-6、设置有存活时间的字符串"><a href="#2-6、设置有存活时间的字符串" class="headerlink" title="2.6、设置有存活时间的字符串"></a>2.6、设置有存活时间的字符串</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SETEX yy2 <span class="hljs-number">30</span> <span class="hljs-string">&quot;hello&quot;</span>   #setex key time string<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ttl yy2 <br><br>(integer) <span class="hljs-number">23</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ttl yy2 <br><br>(integer) <span class="hljs-number">17</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ttl yy2 <br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ttl yy2 <br><br>(integer) -<span class="hljs-number">2</span>                           #已过期<br></code></pre></td></tr></table></figure><h3 id="2-7、设置不存在的key"><a href="#2-7、设置不存在的key" class="headerlink" title="2.7、设置不存在的key"></a>2.7、设置不存在的key</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SETNX mykey <span class="hljs-string">&quot;db&quot;</span><br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SETNX mykey <span class="hljs-string">&quot;mdu&quot;</span>      #如果key已经存在，则不会做出修改，返回<span class="hljs-number">0</span>失败<br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt;get mykey<br><br><span class="hljs-string">&quot;db&quot;</span>                                   #依旧还是原来的值<br></code></pre></td></tr></table></figure><h3 id="2-8、批量操作key和value"><a href="#2-8、批量操作key和value" class="headerlink" title="2.8、批量操作key和value"></a>2.8、批量操作key和value</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; mset k<span class="hljs-number">1</span> v<span class="hljs-number">1</span> k<span class="hljs-number">2</span> v<span class="hljs-number">3</span> k<span class="hljs-number">3</span> v<span class="hljs-number">3</span>   #使用 mset 操作，一个key后面跟随一个value值<br><br><span class="hljs-attribute">OK</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; mget k<span class="hljs-number">1</span> k<span class="hljs-number">2</span> k<span class="hljs-number">3</span>            #批量获取key的值<br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;v1&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;v3&quot;</span><br><br><span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;v3</span><br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; MSETNX k1 v1 k4 v4       #这里的 msetnx 和上面的是一样的操作，需要注意的就是，<br>                                         #这里是原子性操作，要么一起成功 要么一起失败，例如这里因为设置过k1所以失败了<br>(integer) <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h3 id="2-9、设置对象"><a href="#2-9、设置对象" class="headerlink" title="2.9、设置对象"></a>2.9、设置对象</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">user</span>:<span class="hljs-number">1</span> &#123;<span class="hljs-type">name</span>:zhangsan,age:<span class="hljs-number">3</span>&#125;         #设置一个<span class="hljs-type">json</span>字符串来保存对象<br></code></pre></td></tr></table></figure><p>或者有更巧妙的设计</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; mset user:<span class="hljs-number">1</span>:name zhangsan user:<span class="hljs-number">1</span>:age <span class="hljs-number">2</span><br><br><span class="hljs-attribute">ok</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; mget user:<span class="hljs-number">1</span>:name  user:<span class="hljs-number">1</span>:age <br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;2&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-10、getset"><a href="#2-10、getset" class="headerlink" title="2.10、getset"></a>2.10、getset</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; getset db redis    # 如果不存在，则返回 nil<br>(nil)<br><span class="hljs-number">127.0.0.1:6379</span>&gt; get db<br><span class="hljs-string">&quot;redis&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; getset db mongodb  #如果存在值，获取原来的值，并设置新的值<br><span class="hljs-string">&quot;redis&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get db<br><span class="hljs-string">&quot;mongodb &quot;</span><br></code></pre></td></tr></table></figure><h2 id="3、List"><a href="#3、List" class="headerlink" title="3、List"></a>3、List</h2><p>所有的List命令都是L开头的</p><h3 id="3-1、push"><a href="#3-1、push" class="headerlink" title="3.1、push"></a>3.1、push</h3><p>像队列一样增加</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; LPUSH list one               #在左边增加one<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LPUSH list two <br><br>(integer) <span class="hljs-number">2</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LPUSH list three<br><br>(integer) <span class="hljs-number">3</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span>             #查看list全部的信息<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;three&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;one&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> <span class="hljs-number">1</span>              #查看list位置 <span class="hljs-number">0</span> 到 <span class="hljs-number">1</span> 的信息<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;three&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><br></code></pre></td></tr></table></figure><p>从右边push</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; RPUSH list four<br><br>(integer) <span class="hljs-number">4</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;three&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;one&quot;</span><br><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;four&quot;</span>                                       #可以看到从右边push后这个four是在最后边的<br></code></pre></td></tr></table></figure><h3 id="3-2、-pop"><a href="#3-2、-pop" class="headerlink" title="3.2、 pop"></a>3.2、 pop</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; RPOP list                       #从右边pop一个数据出来<br><br><span class="hljs-string">&quot;four&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;three&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;one&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-3、根据下标获取值"><a href="#3-3、根据下标获取值" class="headerlink" title="3.3、根据下标获取值"></a>3.3、根据下标获取值</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; LINDEX list <span class="hljs-number">1</span><br><br><span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LINDEX list <span class="hljs-number">0</span><br><br><span class="hljs-string">&quot;three&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-4、获取长度"><a href="#3-4、获取长度" class="headerlink" title="3.4、获取长度"></a>3.4、获取长度</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; LLEN list<br><br>(integer) <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="3-5、删除指定的元素"><a href="#3-5、删除指定的元素" class="headerlink" title="3.5、删除指定的元素"></a>3.5、删除指定的元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; lrem list <span class="hljs-number">1</span> three               #从list里面删除一个three,<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span>                #可以看到list里面仍然还有一个three<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;three&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;one&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-6、修建枝叶"><a href="#3-6、修建枝叶" class="headerlink" title="3.6、修建枝叶"></a>3.6、修建枝叶</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; ltrim list <span class="hljs-number">1</span> <span class="hljs-number">2</span>                  #只保留list 里面 <span class="hljs-number">1</span> 到 <span class="hljs-number">2</span> 的元素    list是从<span class="hljs-number">0</span>开始的<br><br><span class="hljs-attribute">OK</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span>  <br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;one&quot;</span>                                         #已经是修改过的了<br></code></pre></td></tr></table></figure><h3 id="3-7、组合命令"><a href="#3-7、组合命令" class="headerlink" title="3.7、组合命令"></a>3.7、组合命令</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;one&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; RPOPLPUSH list otherlist                       # 使右边的元素弹出并push到otherlist<br><br><span class="hljs-string">&quot;one&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE otherlist <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;one&quot;</span>                                                        <br></code></pre></td></tr></table></figure><h3 id="3-8、Lset更新操作"><a href="#3-8、Lset更新操作" class="headerlink" title="3.8、Lset更新操作"></a>3.8、Lset更新操作</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; LSET list <span class="hljs-number">1</span> item        #将list中的 <span class="hljs-number">1</span> 号元素改为item<br><br>(error) ERR index out of range          #不存在则会报错<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; lset list <span class="hljs-number">0</span> item<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE list <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;item&quot;</span>                               #已经成功的变成了item<br><br>                                        #相当于是一个更新操作，如果不存在则会报错<br></code></pre></td></tr></table></figure><h3 id="3-9、insert插入操作"><a href="#3-9、insert插入操作" class="headerlink" title="3.9、insert插入操作"></a>3.9、insert插入操作</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; RPUSH mylist hello<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; RPUSH mylist world<br><br>(integer) <span class="hljs-number">2</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LINSERT mylist before world niubi          #往world前面插入niubi<br><br>(integer) <span class="hljs-number">3</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE mylist <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;niubi&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LINSERT mylist after world gan             #往world后面插入gan<br><br>(integer) <span class="hljs-number">4</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; LRANGE mylist <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;niubi&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;gan&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4、Set"><a href="#4、Set" class="headerlink" title="4、Set"></a>4、Set</h2><p>set命令都是S开头，存储的元素不可以重复</p><h3 id="4-1、添加元素和查看元素"><a href="#4-1、添加元素和查看元素" class="headerlink" title="4.1、添加元素和查看元素"></a>4.1、添加元素和查看元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd myset <span class="hljs-string">&quot;hello&quot;</span>        # 往set里面添加元素<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd myset <span class="hljs-string">&quot;world&quot;</span><br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SMEMBERS myset            #查看所有的元素    <br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SISMEMBER myset hello     #查看该元素是否在set中<br><br>(integer) <span class="hljs-number">1</span>                               #含有该元素<br><br></code></pre></td></tr></table></figure><h3 id="4-2、查询set的长度"><a href="#4-2、查询set的长度" class="headerlink" title="4.2、查询set的长度"></a>4.2、查询set的长度</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SCARD myset<br><br>(integer) <span class="hljs-number">2</span>                               #含有两个元素<br></code></pre></td></tr></table></figure><h3 id="4-3、移除元素"><a href="#4-3、移除元素" class="headerlink" title="4.3、移除元素"></a>4.3、移除元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SREM myset hello          #remove指定元素<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SMEMBERS myset<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;world&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="4-4、抽随机"><a href="#4-4、抽随机" class="headerlink" title="4.4、抽随机"></a>4.4、抽随机</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SRANDMEMBER myset         # 从set里面随机抽取一个元素出来<br><br><span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SRANDMEMBER myset<br><br><span class="hljs-string">&quot;william&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SRANDMEMBER myset<br><br><span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-5、随机移除-弹出-一个元素"><a href="#4-5、随机移除-弹出-一个元素" class="headerlink" title="4.5、随机移除(弹出)一个元素"></a>4.5、随机移除(弹出)一个元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SPOP myset                #经典的pop   <br><br><span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SPOP myset<br><br><span class="hljs-string">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-6、将一个元素转移到另外一个set"><a href="#4-6、将一个元素转移到另外一个set" class="headerlink" title="4.6、将一个元素转移到另外一个set"></a>4.6、将一个元素转移到另外一个set</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; SMOVE myset myset2 hello        # 组合命令 将hello元素从myset转移到myset2<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SMEMBERS myset<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;william&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SMEMBERS myset2<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;hello&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-7、差，交，并集"><a href="#4-7、差，交，并集" class="headerlink" title="4.7、差，交，并集"></a>4.7、差，交，并集</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd myset a<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd myset b<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd myset1 b<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd myset1 c<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SDIFF myset myset1          #查询 myset之于myset1的差集<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;a&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SINTER myset myset1         #查询 myset和myset1的交集<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;b&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SUNION myset myset1         #查询 myset和myset1的并集<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;c&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;a&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;b&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; SDIFF myset1 myset          #查询 myset1之于myset的差集<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;c&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="5、hash"><a href="#5、hash" class="headerlink" title="5、hash"></a>5、hash</h2><p>map集合 key-map </p><h3 id="5-1、增加和获取元素"><a href="#5-1、增加和获取元素" class="headerlink" title="5.1、增加和获取元素"></a>5.1、增加和获取元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; hset myhash field1 chenning          #在myhash中增加 field1 -- chenning 这一对键值对 <br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; hget myhash field1                   # 在myhash中查询fields所对应的值<br><br><span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; hmset myhash field1 hello field2 world   #批量设置myhash 中的key--value<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; hmget myhash field1 field2            #批量获取 myhash 中的key所对应的value<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; hgetall myhash                        #获取所有的key和value<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;field1&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;field2&quot;</span><br><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-2、删除元素"><a href="#5-2、删除元素" class="headerlink" title="5.2、删除元素"></a>5.2、删除元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; hdel myhash field1                    #删除 myhash 中该 key 所对应的 value<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; hgetall myhash<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;field2&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-3、查询hash的长度"><a href="#5-3、查询hash的长度" class="headerlink" title="5.3、查询hash的长度"></a>5.3、查询hash的长度</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; hlen myhash<br><br>(integer) <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="5-4、查询是否存在对应的key"><a href="#5-4、查询是否存在对应的key" class="headerlink" title="5.4、查询是否存在对应的key"></a>5.4、查询是否存在对应的key</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; HEXISTS myhash field1                #经典的 exists 命令<br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; HEXISTS myhash field2<br><br>(integer) <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="5-5、查询所有的key和value"><a href="#5-5、查询所有的key和value" class="headerlink" title="5.5、查询所有的key和value"></a>5.5、查询所有的key和value</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; HKEYS myhash                        # 查询所有的key值<br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;field2&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;field1&quot;</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; hvals myhash                        # 查询所有的value值<br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;world&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;chenning&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-6、自增和自减"><a href="#5-6、自增和自减" class="headerlink" title="5.6、自增和自减"></a>5.6、自增和自减</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; hset myhash field3 <span class="hljs-number">5</span><br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; HINCRBY myhash field3 <span class="hljs-number">1</span>             #incrby 命令    <br><br>(integer) <span class="hljs-number">6</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; HINCRBY myhash field3 -<span class="hljs-number">1</span>            #增加负值<br><br>(integer) <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="5-7、setnx"><a href="#5-7、setnx" class="headerlink" title="5.7、setnx"></a>5.7、setnx</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; HSETNX myhash field4 hello        #和之前一样，不存在才可以设置，若存在则不可以使用该命令更改<br><br>(integer) <span class="hljs-number">1</span>  <br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; HSETNX myhash field4 world<br><br>(integer) <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>hash适合变更的数据user、name、age 尤其是用户信息之类的经常变动的信息，hash更适合对象的存储，String更适合字符串的存储</p><h2 id="6、Zset-有序集合"><a href="#6、Zset-有序集合" class="headerlink" title="6、Zset  有序集合"></a>6、Zset  有序集合</h2><p>相对于set 就是增加了排序的功能，其他功能set有的，他都有</p><h3 id="6-1、增加和查看元素"><a href="#6-1、增加和查看元素" class="headerlink" title="6.1、增加和查看元素"></a>6.1、增加和查看元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD myset <span class="hljs-number">1</span> one<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD myset <span class="hljs-number">2</span> two <span class="hljs-number">3</span> three<br><br>(integer) <span class="hljs-number">2</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGE myset <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;one&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;two&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;three&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-2、排序"><a href="#6-2、排序" class="headerlink" title="6.2、排序"></a>6.2、排序</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD salary <span class="hljs-number">2500</span> xiaohong <br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD salary <span class="hljs-number">5000</span> zhangsan<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD salary <span class="hljs-number">500</span> chenning<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary -inf +inf                #按照从小到大的顺序排序   -inf 负无穷 +inf 正无穷<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;xiaohong&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><br></code></pre></td></tr></table></figure><p>排序的其他操作</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD salary <span class="hljs-number">2500</span> xiaohong <br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD salary <span class="hljs-number">5000</span> zhangsan<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD salary <span class="hljs-number">500</span> chenning<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary -inf +inf<br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;xiaohong&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br>(empty array)<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGEBYSCORE salary -inf <span class="hljs-number">2500</span> withscores     #显示从负无穷到<span class="hljs-number">2500</span>的元素，并把数据显示出来  <br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;500&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;xiaohong&quot;</span><br><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;2500&quot;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; ZREVRANGE salary <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; ZREVRANGE salary <span class="hljs-number">0</span> -<span class="hljs-number">1</span> withscores       #使用 revrange 进行倒序排序<br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;5000&quot;</span><br><br><span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;500&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-3、移除元素"><a href="#6-3、移除元素" class="headerlink" title="6.3、移除元素"></a>6.3、移除元素</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGE salary <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;xiaohong&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; zrem salary xiaohong          # remove 这个元素<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGE salary <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;chenning&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;zhangsan&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-4、获取元素个数"><a href="#6-4、获取元素个数" class="headerlink" title="6.4、获取元素个数"></a>6.4、获取元素个数</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; zcard salary<br><br>(integer) <span class="hljs-number">2</span>  获取个数<br></code></pre></td></tr></table></figure><h1 id="五、三大特殊数据类型"><a href="#五、三大特殊数据类型" class="headerlink" title="五、三大特殊数据类型"></a>五、三大特殊数据类型</h1><h2 id="1、geospatial"><a href="#1、geospatial" class="headerlink" title="1、geospatial"></a>1、geospatial</h2><h3 id="1-1、-getadd"><a href="#1-1、-getadd" class="headerlink" title="1.1、 getadd"></a>1.1、 getadd</h3><p>添加国家城市的经纬度信息</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; GEOADD china:city <span class="hljs-number">116</span>.<span class="hljs-number">40</span> <span class="hljs-number">39</span>.<span class="hljs-number">90</span> beijing<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; GEOADD china:city <span class="hljs-number">121</span>.<span class="hljs-number">47</span> <span class="hljs-number">31</span>.<span class="hljs-number">23</span> shanghai<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; GEOADD china:city <span class="hljs-number">106</span>.<span class="hljs-number">50</span> <span class="hljs-number">29</span>.<span class="hljs-number">53</span> chongqing<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; GEOADD china:city <span class="hljs-number">114</span>.<span class="hljs-number">05</span> <span class="hljs-number">22</span>.<span class="hljs-number">52</span> shenzheng<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; GEOADD china:city <span class="hljs-number">120</span>.<span class="hljs-number">16</span> <span class="hljs-number">30</span>.<span class="hljs-number">24</span> hangzhou<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; GEOADD china:city <span class="hljs-number">108</span>.<span class="hljs-number">96</span> <span class="hljs-number">34</span>.<span class="hljs-number">26</span> xian<br><br>(integer) <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>注意事项</p></blockquote><ul><li>两级无法直接添加，一般可以可以通过Java一键导入所有城市的信息</li><li>有效的经度从-180度到180度</li><li>有效的维度信息从-85.05112878到85.05112878度</li><li>当坐标位置超出上述的指定的范围的时候，该命令回返回一个错误</li></ul><h3 id="1-2、getpos"><a href="#1-2、getpos" class="headerlink" title="1.2、getpos"></a>1.2、getpos</h3><p>获取城市的位置信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; GEOPOS china:city beijing chongqing<br><br><span class="hljs-attribute">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;116.39999896287918091&quot;</span><br><br>  <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;39.90000009167092543&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;106.49999767541885376&quot;</span><br><br>  <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;29.52999957900659211&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-3、geodist"><a href="#1-3、geodist" class="headerlink" title="1.3、geodist"></a>1.3、geodist</h3><p>获取两点之间的距离信息</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; GEODIST china:city beijing shanghai km       # 这后面的km是可以换的， 比如 m 等都可以<br><br><span class="hljs-string">&quot;1067.3788&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; GEODIST china:city beijing chongqing km<br><br><span class="hljs-string">&quot;1464.0708&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-4、georadius"><a href="#1-4、georadius" class="headerlink" title="1.4、georadius"></a>1.4、georadius</h3><p>查询指定范围内的城市信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; GEORADIUS china:city <span class="hljs-number">110</span> <span class="hljs-number">30</span> <span class="hljs-number">1000</span> km          #查询以经纬度<span class="hljs-number">110</span> <span class="hljs-number">30</span>为圆心周围<span class="hljs-number">1000</span>km的城市位置信息 <br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;chongqing&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;xian&quot;</span><br><br><span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;shenzheng&quot;</span><br><br><span class="hljs-attribute">4</span>) <span class="hljs-string">&quot;hangzhou&quot;</span><br><br></code></pre></td></tr></table></figure><p>其他的附带参数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; GEORADIUS china:city <span class="hljs-number">110</span> <span class="hljs-number">30</span> <span class="hljs-number">500</span> km withcoord     #跟上面的一样，但是带经纬度的参数<br><br><span class="hljs-attribute">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;chongqing&quot;</span><br><br>  <span class="hljs-attribute">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;106.49999767541885376&quot;</span><br><br>   <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;29.52999957900659211&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;xian&quot;</span><br><br>  <span class="hljs-attribute">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;108.96000176668167114&quot;</span><br><br>   <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; GEORADIUS china:city <span class="hljs-number">110</span> <span class="hljs-number">30</span> <span class="hljs-number">500</span> km withdist    #带距离指定位置的距离参数<br><br><span class="hljs-attribute">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;chongqing&quot;</span><br><br>  <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;341.9374&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;xian&quot;</span><br><br>  <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;483.8340&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; GEORADIUS china:city <span class="hljs-number">110</span> <span class="hljs-number">30</span> <span class="hljs-number">500</span> km withdist withcoord count <span class="hljs-number">1</span>   #带只查询一个的指令参数<br><br><span class="hljs-attribute">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;chongqing&quot;</span><br><br>  <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;341.9374&quot;</span><br><br>  <span class="hljs-attribute">3</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;106.49999767541885376&quot;</span><br><br>   <span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;29.52999957900659211&quot;</span><br></code></pre></td></tr></table></figure><p>通过指定元素来查找元素</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; GEORADIUSBYMEMBER china:city beijing <span class="hljs-number">1000</span> km      #距离北京<span class="hljs-number">1000</span>km的所有元素<br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;beijing&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;xian&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-5、将经纬度转化"><a href="#1-5、将经纬度转化" class="headerlink" title="1.5、将经纬度转化"></a>1.5、将经纬度转化</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; GEOHASH china:city beijing chongqing       #二维的经纬度转换为一位的字符串 字符串长得越想就越接近<br><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;wx4fbxxfke0&quot;</span><br><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;wm5xzrybty0&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-6、像set一样操作"><a href="#1-6、像set一样操作" class="headerlink" title="1.6、像set一样操作"></a>1.6、像set一样操作</h3><p>因为其实本质上就是zset所有下面这些操作是都可以进行的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">127.0.0.1:6379&gt;</span> ZRANGE <span class="hljs-symbol">china:</span>city <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;chongqing&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;xian&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;shenzheng&quot;</span><br><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;hangzhou&quot;</span><br><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;shanghai&quot;</span><br><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;beijing&quot;</span><br><br><span class="hljs-meta">127.0.0.1:6379&gt;</span> ZREM <span class="hljs-symbol">china:</span>city beijing<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-meta">127.0.0.1:6379&gt;</span> ZRANGE <span class="hljs-symbol">china:</span>city <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;chongqing&quot;</span><br><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;xian&quot;</span><br><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;shenzheng&quot;</span><br><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;hangzhou&quot;</span><br><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;shanghai&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2、hyperloglog"><a href="#2、hyperloglog" class="headerlink" title="2、hyperloglog"></a>2、hyperloglog</h2><p>hyperloglog主要就是关于基数的操作，而基数就是不重复的元素</p><p>优点就是占用的内存固定，2^64不同的元素的技术，只需要12kb的内存，例如在统计网站的访问的次数的时候，一个人访问多次，就可以记为一次。虽然有0.81%的错误率，但是可以忽略</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; PFADD mykey a b c d e f g h i j     # 添加元素<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; PFCOUNT mykey                       # 计数元素的个数<br><br>(integer) <span class="hljs-number">10</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; PFADD mykey2 i j z x c v b n m<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; PFMERGE mykey3 mykey mykey2         #将mykey mykey2中的元素合并到mykey3中<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; PFCOUNT mykey3                      #合并后只有不重复的元素，所有这里只有<span class="hljs-number">15</span>个元素<br><br>(integer) <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><h2 id="3、bitmaps"><a href="#3、bitmaps" class="headerlink" title="3、bitmaps"></a>3、bitmaps</h2><blockquote><p>位存储<br>统计用户信息，是否活跃，是否登录，两个状态的，都可以使用Bitmaps，Bitmap 位图是数据结构，都是操作二进制来进行记录，只有0和1两个状态，</p></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; setbit sign <span class="hljs-number">0</span> <span class="hljs-number">1</span>                   #为每一位设置状态<br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; setbit sign <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; setbit sign <span class="hljs-number">2</span> <span class="hljs-number">0</span><br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; setbit sign <span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; setbit sign <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; setbit sign <span class="hljs-number">5</span> <span class="hljs-number">0</span><br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; setbit sign <span class="hljs-number">6</span> <span class="hljs-number">0</span><br><br>(integer) <span class="hljs-number">0</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; getbit sign <span class="hljs-number">3</span>                     #获取状态<br><br>(integer) <span class="hljs-number">1</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; getbit sign <span class="hljs-number">5</span><br><br>(integer) <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>获取sign为1的数量</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; BITCOUNT sign<br><br>(integer) <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><h1 id="六、事务"><a href="#六、事务" class="headerlink" title="六、事务"></a>六、事务</h1><ul><li>Redis事务的本质就是一组命令的组合，一个事务中所有的命令都会被序列化，在事务执行的过程中，会按照顺序执行，一次性，顺序性，排他性的执行一些列的命令</li><li>Redis的事务没有隔离级别的概念，所有的命令在事务中，只有发起执行命令<strong>exec</strong> 才会执行</li><li>Redis单条命令式保留原子性，但是事务并不保留原子性，</li></ul><blockquote><p>redis的事务</p></blockquote><ul><li>开启事务(multi)</li><li>命令入队</li><li>执行事务(exec)</li></ul><h2 id="1、正常的执行事务"><a href="#1、正常的执行事务" class="headerlink" title="1、正常的执行事务"></a>1、正常的执行事务</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; multi               #开启事务命令<br><br><span class="hljs-attribute">OK</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>(TX)&gt; set k<span class="hljs-number">1</span> v<span class="hljs-number">1</span><br><br><span class="hljs-attribute">QUEUED</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>(TX)&gt; set k<span class="hljs-number">2</span> v<span class="hljs-number">2</span><br><br><span class="hljs-attribute">QUEUED</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>(TX)&gt; get k<span class="hljs-number">2</span><br><br><span class="hljs-attribute">QUEUED</span><br><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>(TX)&gt; set k<span class="hljs-number">3</span> v<span class="hljs-number">3</span><br><br><span class="hljs-attribute">QUEUED</span><br> <br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>(TX)&gt; exec            #执行事务命令<br><br><span class="hljs-attribute">1</span>) OK<br><br><span class="hljs-attribute">2</span>) OK<br><br><span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;v2&quot;</span><br><br><span class="hljs-attribute">4</span>) OK<br></code></pre></td></tr></table></figure><h2 id="2、放弃事务"><a href="#2、放弃事务" class="headerlink" title="2、放弃事务"></a>2、放弃事务</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><br><span class="hljs-number">127.0.0.1:6379</span>&gt; MULTI<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k1 v1 <br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k4 v4<br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; DISCARD           #放弃事务命令<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get k4<br><br>(nil)<br></code></pre></td></tr></table></figure><h2 id="3、执行事务时的异常"><a href="#3、执行事务时的异常" class="headerlink" title="3、执行事务时的异常"></a>3、执行事务时的异常</h2><p>事务的异常分为两种，编译时的异常和执行时的异常，下面主要写一下两种异常的不同点</p><h3 id="3-1、编译时异常"><a href="#3-1、编译时异常" class="headerlink" title="3.1、编译时异常"></a>3.1、编译时异常</h3><p>编译时的异常即代表你的语法可能就有问题，一旦一句有问题，整个事务都不能正常运行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; multi<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k1 v1<br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k2 v2<br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; getset k3<br><br>(error) ERR wrong number of arguments for &#x27;getset&#x27; command         #这里就开始提示有err<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k4 v4<br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; exec<br><br>(error) EXECABORT Transaction discarded because of previous errors.         # 导致整个事务都不能正常运行<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get k5<br><br>(nil)<br></code></pre></td></tr></table></figure><h3 id="3-2、运行时错误"><a href="#3-2、运行时错误" class="headerlink" title="3.2、运行时错误"></a>3.2、运行时错误</h3><p>运行时错误表示语法没有啥问题，是其他地方除了问题，仅仅只影响那一句话，其他的依旧可以正常的执行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; MULTI<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; incr k1           #这里的k1对应的value是一个字符串，是不能增加 <span class="hljs-number">1</span> 的<br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k2 v2<br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; set k3 v3<br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; get k3<br><br>QUEUED                                  #前面的语句语法都没有任何的问题 <br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; exec<br><br><span class="hljs-number">1</span>) (error) ERR value is not an integer or out of range       #事务的第一句不能正常执行<br><br><span class="hljs-number">2</span>) OK<br><br><span class="hljs-number">3</span>) OK<br><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;v3&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get k2<br><br><span class="hljs-string">&quot;v2&quot;</span><br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get k3<br><br><span class="hljs-string">&quot;v3&quot;</span>                                     #事务的其他语句是可以正常运行的<br></code></pre></td></tr></table></figure><h1 id="七、Redis实现乐观锁"><a href="#七、Redis实现乐观锁" class="headerlink" title="七、Redis实现乐观锁"></a>七、Redis实现乐观锁</h1><blockquote><p>悲观锁</p></blockquote><p>认为什么时候都会出错，无论做什么都会枷锁，效率低下</p><blockquote><p>乐观锁</p></blockquote><p>-认为什么时候都不会出问题，所以不会上锁，更新数据的时候去判断一下，在此期间是否有人去修改过这个数据</p><ul><li>获取version</li><li>更新的时候比较version</li></ul><p><strong>单线程的时候</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set money <span class="hljs-number">100</span><br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; set out <span class="hljs-number">0</span><br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; watch money    # 加锁<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; multi<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; DECRBY money <span class="hljs-number">20</span><br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; INCRBY out <span class="hljs-number">20</span><br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; exec<br><br><span class="hljs-number">1</span>) (integer) <span class="hljs-number">80</span><br><br><span class="hljs-number">2</span>) (integer) <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; watch money<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>&gt; multi<br><br>OK<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; DECRBY money <span class="hljs-number">10</span><br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; INCRBY out <span class="hljs-number">10</span><br><br>QUEUED<br><br><span class="hljs-number">127.0.0.1:6379</span>(TX)&gt; exec      # 在执行这个事务前，有其他的线程改变了这个值，则会导致执行失败<br><br>(nil)<br></code></pre></td></tr></table></figure><p>若执行失败，则正确操作为:<br><img src="https://img-blog.csdnimg.cn/ccf1491997604555802786a4838fb3e6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="解锁"></p><h1 id="八、Jedis"><a href="#八、Jedis" class="headerlink" title="八、Jedis"></a>八、Jedis</h1><p>就是使用Java操作redis</p><h2 id="1、简单的使用一下Jedis"><a href="#1、简单的使用一下Jedis" class="headerlink" title="1、简单的使用一下Jedis"></a>1、简单的使用一下Jedis</h2><p>首先导入包</p><p><img src="https://s2.loli.net/2022/04/14/V9qPSWK72ebiouh.png" alt="image-20220414100910101"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/14/bC7i5e9qy3Y6AoT.png" alt="image-20220414100943921"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.80<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">static</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;&#125;<br>     jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-comment">//使用对象来操作</span><br>     Sysrtem.out.printn(jedis.ping);<span class="hljs-comment">//测试链接</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、常用的api"><a href="#2、常用的api" class="headerlink" title="2、常用的api"></a>2、常用的api</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestString</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        jedis.flushDB();<br>        System.out.println(<span class="hljs-string">&quot;===========增加数据===========&quot;</span>);<br>        System.out.println(jedis.set(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>));<br>        System.out.println(jedis.set(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>));<br>        System.out.println(jedis.set(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除键key2:&quot;</span>+jedis.del(<span class="hljs-string">&quot;key2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取键key2:&quot;</span>+jedis.get(<span class="hljs-string">&quot;key2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;修改key1:&quot;</span>+jedis.set(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1Changed&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取key1的值：&quot;</span>+jedis.get(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;在key3后面加入值：&quot;</span>+jedis.append(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;End&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;key3的值：&quot;</span>+jedis.get(<span class="hljs-string">&quot;key3&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;增加多个键值对：&quot;</span>+jedis.mset(<span class="hljs-string">&quot;key01&quot;</span>,<span class="hljs-string">&quot;value01&quot;</span>,<span class="hljs-string">&quot;key02&quot;</span>,<span class="hljs-string">&quot;value02&quot;</span>,<span class="hljs-string">&quot;key03&quot;</span>,<span class="hljs-string">&quot;value03&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="hljs-string">&quot;key01&quot;</span>,<span class="hljs-string">&quot;key02&quot;</span>,<span class="hljs-string">&quot;key03&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="hljs-string">&quot;key01&quot;</span>,<span class="hljs-string">&quot;key02&quot;</span>,<span class="hljs-string">&quot;key03&quot;</span>,<span class="hljs-string">&quot;key04&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除多个键值对：&quot;</span>+jedis.del(<span class="hljs-string">&quot;key01&quot;</span>,<span class="hljs-string">&quot;key02&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取多个键值对：&quot;</span>+jedis.mget(<span class="hljs-string">&quot;key01&quot;</span>,<span class="hljs-string">&quot;key02&quot;</span>,<span class="hljs-string">&quot;key03&quot;</span>));<br><br>        jedis.flushDB();<br>        System.out.println(<span class="hljs-string">&quot;===========新增键值对防止覆盖原先值==============&quot;</span>);<br>        System.out.println(jedis.setnx(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>));<br>        System.out.println(jedis.setnx(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>));<br>        System.out.println(jedis.setnx(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2-new&quot;</span>));<br>        System.out.println(jedis.get(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(jedis.get(<span class="hljs-string">&quot;key2&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;===========新增键值对并设置有效时间=============&quot;</span>);<br>        System.out.println(jedis.setex(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;value3&quot;</span>));<br>        System.out.println(jedis.get(<span class="hljs-string">&quot;key3&quot;</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(jedis.get(<span class="hljs-string">&quot;key3&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;===========获取原值，更新为新值==========&quot;</span>);<br>        System.out.println(jedis.getSet(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;key2GetSet&quot;</span>));<br>        System.out.println(jedis.get(<span class="hljs-string">&quot;key2&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;获得key2的值的字串：&quot;</span>+jedis.getrange(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestList</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br>        jedis.flushDB();<br>        System.out.println(<span class="hljs-string">&quot;===========添加一个list===========&quot;</span>);<br>        jedis.lpush(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-string">&quot;ArrayList&quot;</span>, <span class="hljs-string">&quot;Vector&quot;</span>, <span class="hljs-string">&quot;Stack&quot;</span>, <span class="hljs-string">&quot;HashMap&quot;</span>, <span class="hljs-string">&quot;WeakHashMap&quot;</span>, <span class="hljs-string">&quot;LinkedHashMap&quot;</span>);<br>        jedis.lpush(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-string">&quot;HashSet&quot;</span>);<br>        jedis.lpush(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-string">&quot;TreeSet&quot;</span>);<br>        jedis.lpush(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-string">&quot;TreeMap&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<span class="hljs-comment">//-1代表倒数第一个元素，-2代表倒数第二个元素,end为-1表示查询全部</span><br>        System.out.println(<span class="hljs-string">&quot;collections区间0-3的元素：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        <span class="hljs-comment">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span><br>        System.out.println(<span class="hljs-string">&quot;删除指定元素个数：&quot;</span>+jedis.lrem(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;HashMap&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除下表0-3区间之外的元素：&quot;</span>+jedis.ltrim(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections列表出栈（左端）：&quot;</span>+jedis.lpop(<span class="hljs-string">&quot;collections&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections添加元素，从列表右端，与lpush相对应：&quot;</span>+jedis.rpush(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-string">&quot;EnumMap&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections列表出栈（右端）：&quot;</span>+jedis.rpop(<span class="hljs-string">&quot;collections&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;修改collections指定下标1的内容：&quot;</span>+jedis.lset(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;LinkedArrayList&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;collections的内容：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;collections的长度：&quot;</span>+jedis.llen(<span class="hljs-string">&quot;collections&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取collections下标为2的元素：&quot;</span>+jedis.lindex(<span class="hljs-string">&quot;collections&quot;</span>, <span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        jedis.lpush(<span class="hljs-string">&quot;sortedList&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sortedList排序前：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;sortedList&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        System.out.println(jedis.sort(<span class="hljs-string">&quot;sortedList&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;sortedList排序后：&quot;</span>+jedis.lrange(<span class="hljs-string">&quot;sortedList&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br>        jedis.flushDB();<br>        System.out.println(<span class="hljs-string">&quot;============向集合中添加元素（不重复）============&quot;</span>);<br>        System.out.println(jedis.sadd(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e1&quot;</span>,<span class="hljs-string">&quot;e2&quot;</span>,<span class="hljs-string">&quot;e4&quot;</span>,<span class="hljs-string">&quot;e3&quot;</span>,<span class="hljs-string">&quot;e0&quot;</span>,<span class="hljs-string">&quot;e8&quot;</span>,<span class="hljs-string">&quot;e7&quot;</span>,<span class="hljs-string">&quot;e5&quot;</span>));<br>        System.out.println(jedis.sadd(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e6&quot;</span>));<br>        System.out.println(jedis.sadd(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e6&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除一个元素e0：&quot;</span>+jedis.srem(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e0&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除两个元素e7和e6：&quot;</span>+jedis.srem(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e7&quot;</span>,<span class="hljs-string">&quot;e6&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;随机的移除集合中的一个元素：&quot;</span>+jedis.spop(<span class="hljs-string">&quot;eleSet&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;随机的移除集合中的一个元素：&quot;</span>+jedis.spop(<span class="hljs-string">&quot;eleSet&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet的所有元素为：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet中包含元素的个数：&quot;</span>+jedis.scard(<span class="hljs-string">&quot;eleSet&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;e3是否在eleSet中：&quot;</span>+jedis.sismember(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e3&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;e1是否在eleSet中：&quot;</span>+jedis.sismember(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;e1是否在eleSet中：&quot;</span>+jedis.sismember(<span class="hljs-string">&quot;eleSet&quot;</span>, <span class="hljs-string">&quot;e5&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;=================================&quot;</span>);<br>        System.out.println(jedis.sadd(<span class="hljs-string">&quot;eleSet1&quot;</span>, <span class="hljs-string">&quot;e1&quot;</span>,<span class="hljs-string">&quot;e2&quot;</span>,<span class="hljs-string">&quot;e4&quot;</span>,<span class="hljs-string">&quot;e3&quot;</span>,<span class="hljs-string">&quot;e0&quot;</span>,<span class="hljs-string">&quot;e8&quot;</span>,<span class="hljs-string">&quot;e7&quot;</span>,<span class="hljs-string">&quot;e5&quot;</span>));<br>        System.out.println(jedis.sadd(<span class="hljs-string">&quot;eleSet2&quot;</span>, <span class="hljs-string">&quot;e1&quot;</span>,<span class="hljs-string">&quot;e2&quot;</span>,<span class="hljs-string">&quot;e4&quot;</span>,<span class="hljs-string">&quot;e3&quot;</span>,<span class="hljs-string">&quot;e0&quot;</span>,<span class="hljs-string">&quot;e8&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;将eleSet1中删除e1并存入eleSet3中：&quot;</span>+jedis.smove(<span class="hljs-string">&quot;eleSet1&quot;</span>, <span class="hljs-string">&quot;eleSet3&quot;</span>, <span class="hljs-string">&quot;e1&quot;</span>));<span class="hljs-comment">//移到集合元素</span><br>        System.out.println(<span class="hljs-string">&quot;将eleSet1中删除e2并存入eleSet3中：&quot;</span>+jedis.smove(<span class="hljs-string">&quot;eleSet1&quot;</span>, <span class="hljs-string">&quot;eleSet3&quot;</span>, <span class="hljs-string">&quot;e2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet1中的元素：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet3中的元素：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet3&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;============集合运算=================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;eleSet1中的元素：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet2中的元素：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet1和eleSet2的交集:&quot;</span>+jedis.sinter(<span class="hljs-string">&quot;eleSet1&quot;</span>,<span class="hljs-string">&quot;eleSet2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet1和eleSet2的并集:&quot;</span>+jedis.sunion(<span class="hljs-string">&quot;eleSet1&quot;</span>,<span class="hljs-string">&quot;eleSet2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;eleSet1和eleSet2的差集:&quot;</span>+jedis.sdiff(<span class="hljs-string">&quot;eleSet1&quot;</span>,<span class="hljs-string">&quot;eleSet2&quot;</span>));<span class="hljs-comment">//eleSet1中有，eleSet2中没有</span><br>        jedis.sinterstore(<span class="hljs-string">&quot;eleSet4&quot;</span>,<span class="hljs-string">&quot;eleSet1&quot;</span>,<span class="hljs-string">&quot;eleSet2&quot;</span>);<span class="hljs-comment">//求交集并将交集保存到dstkey的集合</span><br>        System.out.println(<span class="hljs-string">&quot;eleSet4中的元素：&quot;</span>+jedis.smembers(<span class="hljs-string">&quot;eleSet4&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHash</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br>        jedis.flushDB();<br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,String&gt;();<br>        map.put(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-string">&quot;value3&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key4&quot;</span>,<span class="hljs-string">&quot;value4&quot;</span>);<br>        <span class="hljs-comment">//添加名称为hash（key）的hash元素</span><br>        jedis.hmset(<span class="hljs-string">&quot;hash&quot;</span>,map);<br>        <span class="hljs-comment">//向名称为hash的hash中添加key为key5，value为value5元素</span><br>        jedis.hset(<span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-string">&quot;key5&quot;</span>, <span class="hljs-string">&quot;value5&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="hljs-string">&quot;hash&quot;</span>));<span class="hljs-comment">//return Map&lt;String,String&gt;</span><br>        System.out.println(<span class="hljs-string">&quot;散列hash的所有键为：&quot;</span>+jedis.hkeys(<span class="hljs-string">&quot;hash&quot;</span>));<span class="hljs-comment">//return Set&lt;String&gt;</span><br>        System.out.println(<span class="hljs-string">&quot;散列hash的所有值为：&quot;</span>+jedis.hvals(<span class="hljs-string">&quot;hash&quot;</span>));<span class="hljs-comment">//return List&lt;String&gt;</span><br>        System.out.println(<span class="hljs-string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span>+jedis.hincrBy(<span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-string">&quot;key6&quot;</span>, <span class="hljs-number">6</span>));<br>        System.out.println(<span class="hljs-string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="hljs-string">&quot;hash&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span>+jedis.hincrBy(<span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-string">&quot;key6&quot;</span>, <span class="hljs-number">3</span>));<br>        System.out.println(<span class="hljs-string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="hljs-string">&quot;hash&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除一个或者多个键值对：&quot;</span>+jedis.hdel(<span class="hljs-string">&quot;hash&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;散列hash的所有键值对为：&quot;</span>+jedis.hgetAll(<span class="hljs-string">&quot;hash&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;散列hash中键值对的个数：&quot;</span>+jedis.hlen(<span class="hljs-string">&quot;hash&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;判断hash中是否存在key2：&quot;</span>+jedis.hexists(<span class="hljs-string">&quot;hash&quot;</span>,<span class="hljs-string">&quot;key2&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;判断hash中是否存在key3：&quot;</span>+jedis.hexists(<span class="hljs-string">&quot;hash&quot;</span>,<span class="hljs-string">&quot;key3&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取hash中的值：&quot;</span>+jedis.hmget(<span class="hljs-string">&quot;hash&quot;</span>,<span class="hljs-string">&quot;key3&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;获取hash中的值：&quot;</span>+jedis.hmget(<span class="hljs-string">&quot;hash&quot;</span>,<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-string">&quot;key4&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestKey</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;清空数据：&quot;</span>+jedis.flushDB());<br>        System.out.println(<span class="hljs-string">&quot;判断某个键是否存在：&quot;</span>+jedis.exists(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;新增&lt;&#x27;username&#x27;,&#x27;kuangshen&#x27;&gt;的键值对：&quot;</span>+jedis.set(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;kuangshen&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;新增&lt;&#x27;password&#x27;,&#x27;password&#x27;&gt;的键值对：&quot;</span>+jedis.set(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>));<br>        System.out.print(<span class="hljs-string">&quot;系统中所有的键如下：&quot;</span>);<br>        Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br>        System.out.println(<span class="hljs-string">&quot;删除键password:&quot;</span>+jedis.del(<span class="hljs-string">&quot;password&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;判断键password是否存在：&quot;</span>+jedis.exists(<span class="hljs-string">&quot;password&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;查看键username所存储的值的类型：&quot;</span>+jedis.type(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;随机返回key空间的一个：&quot;</span>+jedis.randomKey());<br>        System.out.println(<span class="hljs-string">&quot;重命名key：&quot;</span>+jedis.rename(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;取出改后的name：&quot;</span>+jedis.get(<span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;按索引查询：&quot;</span>+jedis.select(<span class="hljs-number">0</span>));<br>        System.out.println(<span class="hljs-string">&quot;删除当前选择数据库中的所有key：&quot;</span>+jedis.flushDB());<br>        System.out.println(<span class="hljs-string">&quot;返回当前数据库中key的数目：&quot;</span>+jedis.dbSize());<br>        System.out.println(<span class="hljs-string">&quot;删除所有数据库中的所有key：&quot;</span>+jedis.flushAll());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Password"><a href="#Password" class="headerlink" title="Password"></a>Password</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPassword</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        <span class="hljs-comment">//验证密码，如果没有设置密码这段代码省略</span><br><span class="hljs-comment">//        jedis.auth(&quot;password&quot;);</span><br><br>        jedis.connect(); <span class="hljs-comment">//连接</span><br>        jedis.disconnect(); <span class="hljs-comment">//断开连接</span><br><br>        jedis.flushAll(); <span class="hljs-comment">//清空所有的key</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、事务"><a href="#3、事务" class="headerlink" title="3、事务"></a>3、事务</h2><p>让我们看看在boot里面如何使用事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Transaction;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMulti</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建客户端连接服务端，redis服务端需要被开启</span><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br>        jedis.flushDB();<br><br>        JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject();<br>        jsonObject.put(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>);<br>        <span class="hljs-comment">//开启事务</span><br>        Transaction multi = jedis.multi();<br>        String result = jsonObject.toJSONString();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//向redis存入一条数据</span><br>            multi.set(<span class="hljs-string">&quot;json&quot;</span>, result);<br>            <span class="hljs-comment">//再存入一条数据</span><br>            multi.set(<span class="hljs-string">&quot;json2&quot;</span>, result);<br>            <span class="hljs-comment">//这里引发了异常，用0作为被除数</span><br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>/<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//如果没有引发异常，执行进入队列的命令</span><br>            multi.exec();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//如果出现异常，回滚</span><br>            multi.discard();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(jedis.get(<span class="hljs-string">&quot;json&quot;</span>));<br>            System.out.println(jedis.get(<span class="hljs-string">&quot;json2&quot;</span>));<br>            <span class="hljs-comment">//最终关闭客户端</span><br>            jedis.close();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4、Springboot-整合"><a href="#4、Springboot-整合" class="headerlink" title="4、Springboot 整合"></a>4、Springboot 整合</h2><p>在spring boot2.x之后，原来使用的jedis被替换成了lettuce</p><ul><li><p>jedis所采用的直连，多个线程操作的时候不安全，如果想要追求安全 ，可以使用jedis pool连接池</p></li><li><p>lettuce 采用netty 实例可以在多个线程中进行共享，不存在线程不安全的情况，更像NIO</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(</span><br><span class="hljs-meta">    name = &#123;&quot;redisTemplate&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;<br>    <span class="hljs-comment">//两个泛型都是object 类，我们后使用需要强制转换</span><br>    RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate();<br>    template.setConnectionFactory(redisConnectionFactory);<br>    <span class="hljs-keyword">return</span> template;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><span class="hljs-comment">//由于String时redis最常使用的类型，所以单独提出来了一个方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title">stringRedisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;<br>    StringRedisTemplate template = <span class="hljs-keyword">new</span> StringRedisTemplate();<br>    template.setConnectionFactory(redisConnectionFactory);<br>    <span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1、整合步骤"><a href="#1、整合步骤" class="headerlink" title="1、整合步骤"></a>1、整合步骤</h3><p>1.导入依赖    –上面的jedis的包</p><p>2.配置链接    </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">password:</span> <br>      <span class="hljs-attr">jedis:</span><br>        <span class="hljs-attr">pool:</span><br>          <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>          <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1ms</span><br>          <span class="hljs-attr">max-idle:</span> <span class="hljs-number">500</span><br>          <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">lettuce:</span><br>        <span class="hljs-attr">shutdown-timeout:</span> <span class="hljs-string">0ms</span><br></code></pre></td></tr></table></figure><p>3.测试</p><h3 id="2、编写自己的-redisTemplate"><a href="#2、编写自己的-redisTemplate" class="headerlink" title="2、编写自己的 redisTemplate"></a>2、编写自己的 redisTemplate</h3><p>这里需要注意一下要直接传输对象的话需要将对象序列化，比如下面这样讲pojo的类实现序列化的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializer</span></span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    String name;<br>&#125;<br></code></pre></td></tr></table></figure><p>自己的template</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> </span>&#123;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>      RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;String, Object&gt;();<br><br>      template.setConnectionFactory(factory);<br><br>      <span class="hljs-comment">//序列化配置</span><br>      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br><br>      ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>      jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>      <span class="hljs-comment">//String序列化</span><br>      StringRedisSerializer stringRedisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br><br>      <span class="hljs-comment">// key采用String的序列化方式</span><br>      template.setKeySerializer(stringRedisSerializer);<br>      <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>      template.setHashKeySerializer(stringRedisSerializer);<br>      <span class="hljs-comment">// value序列化方式采用jackson</span><br>      template.setValueSerializer(jackson2JsonRedisSerializer);<br>      <span class="hljs-comment">// hash的value序列化方式采用jackson</span><br>      template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>      template.afterPropertiesSet();<br><br>      <span class="hljs-keyword">return</span> template;<br>  &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用工具类封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisUtil</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;redisTemplate&quot;)</span><span class="hljs-comment">//指定那个redisTemplate,可以不写</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-comment">// =============================common============================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定缓存失效时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">expire</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.expire(key, time, TimeUnit.SECONDS);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key 获取过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间(秒) 返回0代表为永久有效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getExpire</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断key是否存在</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasKey</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 可以传一个值 或多个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(String... key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-keyword">null</span> &amp;&amp; key.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (key.length == <span class="hljs-number">1</span>) &#123;<br>                redisTemplate.delete(key[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                redisTemplate.delete(CollectionUtils.arrayToList(key));<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">// ============================String=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForValue().set(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入并设置时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false 失败</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                set(key, value);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递增</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">incr</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;递增因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递减</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要减少几(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">decr</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;递减因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);<br>    &#125;<br><br><br>    <span class="hljs-comment">// ================================Map=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashGet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">hget</span><span class="hljs-params">(String key, String item)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取hashKey对应的所有键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title">hmget</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 对应多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet 并设置时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map  对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, String item, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, String item, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除hash表中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 可以使多个 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hdel</span><span class="hljs-params">(String key, Object... item)</span> </span>&#123;<br>        redisTemplate.opsForHash().delete(key, item);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断hash表中是否有该项的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hHasKey</span><span class="hljs-params">(String key, String item)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">hincr</span><span class="hljs-params">(String key, String item, <span class="hljs-keyword">double</span> by)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要减少记(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">hdecr</span><span class="hljs-params">(String key, String item, <span class="hljs-keyword">double</span> by)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);<br>    &#125;<br><br><br>    <span class="hljs-comment">// ============================set=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取Set中的所有值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">sGet</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据value从一个set中查询,是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sHasKey</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据放入set缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sSet</span><span class="hljs-params">(String key, Object... values)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, values);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将set数据放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time   时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sSetAndTime</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> time, Object... values)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Long count = redisTemplate.opsForSet().add(key, values);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取set缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sGetSetSize</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除值为value的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">setRemove</span><span class="hljs-params">(String key, Object... values)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Long count = redisTemplate.opsForSet().remove(key, values);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ===============================list=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start 开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end   结束 0 到 -1代表所有值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">lGet</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">lGetListSize</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过索引 获取list中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">lGetIndex</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引修改list中的某条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lUpdateIndex</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> index, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().set(key, index, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除N个值为value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 移除多少个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">lRemove</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> count, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Long remove = redisTemplate.opsForList().remove(key, count, value);<br>            <span class="hljs-keyword">return</span> remove;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowird</span><br><span class="hljs-keyword">private</span> RedisUtil redisUtil; <span class="hljs-comment">//装配工具类</span><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>  redisUtil.set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;chenning&quot;</span>);<span class="hljs-comment">//直接使用就行</span><br>  System.out.println(redisUtil.get(<span class="hljs-string">&quot;name&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>重要的是去理解redis的思想和使用情景</p><h1 id="九、redis-conf详解"><a href="#九、redis-conf详解" class="headerlink" title="九、redis.conf详解"></a>九、redis.conf详解</h1><p>文件的位置<p class="label label-success">默认路径 /usr/local/bin/Nconfig</p></p><p><img src="https://img.mercuryblog.site/img/image-20220414174009767.png" alt="image-20220414174009767"></p><p>配置文件对于大小写不敏感</p><h2 id="1、包含-INCLUDES"><a href="#1、包含-INCLUDES" class="headerlink" title="1、包含 INCLUDES"></a>1、包含 INCLUDES</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">include /path/to/local.conf<br><br>include /path/to/other.conf<br></code></pre></td></tr></table></figure><p>好比是spring里面的import</p><h2 id="2、网络-NETWORK"><a href="#2、网络-NETWORK" class="headerlink" title="2、网络 NETWORK"></a>2、网络 NETWORK</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1 -::1<br><br><br><span class="hljs-comment"># 是否开启保护模式</span><br>protected-mode yes<br><br><br><span class="hljs-comment"># 端口设置</span><br>port 6379<br></code></pre></td></tr></table></figure><h2 id="3、通用配置-GENERAL"><a href="#3、通用配置-GENERAL" class="headerlink" title="3、通用配置 GENERAL"></a>3、通用配置 GENERAL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以守护进程的方式进行</span><br>daemonize yes  <br><span class="hljs-comment"># 默认是关闭的，我们这里选择开启</span><br><br><br><br><span class="hljs-comment"># 如果以后台的形式运行 需要指定一个pid文件</span><br>pidfile /var/run/redis_6379.pid<br><br><br><br><span class="hljs-comment"># 日志</span><br><span class="hljs-comment"># Specify the server verbosity level.</span><br><span class="hljs-comment"># This can be one of:</span><br><span class="hljs-comment"># debug (a lot of information, useful for development/testing)</span><br><span class="hljs-comment"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="hljs-comment"># notice (moderately verbose, what you want in production probably)</span><br><span class="hljs-comment"># warning (only very important / critical messages are logged)</span><br>    <br>loglevel notice<br><br><span class="hljs-comment">#日志文件位置名</span><br>logfile <span class="hljs-string">&quot;&quot;</span><br>    <br><span class="hljs-comment">#默认库的数量是16个</span><br>databases 16<br></code></pre></td></tr></table></figure><h2 id="4、快照-SNAPSHOT"><a href="#4、快照-SNAPSHOT" class="headerlink" title="4、快照 SNAPSHOT"></a>4、快照 SNAPSHOT</h2><p>所谓的快照就是持久化</p><p>在持久化的过程中，redis中的数据会持久化到以<span class="label label-primary"> .rdb </span>或者<span class="label label-primary"> .aof </span> </p><p>因为redis是内存数据库，因此数据断电即失，所以需要隔一段时间就持久化一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">save 3600 1       <span class="hljs-comment"># 如果3600内有1次修改数据就持久化一次</span><br><br>save 300 100      <span class="hljs-comment"># 如果300内有100次修改数据就持久化一次</span><br><br>save 60 10000     <span class="hljs-comment"># 如果60内有10000次修改数据就持久化一次</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">stop-writes-on-bgsave-error yes <span class="hljs-comment"># 持久化操作错误后是否操作</span><br><br>rdbcompression yes              <span class="hljs-comment"># 是否压缩持久化数据</span><br><br>rdbchecksum yes                 <span class="hljs-comment"># 持久化后是否检查</span><br><br>dir ./                          <span class="hljs-comment"># .rdb文件保存的目录</span><br></code></pre></td></tr></table></figure><h2 id="5、安全"><a href="#5、安全" class="headerlink" title="5、安全"></a>5、安全</h2><p>限制client</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 最大的连接数</span><br><span class="hljs-comment"># maxclients 10000</span><br><br><span class="hljs-comment"># 控制节点能使用的最大内存</span><br><span class="hljs-comment"># maxmemory &lt;bytes&gt;</span><br><br><span class="hljs-comment"># 内存满之后的处理策略</span><br><span class="hljs-comment"># maxmemory-policy noeviction</span><br></code></pre></td></tr></table></figure><p class="note note-danger">有六种淘汰策略</p><ol><li><p>noeviction(默认策略)：对于写请求不再提供服务，直接返回错误（DEL请求和部分特殊请求除外）</p></li><li><p>allkeys-lru：从所有key中使用LRU算法进行淘汰</p></li><li><p>volatile-lru：从设置了过期时间的key中使用LRU算法进行淘汰</p></li><li><p>allkeys-random：从所有key中随机淘汰数据</p></li><li><p>volatile-random：从设置了过期时间的key中随机淘汰</p></li><li><p>volatile-ttl：在设置了过期时间的key中，淘汰过期时间剩余最短的</p></li></ol><h2 id="6、append-only-模式-aof配置"><a href="#6、append-only-模式-aof配置" class="headerlink" title="6、append only 模式 aof配置"></a>6、append only 模式 aof配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 默认使用rdb 因为完全够用 不开启aof  </span><br>appendonly no  <br><br><span class="hljs-comment"># aof文件的名字</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><br><br><span class="hljs-comment">#下面三个只选择一个开</span><br><span class="hljs-comment"># appendfsync always  # 每次修改都会同步，但过于消耗性能</span><br><br>appendfsync everysec  <span class="hljs-comment"># 每秒执行一次同步，但会丢失这1s的数据</span><br><br><span class="hljs-comment"># appendfsync no      # 不执行同步，操作系统自己同步数据，速度最快</span><br></code></pre></td></tr></table></figure><h1 id="十、持久化"><a href="#十、持久化" class="headerlink" title="十、持久化"></a>十、持久化</h1><p>持久化是 <span class="label label-danger">重点</span></p><p class="note note-primary">为什么需要持久化</p><p>redis是一个内存数据库，如果不将数据库里面的数据保存到磁盘，服务一旦停止，那么数据就会全部丢失!因此redis需要通过持久化将数据都保存下来,redis的持久化有两种方式，RDB和AOF</p><h2 id="1、RDB"><a href="#1、RDB" class="headerlink" title="1、RDB"></a>1、RDB</h2><p> RDB的全程就是redis database，它通过再指定的时间间隔内将内存种的数据集快照写入磁盘，也就是snapshot快照，他恢复时是将快照文件直接读取到内存里面(感觉像是我以前写的租车管理系统😐)，Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件种，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程时是不进行任何IO操作的。这就确保了极高的性能。如果要进行大规模数据的恢复，且对于数据恢复的完整性不是特别的敏感，那么RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化的数据可能会丢失，Redis默认的就是RDB，一般需要修改。</p><h3 id="1-1-触发机制"><a href="#1-1-触发机制" class="headerlink" title="1.1 触发机制"></a>1.1 触发机制</h3><p>RDB的触发机制有下面三种</p><ol><li><p>save规则满足（save的配置上一节有） </p></li><li><p>执行flushAll 命令</p></li><li><p>退出redis</p></li></ol><h3 id="1-2-如何恢复"><a href="#1-2-如何恢复" class="headerlink" title="1.2 如何恢复"></a>1.2 如何恢复</h3><p>这个比较容易，只需要将rdb文件放在我们的启动目录下就行，redis启动的时候会自动检查dump.rdb恢复其中的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; config get dir  <span class="hljs-comment">#输入这个指令就可以得到启动目录，将rdb放里面就行</span><br>1) <span class="hljs-string">&quot;dir&quot;</span><br>2) <span class="hljs-string">&quot;/usr/local/bin&quot;</span> <br></code></pre></td></tr></table></figure><h3 id="1-3-优缺点"><a href="#1-3-优缺点" class="headerlink" title="1.3 优缺点"></a>1.3 优缺点</h3><p class="label label-success">优点</p><ol><li><p>适合大规模的数据恢复</p></li><li><p>对数据的完整性要不高</p></li></ol><p class="label label-danger">缺点</p><ol><li><p>需要一定的时间间隔进程操作，如果redis意外宕机，最后一次的数据就无了</p></li><li><p>fork进程的时候，会占用一定的内容空间</p></li></ol><h2 id="2、AOF"><a href="#2、AOF" class="headerlink" title="2、AOF"></a>2、AOF</h2><p>AOF全称appendonly file，只追加保存，默认是不保存的，需要手动配置然后 重启redis就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly no <span class="hljs-comment"># 把这里改成yes就行</span><br></code></pre></td></tr></table></figure><h3 id="2-1-AOF文件受损恢复"><a href="#2-1-AOF文件受损恢复" class="headerlink" title="2.1 AOF文件受损恢复"></a>2.1 AOF文件受损恢复</h3><p>redis提供了一个修复aof的工具 “redis-check-aof –fix”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">redis-check-aof --fix appendonly.aof     <span class="hljs-comment"># 输入这个指令进行AOf修复</span><br></code></pre></td></tr></table></figure><p><img src="https://img.mercuryblog.site/img/20220415223451.png" alt="修复截图"></p><p>修复之后可能会损失一些数据,但总比全部丢了好</p><h3 id="2-2-AOF的rewrite"><a href="#2-2-AOF的rewrite" class="headerlink" title="2.2 AOF的rewrite"></a>2.2 AOF的rewrite</h3><p>aof默认就是文件无限制的追加，因此如果一个文件太大之后，AOF会fork一个新的进程进行重写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto-aof-rewrite-percentage 100<br>auto-aof-rewrite-min-size 64mb<br></code></pre></td></tr></table></figure><h3 id="2-2-优点以及缺点"><a href="#2-2-优点以及缺点" class="headerlink" title="2.2 优点以及缺点"></a>2.2 优点以及缺点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendoly no   <span class="hljs-comment"># 默认不开启</span><br>appendfilename <span class="hljs-string">&quot;appendoly.aof&quot;</span> <span class="hljs-comment">#aof文件的名字 </span><br><br>appendfsync always   <span class="hljs-comment"># 每次修改都执行同步操作，消耗性能</span><br>appendfsync everysec <span class="hljs-comment"># 每秒执行一次，可能会丢失那一秒的数据</span><br>appendfsync no       <span class="hljs-comment"># 不执行同步，操作系统进行同步，速度最快</span><br></code></pre></td></tr></table></figure><p class="label label-success">优点</p><ol><li>每一次修改都同步，文件完整性会更加的好</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从来不同步，速度最快</li></ol><p class="label label-danger">缺点</p><ol><li><p>相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢</p></li><li><p>AOF运行效率也要比rdb慢，所以redis默认的配置就是rdb持久化</p></li></ol><h2 id="3、总结以及拓展"><a href="#3、总结以及拓展" class="headerlink" title="3、总结以及拓展"></a>3、总结以及拓展</h2><ol><li>RDB持久化方式能够再指定的时间间隔内对你的数据进行快照存储</li><li>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来会恢复原始的数据，AOF命令以Redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的额体积不至于太大</li><li>只做缓存，如果你只希望你的数据再服务器运行的时候存在，你也可以不使用持久化</li><li>同时开启两种持久化模式<ul><li>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常的情况下AOF文件保存的数据集要比RDB文件保存的数据集更加的完整</li><li>RDB的数据不实时，同时使用两种服务器重启也只会找AOF文件，那要不要只使用AOF呢🙌？答案是建议不要，因为RDB更加的适合用于备份数据库(AOF在不断变化不好备份)，快速重启，而且不会有AOF可能潜在的BUG，作为一个留着以防万一的手段</li></ul></li><li>性能建议<ul><li>因为RDB文件只用作后备用途，建议旨在Slave（附机）持久化RDB文件，而且只要15分钟备份一次就行了，只需要保留save 900 1  这条规则</li><li>如果Enable AOF，好处是在最恶劣情况下也只会失去不超过两秒的数据，启动脚本只load自己的文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞时不可避免的，只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值太小了，可以设置到5G以上，默认超过原大小100%大小重写可以改到适当的数值</li><li>如果不Enable AOF，仅靠 Master-Slave实现高可用性也可以，能够省掉一大笔的IO，也减少了rewrite时带来的系统波动，代价时如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个，微博就是这种架构</li></ul></li></ol><h1 id="十一、发布订阅"><a href="#十一、发布订阅" class="headerlink" title="十一、发布订阅"></a>十一、发布订阅</h1><p>redis中提供了类似消息队列的功能–发布订阅，但是更加专业的功能仍然需要消息队列来做，比如Kafaka等</p><h2 id="1-简单的来实现一下"><a href="#1-简单的来实现一下" class="headerlink" title="1. 简单的来实现一下"></a>1. 简单的来实现一下</h2><p>订阅一个频道</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; SUBSCRIBE chenning<br><br>Reading messages... (press Ctrl-C to quit)<br><br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br><br>2) <span class="hljs-string">&quot;chenning&quot;</span><br><br>3) (<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure><p>发送端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; PUBLISH chenning <span class="hljs-string">&quot;hell chenning&quot;</span>  <span class="hljs-comment"># 发送一则消息</span><br><br>(<span class="hljs-built_in">integer</span>) 1<br><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><p>再次回到刚刚订阅的那个窗口，可以看到以下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1) <span class="hljs-string">&quot;message&quot;</span><br><br>2) <span class="hljs-string">&quot;chenning&quot;</span><br><br>3) <span class="hljs-string">&quot;hell chenning&quot;</span><br></code></pre></td></tr></table></figure><p>上述就是一个简单的发布订阅</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h2><p>Redis 是使用c实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加加深对 Redis 的理解。Redis 通过 PUBLISH 、 SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p><p>通过 SUBSCRIBE 命令订阅某频道后， redis - server 里维护了一个字典，字典的键就是一个个 channel 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。 SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。 </p><p>通过PUBLSH 命令向订订阅者发送消息， redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户的链表，遍历这个链表，将消息发布给所有订阅者。</p><p> Pub / Sub 从字面上理解就是发布（ Publish ）与订阅（ Subscribe )，在 Redis 中，你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p><h1 id="十二、主从复制"><a href="#十二、主从复制" class="headerlink" title="十二、主从复制"></a>十二、主从复制</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点（ master / leader )，后者称为从节点( slave / folower )；数据的复制是单向的，只能由主节点到从节点。 Master 以写为主， Slave 以读为主。</p><p>默认情况下，每台 Redis 服务器都是王节点；且一个王节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</p><p><span class = "label label-success">主从复制的作用主要包括：</span></p><p>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。<br>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。<br>4、高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p><p>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的，原因如下：</p><p>1、从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；<br>2、从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为256G，也不能将所有内存用作 Redis 存储内存，<br>一般来说，单台 Redis 最大使用内存不应该超过20G。</p><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><p>只配置从库 不配置主库,因为默认自己为主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br><br><span class="hljs-comment"># Replication</span><br><br>role:master                                     <span class="hljs-comment"># 可以看到这里默认自己是主机</span><br><br>connected_slaves:0<br><br>master_failover_state:no-failover<br><br>master_replid:4fbf9a6eb1fa637393710a004aa2839976897b2c<br><br>master_replid2:0000000000000000000000000000000000000000<br><br>master_repl_offset:0<br><br>second_repl_offset:-1<br><br>repl_backlog_active:0<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:0<br><br>repl_backlog_histlen:0<br></code></pre></td></tr></table></figure><p>接下来我们使用三个端口启动三个redis服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Mercury Nconfig]<span class="hljs-comment"># cp redis.conf redis79.conf </span><br><br>[root@Mercury Nconfig]<span class="hljs-comment"># cp redis.conf redis80.conf </span><br><br>[root@Mercury Nconfig]<span class="hljs-comment"># cp redis.conf redis81.conf    # 复制了三份配置文件</span><br><br>[root@Mercury Nconfig]<span class="hljs-comment"># ll</span><br><br>total 368<br><br>-rw-r--r-- 1 root root 93725 Apr 15 18:56 redis79.conf<br><br>-rw-r--r-- 1 root root 93725 Apr 15 18:56 redis80.conf<br><br>-rw-r--r-- 1 root root 93725 Apr 15 18:56 redis81.conf<br><br>-rw-r--r-- 1 root root 93725 Apr 14 17:22 redis.conf<br><br><span class="hljs-comment"># 为保证不重名，配置文件里需要修改 端口 pid名字 log文件名字 dump.rdb名字</span><br><br>[root@Mercury bin]<span class="hljs-comment"># redis-server Nconfig/redis79.conf</span><br>[root@Mercury bin]<span class="hljs-comment"># redis-server Nconfig/redis80.conf</span><br>[root@Mercury bin]<span class="hljs-comment"># redis-server Nconfig/redis81.conf     #分别指定配置文件进行启动</span><br><br><br>[root@Mercury bin]<span class="hljs-comment"># ps -ef|grep redis</span><br><br>root  6093  1 0 19:05 ?  00:00:00 redis-server 127.0.0.1:6380<br><br>root  6108  1 0 19:05 ?  00:00:00 redis-server 127.0.0.1:6381<br><br>root  6277 19173 0 19:06 pts/1 00:00:00 grep --color=auto redis<br><br>root  27191  1 0 Apr14 ?  00:02:28 redis-server 127.0.0.1:6379    <span class="hljs-comment"># 可以看到已经分别启动了</span><br></code></pre></td></tr></table></figure><h2 id="3-一主二从"><a href="#3-一主二从" class="headerlink" title="3. 一主二从"></a>3. 一主二从</h2><p>所谓一主二从就是一台主机两台从机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379          <span class="hljs-comment"># 通过这个命令将6380设为6379的从机</span><br><br>OK<br><br>127.0.0.1:6380&gt; info replication<br><br><span class="hljs-comment"># Replication</span><br><br>role:slave                                      <span class="hljs-comment"># 可以看到已经变为从机</span><br><br>master_host:127.0.0.1<br><br>master_port:6379<br><br>master_link_status:up<br><br>master_last_io_seconds_ago:5<br><br>master_sync_in_progress:0<br><br>slave_read_repl_offset:14<br><br>slave_repl_offset:14<br><br>slave_priority:100<br><br>slave_read_only:1<br><br>replica_announced:1<br><br>connected_slaves:0<br><br>master_failover_state:no-failover<br><br>master_replid:1f474dfc54aedd694b971cefafd50927b55f97a4<br><br>master_replid2:0000000000000000000000000000000000000000<br><br>master_repl_offset:14<br><br>second_repl_offset:-1<br><br>repl_backlog_active:1<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:1<br><br>repl_backlog_histlen:14<br></code></pre></td></tr></table></figure><p>再次查看6379</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Mercury bin]<span class="hljs-comment"># redis-cli -p 6379</span><br><br>127.0.0.1:6379&gt; info replication<br><br><span class="hljs-comment"># Replication</span><br><br>role:master<br><br>connected_slaves:1                            <span class="hljs-comment"># 显示已连接从机数量</span><br><br>slave0:ip=127.0.0.1,port=6380,state=online,offset=84,lag=1  <span class="hljs-comment"># 显示从机状态     </span><br><br>master_failover_state:no-failover<br><br>master_replid:1f474dfc54aedd694b971cefafd50927b55f97a4<br><br>master_replid2:0000000000000000000000000000000000000000<br><br>master_repl_offset:84<br><br>second_repl_offset:-1<br><br>repl_backlog_active:1<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:1<br><br>repl_backlog_histlen:84<br></code></pre></td></tr></table></figure><p>以同样的步骤连接上6381</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br><br><span class="hljs-comment"># Replication</span><br><br>role:master<br><br>connected_slaves:2                <span class="hljs-comment"># 两个从机</span><br><br>slave0:ip=127.0.0.1,port=6380,state=online,offset=280,lag=0<br><br>slave1:ip=127.0.0.1,port=6381,state=online,offset=280,lag=1<br><br>master_failover_state:no-failover<br><br>master_replid:1f474dfc54aedd694b971cefafd50927b55f97a4<br><br>master_replid2:0000000000000000000000000000000000000000<br><br>master_repl_offset:280<br><br>second_repl_offset:-1<br><br>repl_backlog_active:1<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:1<br><br>repl_backlog_histlen:280<br><br><br></code></pre></td></tr></table></figure><p>因为这里我们是通过指令操作的，所以关闭服务后就不再是从机了，而是会变回主机，如果想一直是从机，我们可以在配置文件里面修改</p><p><span lable label-success>配置文件里面</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">replicaof   &lt;masterip&gt;   &lt;masterport&gt;<br></code></pre></td></tr></table></figure><h3 id="3-1-细节了解"><a href="#3-1-细节了解" class="headerlink" title="3.1 细节了解"></a>3.1 细节了解</h3><p>主机可以设置值，从机不能写只能读</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 <span class="hljs-string">&quot;v1&quot;</span><br><br>OK<br><br>127.0.0.1:6379&gt; get k1<br><br><span class="hljs-string">&quot;v1&quot;</span><br><br><span class="hljs-comment"># 主机设置 key-value</span><br><br><br><br>127.0.0.1:6380&gt; get k1<br><br><span class="hljs-string">&quot;v1&quot;</span><br><br><span class="hljs-comment"># 从机可以拿到</span><br><br><br>127.0.0.1:6380&gt; <span class="hljs-built_in">set</span> k2 <span class="hljs-string">&quot;v2&quot;</span><br><br>(error) READONLY You can<span class="hljs-string">&#x27;t write against a read only replica.</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 从机不可以写</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 主机断开</span><br><br>127.0.0.1:6379&gt; SHUTDOWN  <br><br>not connected&gt;<br><br><br><br>127.0.0.1:6380&gt; info replication<br><br><span class="hljs-comment"># Replication</span><br><br>role:slave                 <span class="hljs-comment"># 依然是从机</span><br><br>master_host:127.0.0.1<br><br>master_port:6379<br><br>master_link_status:down<br><br>master_last_io_seconds_ago:-1<br><br>master_sync_in_progress:0<br><br>slave_read_repl_offset:962<br><br>slave_repl_offset:962<br><br>master_link_down_since_seconds:33<br><br>slave_priority:100<br><br>slave_read_only:1<br><br>replica_announced:1<br><br>connected_slaves:0<br><br>master_failover_state:no-failover<br><br>master_replid:1f474dfc54aedd694b971cefafd50927b55f97a4<br><br>master_replid2:0000000000000000000000000000000000000000<br><br>master_repl_offset:962<br><br>second_repl_offset:-1<br><br>repl_backlog_active:1<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:1<br><br>repl_backlog_histlen:962<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 主机重新启动</span><br><br>[root@Mercury bin]<span class="hljs-comment"># redis-server Nconfig/redis79.conf </span><br><br>[root@Mercury bin]<span class="hljs-comment"># redis-cli -p 6379</span><br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k2 <span class="hljs-string">&quot;v2&quot;</span><br><br>OK<br><br><span class="hljs-comment">#再次设置值</span><br><br>127.0.0.1:6380&gt; get k2<br><br><span class="hljs-string">&quot;v2&quot;</span><br><br><span class="hljs-comment"># 依然可以拿到</span><br></code></pre></td></tr></table></figure><p>主机断开连接，从机依然连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息，但如果是使用命令行来配置的从机，重启后就会变回主机，不再和原来的主机同步，无法获取之后写入的信息，但只要再变回从机，立刻就可以从主机中获取值。</p><h2 id="4-复制原理"><a href="#4-复制原理" class="headerlink" title="4. 复制原理"></a>4. 复制原理</h2><p>Slave 启动成功连接到 master 后会发送一个 sync 命令</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后， master 将传送整个数据文件到 slave ，并完成一次完全同步。</p><p>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br>增量复制： Master 继续将新的所有收集到的修改命令依次传给 slave ，完成同步但是只要是重新连接 master ，一次完全同步（全量复制）将被自动执行🚗</p><h2 id="5-层层链路"><a href="#5-层层链路" class="headerlink" title="5. 层层链路"></a>5. 层层链路</h2><p>使用下面的方式将三个 redis 服务连接起来</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">79</span>-----------<span class="hljs-number">80</span>---------<span class="hljs-number">81</span> <br><br> <span class="hljs-attribute">M</span>          M  S        S<br></code></pre></td></tr></table></figure><p> 此时的80端口依旧是从节点，输入命令可以看到依然显示为Salve</p><p>一般层层链路不常用</p><h2 id="6-谋朝篡位-🤪"><a href="#6-谋朝篡位-🤪" class="headerlink" title="6. 谋朝篡位 🤪"></a>6. 谋朝篡位 🤪</h2><p>如果主机断开了连接，我们可以使用<span class = "label label-danger">SLAVEOF no one</span>命令使自己变成主机，其他主机可以手动连接到这个主节点</p><h1 id="十三、哨兵模式"><a href="#十三、哨兵模式" class="headerlink" title="十三、哨兵模式"></a>十三、哨兵模式</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>简单的来说，哨兵模式就是自动选举主机的模式。一般情况下，当主服务器宕机后，需要手动把一台服务器切换为主服务器，但是手动对于程序员来讲还是太麻烦了🙌,所以Redis从2.8正式提供了Sentinel哨兵模式来解决这个问题</p><p>哨兵模式能够在后台自动监测主机是否故障，如果故障了将根据投票数自动将从机转换为主机，哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程。原理就是哨兵通过发送命令，等待服务器响应，从而监控多个redis实例</p><p><img src="https://img.mercuryblog.site/img/image-20220417190613545.png" alt="哨兵示意图"></p><p>过程：假设主服务器宕机(比如断电啥的)，哨兵会检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong></p><h2 id="2-实际测试一波"><a href="#2-实际测试一波" class="headerlink" title="2. 实际测试一波"></a>2. 实际测试一波</h2><p> 简单编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Mercury Nconfig]<span class="hljs-comment"># vim sentinel.conf</span><br><br>sentinel monitor myredis 127.0.0.1 6379 1<br><br><span class="hljs-comment"># 后面这个数字1代表有多少个哨兵认为这个主机挂了就执行换主机的操作</span><br><br></code></pre></td></tr></table></figure><p>启动哨兵服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动命令</span><br>[root@Mercury bin]<span class="hljs-comment"># redis-sentinel Nconfig/sentinel.conf</span><br>32048:X 17 Apr 2022 18:15:13.108 <span class="hljs-comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br>32048:X 17 Apr 2022 18:15:13.108 <span class="hljs-comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=32048, just started</span><br>32048:X 17 Apr 2022 18:15:13.108 <span class="hljs-comment"># Configuration loaded</span><br>32048:X 17 Apr 2022 18:15:13.109 * monotonic clock: POSIX clock_gettime<br>                _._                                                  <br>           _.-``__ <span class="hljs-string">&#x27;&#x27;</span>-._                                             <br>      _.-``    `.  `_.  <span class="hljs-string">&#x27;&#x27;</span>-._           Redis 6.2.6 (00000000/0) 64 bit<br>  .-`` .-```.  ```\/    _.,_ <span class="hljs-string">&#x27;&#x27;</span>-._                                  <br> (    <span class="hljs-string">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="hljs-string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="hljs-string">&#x27;|     Port: 26379</span><br><span class="hljs-string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 32048<br>  `-._    `-._  `-./  _.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                   <br> |`-._`-._    `-.__.-<span class="hljs-string">&#x27;    _.-&#x27;</span>_.-<span class="hljs-string">&#x27;|                                  </span><br><span class="hljs-string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="hljs-string">&#x27;    |           https://redis.io       </span><br><span class="hljs-string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                   <br> |`-._`-._    `-.__.-<span class="hljs-string">&#x27;    _.-&#x27;</span>_.-<span class="hljs-string">&#x27;|                                  </span><br><span class="hljs-string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="hljs-string">&#x27;    |                                  </span><br><span class="hljs-string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                   <br>      `-._    `-.__.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                       <br>          `-._        _.-<span class="hljs-string">&#x27;                                           </span><br><span class="hljs-string">              `-.__.-&#x27;</span>                                               <br><br>32048:X 17 Apr 2022 18:15:13.110 <span class="hljs-comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br>32048:X 17 Apr 2022 18:15:13.114 <span class="hljs-comment"># Sentinel ID is b7a639b54bcccf0219a5c5390726703b88a2d628</span><br>32048:X 17 Apr 2022 18:15:13.114 <span class="hljs-comment"># +monitor master myredis 127.0.0.1 6379 quorum 1</span><br>32048:X 17 Apr 2022 18:15:13.115 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379<br></code></pre></td></tr></table></figure><p>然后我们关闭6379这个主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; SHUTDOWN<br>not connected&gt;<br></code></pre></td></tr></table></figure><p>等待一段时间后可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">32048:X 17 Apr 2022 18:21:49.348 <span class="hljs-comment"># +sdown master myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.348 <span class="hljs-comment"># +odown master myredis 127.0.0.1 6379 #quorum 1/1         #满足了条件</span><br><br>32048:X 17 Apr 2022 18:21:49.348 <span class="hljs-comment"># +new-epoch 1</span><br><br>32048:X 17 Apr 2022 18:21:49.348 <span class="hljs-comment"># +try-failover master myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.351 <span class="hljs-comment"># +vote-for-leader b7a639b54bcccf0219a5c5390726703b88a2d628 1</span><br><br>32048:X 17 Apr 2022 18:21:49.351 <span class="hljs-comment"># +elected-leader master myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.351 <span class="hljs-comment"># +failover-state-select-slave master myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.442 <span class="hljs-comment"># +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.442 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379<br><br>32048:X 17 Apr 2022 18:21:49.508 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379<br><br>32048:X 17 Apr 2022 18:21:49.716 <span class="hljs-comment"># +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.716 <span class="hljs-comment"># +failover-state-reconf-slaves master myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.789 <span class="hljs-comment"># +failover-end master myredis 127.0.0.1 6379</span><br><br>32048:X 17 Apr 2022 18:21:49.789 <span class="hljs-comment"># +switch-master myredis 127.0.0.1 6379 127.0.0.1 6380          # 6380成为了主机</span><br><br>32048:X 17 Apr 2022 18:21:49.790 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6380<br><br>32048:X 17 Apr 2022 18:21:50.420 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6380<br><br>32048:X 17 Apr 2022 18:22:19.834 <span class="hljs-comment"># +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6380</span><br></code></pre></td></tr></table></figure><p>我们再来看看6380的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; info replication<br><br><span class="hljs-comment"># Replication</span><br><br>role:master                            <span class="hljs-comment"># 很明显这里已经成为了主机</span><br><br>connected_slaves:1<br><br>slave0:ip=127.0.0.1,port=6381,state=online,offset=265004,lag=1<br><br>master_failover_state:no-failover<br><br>master_replid:4e0b279d0bae3d59691444c3d8a264de3859340b<br><br>master_replid2:9ea51c7e5cefa6a5b8e281bb4fa433fb34f9292d<br><br>master_repl_offset:265136<br><br>second_repl_offset:258784<br><br>repl_backlog_active:1<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:1<br><br>repl_backlog_histlen:265136<br></code></pre></td></tr></table></figure><p>以上就是哨兵模式的实际测试，如果主机此时回来了，只能归到新的主机下</p><h2 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3. 优缺点"></a>3. 优缺点</h2><p><span class = "label label-success">优点</span></p><ol><li>哨兵集群，基于主从复制模式，所有的主从配置的优点，它全都有</li><li>主从是可以切换的，故障可以转移，系统的可用性会更好</li><li>哨兵模式就是主从模式的升级，手动到自动</li></ol><p><span class = "label label-danger">缺点</span></p><ol><li>Redis不好在线扩容，集群的数量一旦达到上限，在线扩容就十分的麻烦</li><li>实现哨兵模式的配置比较麻烦，里面有很多选择</li></ol><h2 id="哨兵模式的全部配置"><a href="#哨兵模式的全部配置" class="headerlink" title="哨兵模式的全部配置"></a>哨兵模式的全部配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Example sentinel.conf</span><br><br><span class="hljs-comment"># 哨兵sentinel实例运行的端口 默认26379</span><br><br>port 26379<br><br><br><br><span class="hljs-comment"># 哨兵sentinel的工作目录</span><br><br>dir /tmp<br><br><br><br><span class="hljs-comment"># 哨兵sentinel监控的redis主节点的 ip port</span><br><br><span class="hljs-comment"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span><br><br><span class="hljs-comment"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span><br><br><span class="hljs-comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><br>sentinel monitor mymaster 127.0.0.1 6379 2<br><br><br><br><span class="hljs-comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><br><br><span class="hljs-comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><br><br><span class="hljs-comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><br>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<br><br><br><br><span class="hljs-comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><br><br><span class="hljs-comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><br>sentinel down-after-milliseconds mymaster 30000<br><br><br><br><span class="hljs-comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><br><span class="hljs-comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br><br>sentinel parallel-syncs mymaster 1<br><br><br><br><span class="hljs-comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span><br><br><span class="hljs-comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><br><br><span class="hljs-comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><br><br><span class="hljs-comment">#3.当想要取消一个正在进行的failover所需要的时间。 </span><br><br><span class="hljs-comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><br><span class="hljs-comment"># 默认三分钟</span><br><br><span class="hljs-comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><br>sentinel failover-timeout mymaster 180000<br><br><br><br><span class="hljs-comment"># SCRIPTS EXECUTION</span><br><br><span class="hljs-comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><br><br><span class="hljs-comment">#对于脚本的运行结果有以下规则：</span><br><br><span class="hljs-comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><br><br><span class="hljs-comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><br><br><span class="hljs-comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><br><br><span class="hljs-comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><br><br><span class="hljs-comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><br><br><br><br><span class="hljs-comment">#通知脚本</span><br><br><span class="hljs-comment"># shell编程</span><br><br><span class="hljs-comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><br>sentinel notification-script mymaster /var/redis/notify.sh<br><br><br><br><span class="hljs-comment"># 客户端重新配置主节点参数脚本</span><br><br><span class="hljs-comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><br><br><span class="hljs-comment"># 以下参数将会在调用脚本时传给脚本:</span><br><br><span class="hljs-comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><br><span class="hljs-comment"># 目前&lt;state&gt;总是“failover”,</span><br><br><span class="hljs-comment"># &lt;role&gt;是“leader”或者“observer”中的一个。</span><br><br><span class="hljs-comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><br><br><span class="hljs-comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><br><br><span class="hljs-comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br><br>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class="hljs-comment"># 一般都是由运维来配置！</span><br><br><br></code></pre></td></tr></table></figure><h1 id="十四、缓存穿透和雪崩"><a href="#十四、缓存穿透和雪崩" class="headerlink" title="十四、缓存穿透和雪崩"></a>十四、缓存穿透和雪崩</h1><h2 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>缓存穿透的概念很简单，用户想要查询一个数据，发现 redis 内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！)，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><h3 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h3><h4 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h4><p>布隆过滤器是一种数据结构，对所有可能査询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p><p><img src="https://img.mercuryblog.site/img/image-20220417194623551.png" alt="布隆过滤器"></p><h4 id="缓存空对象"><a href="#缓存空对象" class="headerlink" title="缓存空对象"></a>缓存空对象</h4><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时设置一个过期时间，之后再访问这个数据会从缓存中获取，保护了后端数据源</p><p><img src="https://img.mercuryblog.site/img/image-20220417194749943.png" alt="缓存空对象"></p><p>但是这种方法会存在两个问题：<br>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；<br>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会<br>有影响。</p><h2 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2. 缓存击穿"></a>2. 缓存击穿</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><h3 id="2-2-解决方案"><a href="#2-2-解决方案" class="headerlink" title="2.2 解决方案"></a>2.2 解决方案</h3><h4 id="设置热点数据永不过期"><a href="#设置热点数据永不过期" class="headerlink" title="设置热点数据永不过期"></a>设置热点数据永不过期</h4><p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p><h4 id="加互斥锁"><a href="#加互斥锁" class="headerlink" title="加互斥锁"></a>加互斥锁</h4><p>分布式锁：使用分布式锁，保证对于每个 key 同时只有一个线程去査询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p><h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。 Redis 宕机！发生雪崩的原因之一，比如在双十一零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知知的，很有可能瞬间就把数据库压垮。</p><h3 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h3><h4 id="redis-高可用"><a href="#redis-高可用" class="headerlink" title="redis 高可用"></a>redis 高可用</h4><p>这个思想的含义是，既然 redis 有可能挂掉，那我多增设几台 redis ，这样一台挂掉之后其他的还可以继续工作，实就是搭建的集群。（异地多活！)</p><h4 id="限流降级"><a href="#限流降级" class="headerlink" title="限流降级"></a>限流降级</h4><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p><h4 id="数据预热"><a href="#数据预热" class="headerlink" title="数据预热"></a>数据预热</h4><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key ，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>]]></content>
    
    
    <categories>
      
      <category>database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
      <tag>NoSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2022/03/05/Git/"/>
    <url>/2022/03/05/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="一、版本控制"><a href="#一、版本控制" class="headerlink" title="一、版本控制"></a>一、版本控制</h1><h2 id="1、什么是版本控制"><a href="#1、什么是版本控制" class="headerlink" title="1、什么是版本控制"></a>1、什么是版本控制</h2><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。其目的就是用于管理多人协同开发项目而诞生的技术。</p><h2 id="2、常见的版本控制工具"><a href="#2、常见的版本控制工具" class="headerlink" title="2、常见的版本控制工具"></a>2、常见的版本控制工具</h2><p>目前市面上主流的版本控制工具主要有</p><ul><li>Git</li><li>SVN</li><li> CVS</li><li>VSS</li><li>TFS</li><li>Visual studio Online</li></ul><p>Git 是目前全世界最为先进的分布式版本管理工具。</p><h2 id="3、版本控制的分类"><a href="#3、版本控制的分类" class="headerlink" title="3、版本控制的分类"></a>3、版本控制的分类</h2><h3 id="3-1、本地版本控制分类"><a href="#3-1、本地版本控制分类" class="headerlink" title="3.1、本地版本控制分类"></a>3.1、本地版本控制分类</h3><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。<br><img src="https://img-blog.csdnimg.cn/a6d6623d1bf3438d93063435e4494f22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_14,color_FFFFFF,t_70,g_se,x_16" alt="本地版本管理控制"></p><h3 id="3-2、集中版本控制分类"><a href="#3-2、集中版本控制分类" class="headerlink" title="3.2、集中版本控制分类"></a>3.2、集中版本控制分类</h3><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS<br><img src="https://img-blog.csdnimg.cn/55ea1c2611e641d689e75cb8754fa675.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="集中版本控制"></p><h3 id="3-3、分布式版本控制分类"><a href="#3-3、分布式版本控制分类" class="headerlink" title="3.3、分布式版本控制分类"></a>3.3、分布式版本控制分类</h3><p>最具有代表性的当然就是Git啦，所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！<br><img src="https://img-blog.csdnimg.cn/e6ef92f4ca81463381b6bc6b5942b13d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="f分布式版本控制"></p><h1 id="二、初识Git"><a href="#二、初识Git" class="headerlink" title="二、初识Git"></a>二、初识Git</h1><h2 id="1、下载地址"><a href="#1、下载地址" class="headerlink" title="1、下载地址"></a>1、下载地址</h2><p>打开 <a href="https://git-scm.com/">git官网</a>或可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><h2 id="2、三个程序"><a href="#2、三个程序" class="headerlink" title="2、三个程序"></a>2、三个程序</h2><p><img src="https://img-blog.csdnimg.cn/60f5229d92fd4cf2b05b2e79167881da.png" alt="git的三个程序"></p><h2 id="3、配置"><a href="#3、配置" class="headerlink" title="3、配置"></a>3、配置</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 查看配置</span><br>git config -l<br><br><span class="hljs-comment">#查看系统config</span><br>git config <span class="hljs-params">--system</span> <span class="hljs-params">--list</span><br>　　<br><span class="hljs-comment">#查看当前用户（global）配置</span><br>git config <span class="hljs-params">--global</span>  <span class="hljs-params">--list</span><br></code></pre></td></tr></table></figure><p>如图：<br><img src="https://img-blog.csdnimg.cn/ad3e375cbb9c45e6852b1795abef485a.png" alt="在这里插入图片描述"></p><h1 id="三、使用Git"><a href="#三、使用Git" class="headerlink" title="三、使用Git"></a>三、使用Git</h1><h2 id="1、工作原理"><a href="#1、工作原理" class="headerlink" title="1、工作原理"></a>1、工作原理</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。加上远程的git仓库(Remote Directory)就可以分为四个工作区域。</p><ul><li><p>Workspace：工作区，就是你平时存放项目代码的地方</p></li><li><p>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p></li><li><p>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p></li><li><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p></li></ul><h2 id="2、工作流程"><a href="#2、工作流程" class="headerlink" title="2、工作流程"></a>2、工作流程</h2><ul><li><p>在工作目录中添加、修改文件；</p></li><li><p>将需要进行版本管理的文件放入暂存区域；</p></li><li><p>将暂存区域的文件提交到git仓库。</p></li></ul><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)<br><img src="https://img-blog.csdnimg.cn/b5ab4d9df669441bab7d4886556295ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="3、常用指令"><a href="#3、常用指令" class="headerlink" title="3、常用指令"></a>3、常用指令</h2><h3 id="3-1-克隆仓库"><a href="#3-1-克隆仓库" class="headerlink" title="3.1 克隆仓库"></a>3.1 克隆仓库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 克隆一个项目和它的整个代码历史(版本信息)</span><br><br> git <span class="hljs-keyword">clone</span> <span class="hljs-title">[url</span>]  <br><br><span class="hljs-comment"># 克隆仓库指定的分支的代码，develop为需要拉取的分支，giturl为git仓库地址</span><br><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> develop giturl<br><br></code></pre></td></tr></table></figure><p>克隆之后，git的目录下面就会有对应名字的一个项目仓库<br><img src="https://img-blog.csdnimg.cn/bba194c512b744cf9d67d179a6228890.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>打开显示隐藏的项目，就会有一个.git文件夹<br><img src="https://img-blog.csdnimg.cn/1e02016d7f0e45f280b15b14f6c7d444.png" alt="在这里插入图片描述"><br>把这个文件夹复制一份到你的项目文件下就可以和你远程仓库形成类似于绑定的关系，复制到项目文件后，用idea打开的话就会自动多出来几个按钮<br><img src="https://img-blog.csdnimg.cn/c7ea8f3a8a5944acbaceb9d3d9e5a577.png" alt="多出来的按钮"><br>按钮作用在后面</p><h3 id="3-2-文件状态"><a href="#3-2-文件状态" class="headerlink" title="3.2 文件状态"></a>3.2 文件状态</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-meta">#查看所有文件状态</span><br>git status<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f02d2e7ab35945748c4852c460717158.png" alt="文件颜色"></p><ul><li>红褐色：创建之后没有add，没提交，不在Git版本控制范围之内，这时候文件是红褐色的，需要先add文件；</li><li>绿色：add之后是文件绿色的，没有提交（commit）;</li><li>蓝色：原本有一个文件，改动过后没有提交（commit）是蓝色的，提交之后，变成正常颜色。</li></ul><h3 id="3-2-添加和提交"><a href="#3-2-添加和提交" class="headerlink" title="3.2 添加和提交"></a>3.2 添加和提交</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 添加所有文件到暂存区</span><br><br>git add .                  <br><br><span class="hljs-meta"># 提交暂存区中的内容到本地仓库 -m 提交信息</span><br><br>git commit -m <span class="hljs-string">&quot;消息内容&quot;</span>    <br><br><span class="hljs-meta"># push到远程仓库</span><br><br>git push<br><br><br><span class="hljs-meta">#版本发布  当前的版本号 发布版本 比如</span><br><br>git tag -a v1<span class="hljs-number">.0</span><br> <br><br>把这个版本发布到线上<br><br>git push --tags<br></code></pre></td></tr></table></figure><p>在idea中:<br><img src="https://img-blog.csdnimg.cn/d86fea1809d947e5af9bd94b10d2de21.png" alt="在这里插入图片描述"></p><h1 id="四、忽略文件"><a href="#四、忽略文件" class="headerlink" title="四、忽略文件"></a>四、忽略文件</h1><p>就是选择不上传到仓库的文件，通常用在主目录下建立”.gitignore”文件用来配置，此文件有如下规则：</p><ul><li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p></li><li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p></li><li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p></li><li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p></li><li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#为注释</span><br>*.txt        <span class="hljs-comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br>!lib.txt     <span class="hljs-comment">#但lib.txt除外</span><br>/temp        <span class="hljs-comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br>build<span class="hljs-regexp">/       #忽略build/</span>目录下的所有文件<br>doc<span class="hljs-regexp">/*.txt    #会忽略 doc/</span>notes.txt 但不包括 doc<span class="hljs-regexp">/server/</span>arch.txt<br></code></pre></td></tr></table></figure><h1 id="五、Git分支"><a href="#五、Git分支" class="headerlink" title="五、Git分支"></a>五、Git分支</h1><p><img src="https://img-blog.csdnimg.cn/0b5b1cc101cd4e8784369a44987907bb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="分支"><br>分支常用的命令：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-meta"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-meta"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-meta"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-meta"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-meta"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-meta"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure></li></ul><p>愉快的Git结束。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2022/02/21/Nginx/"/>
    <url>/2022/02/21/Nginx/</url>
    
    <content type="html"><![CDATA[<p>俗话说得好，没有问题是加一层解决不了的，如果有，那就再加一层。Nginx就是这样的一种技术。</p><h1 id="一、Nginx简介"><a href="#一、Nginx简介" class="headerlink" title="一、Nginx简介"></a>一、Nginx简介</h1><p>Nginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好</p><p>Nginx 是一个安装非常的简单、配置文件非常简洁（还能够支持perl语法）、Bug非常少的服务。Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。</p><h1 id="二、-Nginx的作用"><a href="#二、-Nginx的作用" class="headerlink" title="二、 Nginx的作用"></a>二、 Nginx的作用</h1><p>Nginx的主要功能有HTTP代理、负载均衡和动静分离。</p><h2 id="1、正向代理"><a href="#1、正向代理" class="headerlink" title="1、正向代理"></a>1、正向代理</h2><p><img src="https://img-blog.csdnimg.cn/cccd8f324466473d83ac9883ac2c0ca0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="正向代理"><br>正向代理是代理客户端</p><h2 id="2、反向代理"><a href="#2、反向代理" class="headerlink" title="2、反向代理"></a>2、反向代理</h2><p><img src="https://img-blog.csdnimg.cn/6e3abcc0be4b403594e126738ff1fb05.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="反向代理"><br>反向代理是代理服务器端，是web服务器最常用的功能之一</p><p>让你无感知的访问一个域名就能够连接</p><h2 id="3、负载均衡"><a href="#3、负载均衡" class="headerlink" title="3、负载均衡"></a>3、负载均衡</h2><p>Nginx的负载均衡主要有内置策略和扩展策略，内置策略为轮询，加权轮询，Ip hash。扩展策略就非常多了。</p><p><strong>轮询</strong><br><img src="https://img-blog.csdnimg.cn/a9c7782ac9b042429051778ac52e2f1b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="轮询方法"><br><strong>加权轮询</strong></p><p><img src="https://img-blog.csdnimg.cn/88ae6e7914094e6b99e49d26c516b75e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="加权轮询"><br><strong>Iphash</strong></p><p>对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。<br><img src="https://img-blog.csdnimg.cn/2d0732fd4b384bc9b4324ddac01cc55f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="Iphash"></p><h2 id="4、动静分离"><a href="#4、动静分离" class="headerlink" title="4、动静分离"></a>4、动静分离</h2><p>简单的来说就是把一些不需要经过后台处理的文件交由<br>静态资源服务器处理，直接从这个服务器加载静态资源，提高速度<br><img src="https://img-blog.csdnimg.cn/d64bf412a841405eb80a9c74775ecead.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="动静分离"></p><h1 id="三、安装及注意事项"><a href="#三、安装及注意事项" class="headerlink" title="三、安装及注意事项"></a>三、安装及注意事项</h1><h2 id="1、windows"><a href="#1、windows" class="headerlink" title="1、windows"></a>1、windows</h2><p>通过官网下载windows版后解压<br><a><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></a> </p><p><img src="https://img-blog.csdnimg.cn/b7d440da6b7b4eb483d84bd763ed0270.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>启动 直接双击exe 或者cmd</p><p>从配置文件中可以看出nginx默认配置的是80端口<br><img src="https://img-blog.csdnimg.cn/f2ac46e66d8146e08261c4528b5b88db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_13,color_FFFFFF,t_70,g_se,x_16" alt="默认80端口"></p><p>配置文件的位置<br><img src="https://img-blog.csdnimg.cn/711c638703dc4581b4943c0318f186b5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="配置文件"></p><p>因为是默认80端口，所以这里可以不写,输入IP地址，然后就可以看到欢迎界面</p><p><img src="https://img-blog.csdnimg.cn/3a43ec8102ad4732af051f5719d07a01.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="欢迎界面"></p><h2 id="2、Linux"><a href="#2、Linux" class="headerlink" title="2、Linux"></a>2、Linux</h2><p>这里不详解,主要推荐一篇文章<br><a><a href="https://blog.csdn.net/qq_44170721/article/details/109022427">https://blog.csdn.net/qq_44170721/article/details/109022427</a></a><br>或者直接宝塔安装</p><p><strong>特别注意</strong><br>在我使用宝塔面板进行nginx的安装的时候，安装完成后，发现死活进不了欢迎界面，本应正常访问的欢迎页却是找不到页面，并且配置文件也不一样，后来我才发现宝塔上面的是改过的，更适合在拥有图形化界面的宝塔面板中使用，一键傻瓜式操作(都给你弄好了)，之所以会出现提示找不到页面，原因是宝塔把index页欢迎页改成了提示找不到页面，是用于部署了项目后，项目没有加载出来等的提示页面。而官方的nginx则没有这个改动，可以正常显示欢迎页。<br><img src="https://img-blog.csdnimg.cn/b7d43b1ca7874e95a91b74cd6b0bdd48.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="改动后的宝塔i上的nginx的index"></p><p><img src="https://img-blog.csdnimg.cn/84c86d4a2d8e426cb1e6a2a8545c3294.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="安装官方的可以正常显示"></p><h1 id="四、Nginx的使用"><a href="#四、Nginx的使用" class="headerlink" title="四、Nginx的使用"></a>四、Nginx的使用</h1><p>常用的一些命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/local/nginx/sbin/</span><br><span class="hljs-string">./nginx</span>  启动<br><span class="hljs-string">./nginx</span> -s stop  停止<br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">quit</span>  安全退出<br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span>  重新加载配置文件<br>ps aux|grep nginx  查看nginx进程<br></code></pre></td></tr></table></figure><h1 id="五、配置文件"><a href="#五、配置文件" class="headerlink" title="五、配置文件"></a>五、配置文件</h1><p>在使用nginx的过程中最为重要的就是配置文件的书写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf    <span class="hljs-comment">#默认的 nginx.conf 文件的地址</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#源文件</span><br><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment"># 全局块</span><br><span class="hljs-comment"># 从配置文件开始到 events 块之间的内容，主要会设置一些影响nginx 服务器整体运行的配置指令，主要包括配 置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以 及配置文件的引入等。</span><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-comment"># events块</span><br><span class="hljs-comment">#主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否 允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</span><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-comment"># http全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</span><br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>  <br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>      <br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment"># 类似虚拟机，可以有多个server配置</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-comment"># 监听的端口号</span><br>        <br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-comment">#服务器地址</span><br>        <br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>       <br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;       <br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>反向代理配置实例</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>    <br>        location / &#123;<br>            root   <span class="hljs-regexp">/www/</span>wwwroot<span class="hljs-regexp">/LostandFound/</span>frontgroundSystem;  <br>            <span class="hljs-comment"># 这里配置的是前端的dist文件目录</span><br>            <br>            index index.html;<br>            <br>            try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html; <br>            <span class="hljs-comment">#用于重定向</span><br>        &#125;<br> <br>        location   <span class="hljs-regexp">/back/</span> &#123;<br>            proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span>/;<br>            <span class="hljs-comment"># 主机地址及项目端口号</span><br>        &#125;<br>        <span class="hljs-comment"># 前缀有字符串/back/ (这里有大坑)</span><br>        <br>        <br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        location = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><p>添加ssl证书</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk">server&#123;<br>       <br>        listen <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-comment"># 新版本的nginx不用再写ssl on</span><br>        <br>        server_name mercuryblog.site;<br>        <span class="hljs-comment">#写域名</span><br>        <br>        ssl_certificate <span class="hljs-regexp">/etc/</span>ssl/<span class="hljs-number">7231943</span>_mercuryblog.site.pem;<br>        <span class="hljs-comment">#证书的pem文件地址</span><br>       <br>        ssl_certificate_key <span class="hljs-regexp">/etc/</span>ssl/<span class="hljs-number">7231943</span>_mercuryblog.site.key;<br>        <span class="hljs-comment">#证书的密钥地址</span><br>        <br>        ssl_session_timeout <span class="hljs-number">5</span>m;<br>        ssl_protocols TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>        <span class="hljs-comment"># 加密协议</span><br>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>        <span class="hljs-comment"># 加密算法</span><br>        ssl_prefer_server_ciphers on;<br>     <br>        location / &#123;<br>            root   <span class="hljs-regexp">/www/</span>wwwroot<span class="hljs-regexp">/LostandFound/</span>frontgroundSystem;<br>            index index.html;           <br>            try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.html;<br>        &#125;<br> <br>        location   <span class="hljs-regexp">/back/</span> &#123;<br>            proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span>/;<br>        &#125;<br>        <br>        <br>        error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>        location = /<span class="hljs-number">50</span>x.html &#123;<br>            root   html;<br>        &#125;<br>        <br><br>    &#125;<br></code></pre></td></tr></table></figure><p>负载均衡配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> myserver &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">208.208.128.122:8081</span> weight=<span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">208.208.128.122:8082</span> weight=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment"># weight代表权重，默认为1，这里的意思是，如果有三次访问，那么会有一次转发到8081，两次转发到8082</span><br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  <span class="hljs-number">208.208.128.122</span>;<br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">proxy_pass</span>   http://myserver;<br>        <span class="hljs-comment"># 这里的myserver相当于就是一个代号了，真正的转发在上面的upsteam</span><br>        <br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>特别注意</strong></p><p>location 中 / 的使用</p><ul><li><p>proxy_pass代理地址端口后无任何字符，转发后地址：代理地址+访问URL目录部分</p></li><li><p>proxy_pass代理地址端口后有目录(包括 / )，转发后地址：代理地址+访问URL目录部分去除location匹配目录</p></li></ul><p>例如</p><p>访问<a href="http://127.0.0.1/v1/pt/apply/page%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80">http://127.0.0.1/v1/pt/apply/page这个地址</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">location <span class="hljs-regexp">/v1/</span> &#123;<br>    proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8899</span>;<br>&#125;<br><br>实际地址：http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8765</span><span class="hljs-regexp">/v1/</span>pt<span class="hljs-regexp">/apply/</span>page<br><br>location <span class="hljs-regexp">/v1/</span> &#123;<br>    proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8899</span>/;<br>&#125;<br><br>实际地址：http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8765</span><span class="hljs-regexp">/pt/</span>apply/page<br></code></pre></td></tr></table></figure><h1 id="六、部署前端的过程中遇到的各种情况"><a href="#六、部署前端的过程中遇到的各种情况" class="headerlink" title="六、部署前端的过程中遇到的各种情况"></a>六、部署前端的过程中遇到的各种情况</h1><h2 id="1、前端项目打包"><a href="#1、前端项目打包" class="headerlink" title="1、前端项目打包"></a>1、前端项目打包</h2><p><img src="https://img-blog.csdnimg.cn/6dac65eecb6c4442b27c6e81b9f2dd61.png" alt="打包"></p><p>通过<strong>npm run build</strong>命令</p><p><img src="https://img-blog.csdnimg.cn/b31ea28f204045b68d635f649b8b9eac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="打包完成"></p><p>打包完成后会有一个dist文件夹，这个就是需要部署的项目。</p><h2 id="2、前端打包的时候出现下面的情况"><a href="#2、前端打包的时候出现下面的情况" class="headerlink" title="2、前端打包的时候出现下面的情况"></a>2、前端打包的时候出现下面的情况</h2><p><img src="https://img-blog.csdnimg.cn/233b0814f2b94dedb411b9ed955b2218.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="less-loader"></p><p>缺少less_loader导致的，通过<strong>npm install less-loader</strong> 即可。</p><h2 id="3、安装依赖"><a href="#3、安装依赖" class="headerlink" title="3、安装依赖"></a>3、安装依赖</h2><p><img src="https://img-blog.csdnimg.cn/6b01c2e4edd149db8cf3d027b4427a42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="未安装依赖"><br>一般情况下，前端的项目上传到github等网站上面的时候是忽略了依赖的，所以打包之前需要执行下面的指令进行安装依赖</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install<br><span class="hljs-built_in">npm</span> run serve<br></code></pre></td></tr></table></figure><h2 id="4、页面404"><a href="#4、页面404" class="headerlink" title="4、页面404"></a>4、页面404</h2><p><img src="https://img-blog.csdnimg.cn/42a2494dc3b14ab5bce9d4d474350a43.png" alt="404"><br>前端在写axios的时候在访问的路径上面多加了一个back前缀，导致404，这个时候就需要通过nginx配置，把这个/back/给填上。</p><h2 id="5、页面502"><a href="#5、页面502" class="headerlink" title="5、页面502"></a>5、页面502</h2><p>多半是你在测试的时候导致程序报错，停止了服务。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux</title>
    <link href="/2022/02/17/linux/"/>
    <url>/2022/02/17/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Linux简介"><a href="#一、Linux简介" class="headerlink" title="一、Linux简介"></a>一、Linux简介</h1><p>此笔记所使用的Linux版本为CentOS 7</p><p>linux的核心思想</p><p> <strong>一切皆文件</strong> </p><p>现在很多的大型项目都是部署在Linux服务器端，所以Linux地位依然不可动摇，作为一个后端程序员，会Linux是基本功</p><p>Linux最初是由一个芬兰人在上大学的时候出于个人的爱好写出来的，Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统</p><h2 id="1、Linux的版本"><a href="#1、Linux的版本" class="headerlink" title="1、Linux的版本"></a>1、Linux的版本</h2><p>版本一览<br><img src="https://img-blog.csdnimg.cn/75bd884164024a4a954c9ce8fec87895.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>市面上有很多Linux发行版，比如CentOS,Ubuntu，RedHat等等，其中还有kali linux 这个主要是用作安全渗透测试</p><h2 id="2、Linux环境搭建"><a href="#2、Linux环境搭建" class="headerlink" title="2、Linux环境搭建"></a>2、Linux环境搭建</h2><p>略，我这里使用的是阿里云轻量级服务器搭载的CentOS 7操作系统</p><h1 id="二、Linux基本了解"><a href="#二、Linux基本了解" class="headerlink" title="二、Linux基本了解"></a>二、Linux基本了解</h1><h2 id="1、关机"><a href="#1、关机" class="headerlink" title="1、关机"></a>1、关机</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sync </span><span class="hljs-comment"># 将数据由内存同步到硬盘中。</span><br><br><span class="hljs-keyword">shutdown </span><span class="hljs-comment"># 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><br><span class="hljs-keyword">shutdown </span>–h <span class="hljs-number">10</span> <span class="hljs-comment"># 这个命令告诉大家，计算机将在10分钟后关机</span><br><br><span class="hljs-keyword">shutdown </span>–h now <span class="hljs-comment"># 立马关机</span><br><br><span class="hljs-keyword">shutdown </span>–h <span class="hljs-number">20</span>:<span class="hljs-number">25</span> <span class="hljs-comment"># 系统会在今天20:25关机</span><br><br><span class="hljs-keyword">shutdown </span>–h +<span class="hljs-number">10</span> <span class="hljs-comment"># 十分钟后关机</span><br><br><span class="hljs-keyword">shutdown </span>–r now <span class="hljs-comment"># 系统立马重启</span><br><br><span class="hljs-keyword">shutdown </span>–r +<span class="hljs-number">10</span> <span class="hljs-comment"># 系统十分钟后重启</span><br><br>reboot <span class="hljs-comment"># 就是重启，等同于 shutdown –r now</span><br><br>halt <span class="hljs-comment"># 关闭系统，等同于shutdown –h now 和 poweroff</span><br></code></pre></td></tr></table></figure><p>需要注意的是，重启和关机最好都在操作前，进行一下同步操作，在Linux里面，只要指令没有输出，就是指令成功了</p><h2 id="2、系统目录结构"><a href="#2、系统目录结构" class="headerlink" title="2、系统目录结构"></a>2、系统目录结构</h2><p><img src="https://img-blog.csdnimg.cn/c0277489d2df47bba6c309e71e9ec3b8.png" alt="在这里插入图片描述"><br>Linux采用的是树状目录结构，这点和Windows类似</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/bin</span>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。<br><br><span class="hljs-string">/boot</span>： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。<br><br><span class="hljs-string">/dev</span> ： dev是Device<span class="hljs-params">(设备)</span>的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。<br><br><span class="hljs-string">/etc</span>： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。<br><br><span class="hljs-string">/home</span>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。<br><br><span class="hljs-string">/lib</span>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。<br><br><span class="hljs-string">/lost</span>+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。<br><br><span class="hljs-string">/media</span>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。<br><br><span class="hljs-string">/mnt</span>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在<span class="hljs-string">/mnt/</span>上，然后进入该目录就可以查看光驱里的内容了。<br><br><span class="hljs-string">/opt</span>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。<br><br><span class="hljs-string">/proc</span>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br><br><span class="hljs-string">/root</span>：该目录为系统管理员，也称作超级权限者的用户主目录。<br><br><span class="hljs-string">/sbin</span>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。<br><br><span class="hljs-string">/srv</span>：该目录存放一些服务启动之后需要提取的数据。<br><br><span class="hljs-string">/sys</span>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。<br><br><span class="hljs-string">/tmp</span>：这个目录是用来存放一些临时文件的。<br><br><span class="hljs-string">/usr</span>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。<br><br><span class="hljs-string">/usr/bin</span>： 系统用户使用的应用程序。<br><br><span class="hljs-string">/usr/sbin</span>： 超级用户使用的比较高级的管理程序和系统守护程序。<br><br><span class="hljs-string">/usr/src</span>： 内核源代码默认的放置目录。<br><br><span class="hljs-string">/var</span>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。<br><br><span class="hljs-string">/run</span>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。<br><br><span class="hljs-string">/www</span>: 默认放置网站的文件夹，里面拥有wwwroot等默认建站文件夹以及日志文件夹等<br><br><span class="hljs-string">/etc</span> <span class="hljs-string">/sysconfig/network-scripts</span> 网络配置目录<br></code></pre></td></tr></table></figure><h1 id="三、常见命令"><a href="#三、常见命令" class="headerlink" title="三、常见命令"></a>三、常见命令</h1><p>常见命令</p><h2 id="1、xshell的使用"><a href="#1、xshell的使用" class="headerlink" title="1、xshell的使用"></a>1、xshell的使用</h2><p>ctrl+滚轮 调节字体大小</p><p>clear 清屏</p><h2 id="2、cd"><a href="#2、cd" class="headerlink" title="2、cd"></a>2、cd</h2><p>切换目录</p><p><strong>绝对路径：</strong></p><p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@iZbp17dj5r3z9624ikd288Z ~] <span class="hljs-keyword">cd</span> /                   <span class="hljs-comment">#进入根目录</span><br><br>[root@iZbp17dj5r3z9624ikd288Z ~] <span class="hljs-keyword">cd</span> <span class="hljs-string">/home</span>               <span class="hljs-comment">#进入home目录</span><br></code></pre></td></tr></table></figure><p><strong>相对路径：</strong></p><p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成这样的：cd ../man 这就是相对路径的写法，也可以 cd 目录名直接进入下一层目录</p><p>补充说明一下</p><p>cd root = cd ~</p><p>cd .. 返回上一级目录 （这中间有个空格</p><h2 id="3、ls"><a href="#3、ls" class="headerlink" title="3、ls"></a>3、ls</h2><p>展示当前目录的文件</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@iZbp17dj5r3z9624ikd288Z ~] <span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><p>-a 参数 ：all 查看全部的文件 包括隐藏文件</p><p>-l  参数 ：列出所有的文件 包含文件按的属性和权限 没有隐藏文件</p><p>所有的Linux可以组合使用，即可以使用<strong>ls -al</strong>，用以查看所有文件的信息</p><h2 id="4、pwd"><a href="#4、pwd" class="headerlink" title="4、pwd"></a>4、pwd</h2><p>显示当前用户所在的目录 </p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@iZbp17dj5r3z9624ikd288Z ~] <span class="hljs-keyword">pwd</span><br></code></pre></td></tr></table></figure><p>-P ：显示出确实的路径，而非使用连接(link) 路径。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 单纯显示出目前的工作目录</span><br>[root<span class="hljs-symbol">@iZbp17dj5r3z9624ikd288Z</span> ~]<span class="hljs-meta"># pwd</span><br>/root<br><br><span class="hljs-meta"># 如果是链接，要显示真实地址，可以使用 -P参数</span><br>[root<span class="hljs-symbol">@iZbp17dj5r3z9624ikd288Z</span> /]<span class="hljs-meta"># cd bin</span><br>[root<span class="hljs-symbol">@iZbp17dj5r3z9624ikd288Z</span> bin]<span class="hljs-meta"># pwd -P</span><br>/usr/bin<br></code></pre></td></tr></table></figure><h2 id="5、mkdir"><a href="#5、mkdir" class="headerlink" title="5、mkdir"></a>5、mkdir</h2><p>新建文件夹 </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir 文件夹名字<br></code></pre></td></tr></table></figure><p>递归创建目录（创建多级目录）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkdir</span> -p test<span class="hljs-number">1</span>/test<span class="hljs-number">2</span>/test<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>删除目录 <strong>rmdir 目录名</strong></p><p>如果目录不为空文件夹,则删除不会成功，需要删除文件</p><p>需要删除多个目录的话(递归删除) 需要加上-p参数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rmdir</span> -p test<span class="hljs-number">1</span>/test<span class="hljs-number">2</span>/test<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="6、cp"><a href="#6、cp" class="headerlink" title="6、cp"></a>6、cp</h2><p>拷贝文件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> 文件 新的地方<br></code></pre></td></tr></table></figure><p>选项与参数：</p><p>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</p><p>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p><p>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p><p>-r：递归持续复制，用於目录的复制行为；(常用)</p><p>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p><p>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p><p>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</p><p>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p><p>-u：若 destination 比 source 旧才升级 destination ！</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"># 复制 root目录下的install.sh 到 home目录下<br>[root@Mercury home]<span class="hljs-meta"># cp /root/install.sh  /home</span><br>[root@Mercury home]<span class="hljs-meta"># ls</span><br>install.sh<br></code></pre></td></tr></table></figure><h2 id="7、rm"><a href="#7、rm" class="headerlink" title="7、rm"></a>7、rm</h2><p>移除文件或者目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rm</span> 文件名<br></code></pre></td></tr></table></figure><p>-f 忽略不存在的文件 不会出现警告， 强制删除</p><p>-r 递归删除目录</p><p>-i 互动 删除询问是否删除</p><p>rm -rf  /  系统中所有的文件全部被删除，（删库跑路）</p><h2 id="8、mv"><a href="#8、mv" class="headerlink" title="8、mv"></a>8、mv</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">mv</span> 文件名 位置/文件名<br></code></pre></td></tr></table></figure><p>移动文件或者目录 重命名文件</p><p>-f 强制移动</p><p>-u 只替换已经更新过的文件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 创建一个文件夹 test</span><br>[root<span class="hljs-symbol">@Mercury</span> home]<span class="hljs-meta"># mkdir test</span><br><br><span class="hljs-meta"># 将复制过来的文件移动到我们创建的目录，并查看</span><br>[root<span class="hljs-symbol">@Mercury</span> home]<span class="hljs-meta"># mv install.sh test</span><br>[root<span class="hljs-symbol">@Mercury</span> home]<span class="hljs-meta"># ls</span><br>test<br>[root<span class="hljs-symbol">@Mercury</span> home]<span class="hljs-meta"># cd test</span><br>[root<span class="hljs-symbol">@Mercury</span> test]<span class="hljs-meta"># ls</span><br>install.sh<br><br><span class="hljs-meta"># 将文件夹重命名，然后查看</span><br>[root<span class="hljs-symbol">@Mercury</span> test]<span class="hljs-meta"># cd ..</span><br>[root<span class="hljs-symbol">@Mercury</span> home]<span class="hljs-meta"># mv test mvtest</span><br>[root<span class="hljs-symbol">@Mercury</span> home]<span class="hljs-meta"># ls</span><br>mvtest<br></code></pre></td></tr></table></figure><p><strong>补充说明</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span>  命令查看网络配置<br></code></pre></td></tr></table></figure><h1 id="四、文件详解"><a href="#四、文件详解" class="headerlink" title="四、文件详解"></a>四、文件详解</h1><h2 id="1、文件的属性"><a href="#1、文件的属性" class="headerlink" title="1、文件的属性"></a>1、文件的属性</h2><p><img src="https://img-blog.csdnimg.cn/523dd5d654f74b2d823b41477c967f07.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li><p>当为[ d ]则是目录</p></li><li><p>当为[ - ]则是文件；</p></li><li><p>若是[ l ]则表示为链接文档 ( link file )；</p></li><li><p>若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</p></li><li><p>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</p></li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。每个文件的属性由左边第一部分的10个字符来确定（如下图）<br><img src="https://img-blog.csdnimg.cn/9ce0c39f81644ea8b56db556596dfcce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>从左至右用0-9这些数字来表示。第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：<br>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；<br>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；<br>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><h2 id="2、修改文件的属性"><a href="#2、修改文件的属性" class="headerlink" title="2、修改文件的属性"></a>2、修改文件的属性</h2><h3 id="2-1、chgrp"><a href="#2-1、chgrp" class="headerlink" title="2.1、chgrp"></a>2.1、chgrp</h3><p> <strong>更改文件属组</strong></p><p>chgrp [-R] 属组名 文件名<br>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><h3 id="2-2、chown"><a href="#2-2、chown" class="headerlink" title="2.2、chown"></a>2.2、chown</h3><p><strong>更改文件属主，也可以同时更改文件属组</strong></p><p>chown [–R] 属主名 文件名<br>chown [-R] 属主名：属组名 文件名</p><h3 id="2-3、chmod"><a href="#2-3、chmod" class="headerlink" title="2.3、chmod"></a>2.3、chmod</h3><p> <strong>更改文件9个属性</strong></p><p>chmod [-R] xyz 文件或目录<br>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r</span>:<span class="hljs-number">4</span>     w:<span class="hljs-number">2</span>         x:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><p>owner = rwx = 4+2+1 = 7</p><p>group = rwx = 4+2+1 = 7</p><p>others= — = 0+0+0 = 0</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">chmod</span> <span class="hljs-number">777</span> filename   <span class="hljs-comment">#赋予文件全部权限</span><br></code></pre></td></tr></table></figure><p><strong>补充说明</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">解压文件 tar -zxvf 文件名<br></code></pre></td></tr></table></figure><h2 id="3、查看文件"><a href="#3、查看文件" class="headerlink" title="3、查看文件"></a>3、查看文件</h2><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li><p>cat 由第一行开始显示文件内容</p></li><li><p>tac 从最后一行开始显示，可以看出 tac 其实就是 cat 的倒着写</p></li><li><p>nl  显示的时候，顺道输出行号！</p></li><li><p>more 一页一页的显示文件内容</p></li><li><p>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</p></li><li><p>head 只看头几行</p></li><li><p>tail 只看尾巴几行</p></li></ul><p>语法：</p><h3 id="3-1-cat"><a href="#3-1-cat" class="headerlink" title="3.1 cat"></a>3.1 cat</h3><p>选项与参数：</p><ul><li><p>-A ：相当于-vET 的整合选项，可列出一些特殊字符而不是空白而已；</p></li><li><p>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</p></li><li><p>-E ：将结尾的断行字节 $ 显示出来；</p></li><li><p>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</p></li><li><p>-T ：将 [tab] 按键以 ^I 显示出来；</p></li><li><p>-v ：列出一些看不出来的特殊字符</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span><br><span class="hljs-section">[root@Mercury ~]</span><span class="hljs-comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="hljs-attr">DEVICE</span>=eth0<br><span class="hljs-attr">BOOTPROTO</span>=dhcp<br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><h3 id="3-2-tac"><a href="#3-2-tac" class="headerlink" title="3.2 tac"></a>3.2 tac</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@Mercury ~]</span><span class="hljs-comment"># tac /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">BOOTPROTO</span>=dhcp<br><span class="hljs-attr">DEVICE</span>=eth0<br></code></pre></td></tr></table></figure><h3 id="3-3-nl"><a href="#3-3-nl" class="headerlink" title="3.3 nl"></a>3.3 nl</h3><p>显示行号</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nl <span class="hljs-selector-attr">[-bnw]</span> 文件<br></code></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><p>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p></li><li><p>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</p></li><li><p>-w ：行号栏位的占用的位数。</p></li></ul><p>测试：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@Mercury ~]</span><span class="hljs-comment"># nl /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="hljs-attr">1DEVICE</span>=eth0<br><span class="hljs-attr">2BOOTPROTO</span>=dhcp<br><span class="hljs-attr">3ONBOOT</span>=<span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><h3 id="3-4-more"><a href="#3-4-more" class="headerlink" title="3.4 more"></a>3.4 more</h3><p>一页一页翻动</p><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li><p>空白键 (space)：代表向下翻一页；</p></li><li><p>Enter     ：代表向下翻『一行』；</p></li><li><p>/字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</p></li><li><p>:f      ：立刻显示出档名以及目前显示的行数；</p></li><li><p>q       ：代表立刻离开 more ，不再显示该文件内容。</p></li><li><p>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</p></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@kuangshen etc]<span class="hljs-comment"># more /etc/csh.login</span><br><span class="hljs-string">....</span><span class="hljs-params">(中间省略)</span><span class="hljs-string">....</span><br><span class="hljs-params">--More--</span><span class="hljs-params">(28%)</span> <span class="hljs-comment"># 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></code></pre></td></tr></table></figure><h3 id="3-5-less"><a href="#3-5-less" class="headerlink" title="3.5 less"></a>3.5 less</h3><p>一页一页翻动，以下实例输出/etc/man.config文件的内容：</p><p>less运行时可以输入的命令有：</p><ul><li><p>空白键  ：向下翻动一页；</p></li><li><p>[pagedown]：向下翻动一页；</p></li><li><p>[pageup] ：向上翻动一页；</p></li><li><p>/字串   ：向下搜寻『字串』的功能；</p></li><li><p>?字串   ：向上搜寻『字串』的功能；</p></li><li><p>n     ：重复前一个搜寻 (与 / 或 ? 有关！)</p></li><li><p>N     ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</p></li><li><p>q     ：离开 less 这个程序；</p></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@kuangshen etc]<span class="hljs-comment"># more /etc/csh.login</span><br><span class="hljs-string">....</span><span class="hljs-params">(中间省略)</span><span class="hljs-string">....</span><br>:   <span class="hljs-comment"># 这里可以等待你输入命令！</span><br></code></pre></td></tr></table></figure><h3 id="3-6-head"><a href="#3-6-head" class="headerlink" title="3.6 head"></a>3.6 head</h3><p>取出文件前面几行</p><p>语法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">head [-n <span class="hljs-built_in">number</span>] 文件<br></code></pre></td></tr></table></figure><p>选项与参数：-n 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@Mercury</span> etc]<span class="hljs-meta"># head -n 20 /etc/csh.login</span><br></code></pre></td></tr></table></figure><h3 id="3-7-tail"><a href="#3-7-tail" class="headerlink" title="3.7 tail"></a>3.7 tail</h3><p>取出文件后面几行</p><p>语法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">tail [-n <span class="hljs-built_in">number</span>] 文件<br></code></pre></td></tr></table></figure><p>选项与参数：</p><p>-n ：后面接数字，代表显示几行的意思</p><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@Mercury</span> etc]<span class="hljs-meta"># tail -n 20 /etc/csh.login</span><br></code></pre></td></tr></table></figure><h1 id="五、Linux链接"><a href="#五、Linux链接" class="headerlink" title="五、Linux链接"></a>五、Linux链接</h1><p>Linux链接的概念分为两种硬链接和软链接</p><h2 id="1、硬链接"><a href="#1、硬链接" class="headerlink" title="1、硬链接"></a>1、硬链接</h2><p>允许一个文件拥有多个路径 用户可以通过这种机制建立硬链接到一些重要文件上，防止误删</p><p>感觉像是文件复制了一份，存在了别的地方，即使原文件已经删除了，这个还是可以访问的</p><h2 id="2、软链接"><a href="#2、软链接" class="headerlink" title="2、软链接"></a>2、软链接</h2><p>类似windows的快捷方式，和硬链接的区别就是，原文件如果已经删除了，这里使用ls查看的时候，该链接会变成红色，且无法打开(打开时会提示错误信息)</p><h1 id="六、Vim编辑器"><a href="#六、Vim编辑器" class="headerlink" title="六、Vim编辑器"></a>六、Vim编辑器</h1><p><strong>三种使用模式</strong><br>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：</p><h2 id="1、命令模式"><a href="#1、命令模式" class="headerlink" title="1、命令模式"></a>1、命令模式</h2><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><p>i 切换到输入模式，以输入字符。</p></li><li><p>x 删除当前光标所在处的字符。</p></li><li><p>：切换到底线命令模式，以在最底一行输入命令。</p></li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><h2 id="2、输入模式"><a href="#2、输入模式" class="headerlink" title="2、输入模式"></a>2、输入模式</h2><p>在命令模式下按下 <strong>i</strong> 就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><p>字符按键以及Shift组合，输入字符</p></li><li><p>ENTER，回车键，换行</p></li><li><p>BACK SPACE，退格键，删除光标前一个字符</p></li><li><p>DEL，删除键，删除光标后一个字符</p></li><li><p>方向键，在文本中移动光标</p></li><li><p>HOME/END，移动光标到行首/行尾</p></li><li><p>Page Up/Page Down，上/下翻页</p></li><li><p>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</p></li><li><p>ESC，退出输入模式，切换到命令模式</p></li></ul><h2 id="3、底线命令模式"><a href="#3、底线命令模式" class="headerlink" title="3、底线命令模式"></a>3、底线命令模式</h2><p>在命令模式下按下 <strong>:</strong> （英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><p>q 退出程序</p></li><li><p>w 保存文件</p></li></ul><p>一般会wq一起使用，保存退出</p><p>按ESC键可随时退出底线命令模式。<br><img src="https://img-blog.csdnimg.cn/93b8971c1fa5497abe75fb519a9ae7a7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="七、账号用户和磁盘管理"><a href="#七、账号用户和磁盘管理" class="headerlink" title="七、账号用户和磁盘管理"></a>七、账号用户和磁盘管理</h1><h2 id="1、账号用户管理"><a href="#1、账号用户管理" class="headerlink" title="1、账号用户管理"></a>1、账号用户管理</h2><p>root是Linux系统中的最高权限</p><h3 id="1-1、添加用户"><a href="#1-1、添加用户" class="headerlink" title="1.1、添加用户"></a>1.1、添加用户</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">useradd</span> -选项 用户名<br></code></pre></td></tr></table></figure><p>一些参数说明</p><ul><li><p>-c comment 指定一段注释性描述。</p></li><li><p>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p></li><li><p>-g 用户组 指定用户所属的用户组。</p></li><li><p>-G :在创建用户的时候就添加进组</p></li><li><p>-m :自动创建这个用户的主目录 /home/william</p></li><li><p>-s Shell文件 指定用户的登录Shell。</p></li><li><p>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。<br>实际上就是添加了一个用户的目录</p></li></ul><h3 id="1-2、切换用户"><a href="#1-2、切换用户" class="headerlink" title="1.2、切换用户"></a>1.2、切换用户</h3><p> 切换用户的命令为：<strong>su username 【username即你的用户名】</strong></p><p> 从普通用户切换到root用户，还可以使用命令：<strong>sudo su</strong></p><p> 在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p><p> 在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：<strong>【su - root】</strong></p><p>$表示普通用户</p><p>#表示超级用户，也就是root用户</p><h3 id="1-3、删除用户"><a href="#1-3、删除用户" class="headerlink" title="1.3、删除用户"></a>1.3、删除用户</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">userdel</span> 选项 用户名       <span class="hljs-comment">#  删除用户</span><br><br>userdel -r 用户名        <span class="hljs-comment">#  删除用户并删除他的目录页</span><br></code></pre></td></tr></table></figure><h3 id="1-4、修改用户"><a href="#1-4、修改用户" class="headerlink" title="1.4、修改用户"></a>1.4、修改用户</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">usermod</span> 选项 用户名<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">usermod -d <span class="hljs-regexp">/home/</span><span class="hljs-number">233</span> william<br><br><span class="hljs-comment"># 把William的用户配置文件换到233文件夹</span><br><br><span class="hljs-comment"># 这里的参数和上面的add命令里面的意义是一样的</span><br></code></pre></td></tr></table></figure><p><strong>临时插入</strong></p><p>hostname 查看主机名</p><p>hostname 想改的成名字  即可更改主机名     (不过这是临时的,永久的需要配置文件修改</p><h3 id="1-5-用户的密码设置"><a href="#1-5-用户的密码设置" class="headerlink" title="1.5 用户的密码设置"></a>1.5 用户的密码设置</h3><p>先了解基本的查看所有的用户</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>psaawd<br></code></pre></td></tr></table></figure><p>查看所有的用户，如果你拥有<strong>超级用户</strong>的权限</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">passwd username</span><br></code></pre></td></tr></table></figure><p>即可更改，不过输入密码的时候需要注意，Linux是不会显示密码的</p><p><strong>锁定账户</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">password</span> -l william    锁定账户<br><br><span class="hljs-keyword">password</span> -d william    删除账户的密码，没有密码也能登录<br></code></pre></td></tr></table></figure><h3 id="1-6、用户组管理"><a href="#1-6、用户组管理" class="headerlink" title="1.6、用户组管理"></a>1.6、用户组管理</h3><p><strong>创建一个用户组</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">groupadd <br>cat <span class="hljs-regexp">/etc/g</span>roup 查看用户组<br></code></pre></td></tr></table></figure><p>创建后会有一个id 可以使用-g 520 指定 若不指定，则会自增</p><p><strong>删除用户组</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">groupdel <span class="hljs-built_in">name</span><br></code></pre></td></tr></table></figure><p><strong>修改用户组</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">groupmod -g <span class="hljs-number">666</span> -n <span class="hljs-keyword">new</span><span class="hljs-type">william</span> william<br></code></pre></td></tr></table></figure><p>对Willam组修改id和名字</p><p><strong>用户切换用户组</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">grp</span> groupname<br></code></pre></td></tr></table></figure><p>文件查看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>密码存储在 /etc/shadow 里面</p><p>所有的密码都是加密过的</p><p><img src="https://img-blog.csdnimg.cn/fb779555fb0d46f8af48301b32452f7e.png" alt="在这里插入图片描述"></p><h2 id="2、磁盘管理"><a href="#2、磁盘管理" class="headerlink" title="2、磁盘管理"></a>2、磁盘管理</h2><h3 id="2-1、df-列出文件系统的磁盘使用量"><a href="#2-1、df-列出文件系统的磁盘使用量" class="headerlink" title="2.1、df  列出文件系统的磁盘使用量"></a>2.1、df  列出文件系统的磁盘使用量</h3><ul><li><p>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</p></li><li><p>-k ：以 KBytes 的容量显示各文件系统；</p></li><li><p>-m ：以 MBytes 的容量显示各文件系统；</p></li><li><p>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</p></li><li><p>-H ：以 M=1000K 取代 M=1024K 的进位方式；</p></li><li><p>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</p></li><li><p>-i ：不用硬盘容量，而以 inode 的数量来显示</p></li></ul><p><img src="https://img-blog.csdnimg.cn/a19fae5805844b4dac93aba1e69c841c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2e51341f8f5946c5b45b4cd48ef34690.png" alt="在这里插入图片描述"></p><h3 id="2-2、du-检查磁盘空间使用量"><a href="#2-2、du-检查磁盘空间使用量" class="headerlink" title="2.2、du  检查磁盘空间使用量"></a>2.2、du  检查磁盘空间使用量</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">du <span class="hljs-selector-attr">[-ahskm]</span> 文件或目录名称<br></code></pre></td></tr></table></figure><p>选项与参数：</p><p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</p><p>-h ：以人们较易读的容量格式 (G/M) 显示；</p><p>-s ：列出总量而已，而不列出每个各别的目录占用容量；</p><p>-S ：不包括子目录下的总计，与 -s 有点差别。</p><p>-k ：以 KBytes 列出容量显示；</p><p>-m ：以 MBytes 列出容量显示；</p><h1 id="八、-进程管理"><a href="#八、-进程管理" class="headerlink" title="八、 进程管理"></a>八、 进程管理</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ps</span><br></code></pre></td></tr></table></figure><p>查看档期那系统正在执行的各种进程信息</p><ul><li><p>-a 显示当前终端运行的所有的进程信息</p></li><li><p>-u 以用户的信息显示进程</p></li><li><p>-x 显示后台运行进程的参数</p></li></ul><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">ps -<span class="hljs-built_in">aux</span> <br></code></pre></td></tr></table></figure><p>查看所有的进程，如果是想看到指定程序的进程可以，使用管道符过滤</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ps -aux <span class="hljs-string">| mysql      查看MySQL的进程</span><br><br>ps -aux <span class="hljs-string">| redis      查看redis的进程</span><br></code></pre></td></tr></table></figure><p>如果想查询相关的父进程的信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ps</span> -ef 可以查看到父进程的一些信息<br></code></pre></td></tr></table></figure><p>使用进程树查看</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pstree -pu</span><br></code></pre></td></tr></table></figure><h1 id="九、关于部署项目"><a href="#九、关于部署项目" class="headerlink" title="九、关于部署项目"></a>九、关于部署项目</h1><ol><li>springboot的项目直接打包成jar包然后通过xftp上传到云服务器的root目录下</li><li>通过命令 <strong>netstat -anp | grep &lt;端口号&gt;</strong> 查看端口使用情况 <strong>lsof -i : (项目端口号)</strong>  查询当前端口是否有进程在使用</li><li>什么都没有显示，则表示没有进程在使用这个端口，如果有有进程，则通过命令 <strong>kill -9 (进程PID)</strong> 结束进程，空出端口号</li><li>通过命令   <strong>java -jar jar包名.jar</strong>  （单次）启动项目或者命令 <strong>nohup java -jar  jar包名.jar  &amp;</strong>     （后台运行，永久）</li><li><strong>tail -f nohup.out</strong> 查看日志</li></ol><p>注意：</p><ol><li><p>在部署前要记得改数据库的用户名和密码以及文件的映射路径（如果你配置了的话）</p></li><li><p>查看想开的端口是否已开</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--query-port</span>=8888/tcp     提示<span class="hljs-literal">yes</span>表示已开通，提示<span class="hljs-literal">no</span>表示未开通。<br></code></pre></td></tr></table></figure></li><li><p> 有时在云服务器的管理界面直接开放端口不管用，需要手动输入命令开放项目所使用的端口</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">firewall-cmd <span class="hljs-params">--zone=public</span> <span class="hljs-params">--add-port=8889/tcp</span> <span class="hljs-params">--permanent</span><br>firewall-cmd <span class="hljs-params">--reload</span>  <br><br><span class="hljs-comment"># 这里在写一些其他的关于防火墙的命令</span><br><span class="hljs-comment"># 开启</span><br>service firewalld start<br><span class="hljs-comment"># 重启</span><br>service firewalld restart<br><span class="hljs-comment"># 关闭</span><br>service firewalld stop<br><span class="hljs-comment"># 查看防火墙规则</span><br>firewall-cmd <span class="hljs-params">--list-all</span><br><span class="hljs-comment"># 查询端口是否开放</span><br>firewall-cmd <span class="hljs-params">--query-port=8080/tcp</span><br><span class="hljs-comment"># 开放80端口</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--add-port=80/tcp</span><br><span class="hljs-comment"># 移除端口</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--remove-port=8080/tcp</span><br><span class="hljs-comment">#重启防火墙(修改配置后要重启防火墙)</span><br>firewall-cmd <span class="hljs-params">--reload</span><br><span class="hljs-comment"># 参数解释</span><br>1、firwall-cmd：是Linux提供的操作firewall的一个工具；<br>2、<span class="hljs-params">--permanent</span>：表示设置为持久；<br>3、<span class="hljs-params">--add-port</span>：标识添加的端口；<br></code></pre></td></tr></table></figure></li></ol><p>这里需要注意一下，一般需要先在阿里云上面的服务器添加规则，然后还需要在服务器上面执行相应的命令，这才可以成功的访问。</p><p>最后 ctrl+c退出指令。</p>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tree</title>
    <link href="/2021/12/17/Tree/"/>
    <url>/2021/12/17/Tree/</url>
    
    <content type="html"><![CDATA[<h1 id="一、初识树"><a href="#一、初识树" class="headerlink" title="一、初识树"></a>一、初识树</h1><p>不同于之前学过的一般的一对一的结构，树是一种一对多的结构，树一个节点可能对应着一个节点或者好几个节点<br>（从书上嫖的定义：</p><p><strong>树是n（n&gt;=0）个结点的有限集。</strong> 当n = 0时，称为空树。在任意一棵非空树中应满足：</p><ul><li>有且仅有一个特定的称为根的结点。</li><li>当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集T1,T2,…,Tm，其中每个集合本身又是一棵树，并且称为根的子树。</li></ul><h1 id="二、-基本概念"><a href="#二、-基本概念" class="headerlink" title="二、 基本概念"></a>二、 基本概念</h1><h2 id="1、节点的分类"><a href="#1、节点的分类" class="headerlink" title="1、节点的分类"></a>1、节点的分类</h2><p>结点拥有的子树数称为结点的度。度为0的结点称为叶结点(Leaf) 或终端结点;度不为0的结点称为非终端结点或分支结点。除根结点之外，分支结点也称为内部结点。<strong>树的度是树内各结点的度的最大值。</strong><br><img src="https://img-blog.csdnimg.cn/90970a4049b045169f2ebc62eb613363.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="2、节点之间的关系"><a href="#2、节点之间的关系" class="headerlink" title="2、节点之间的关系"></a>2、节点之间的关系</h2><p>节点之间的称呼比较有意思，互相叫爸爸(bushi ,节点子树的根称为该节点的孩子，然后呢，孩子节点按照辈分要叫这个节点为爸爸，即父节点。同一个双亲节点之间互称兄弟。所以下图中  A节点是B、C的父节点，B、C是A节点的子节点，B、C之间互称兄弟节点。<br><img src="https://img-blog.csdnimg.cn/818480bb433f439d8d6b1f05f0b69fe4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3、树的层次"><a href="#3、树的层次" class="headerlink" title="3、树的层次"></a>3、树的层次</h2><p>结点的层次从根开始算起，根为第一层，根的孩子为第二层 。树中结点的最大层次称为树<br>的深度或高度，下图中树的深度为4<br><img src="https://img-blog.csdnimg.cn/dea4df363f05470aa9860e8c26f5ba2a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="树的层次"></p><h1 id="三、树的抽象数据类型（ADT）"><a href="#三、树的抽象数据类型（ADT）" class="headerlink" title="三、树的抽象数据类型（ADT）"></a>三、树的抽象数据类型（ADT）</h1><p><img src="https://img-blog.csdnimg.cn/f6eaeda9c2e541daa8588cd64487f451.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>(书上摘的，记得下来自己看</p><h1 id="四、树的存储结构"><a href="#四、树的存储结构" class="headerlink" title="四、树的存储结构"></a>四、树的存储结构</h1><p>一般说起存储结构，就会想起前面学过的栈和队列，拥有两种存储结构，一种是顺序存储结构，<del>一种还是顺序结构</del>，另外一种是链式存储结构，但是树因为其较为复杂的机制，所以只使用顺序存储结构会很麻烦，因此树一般使用的是链式结构，主要有三种表示法用来表示树。以下表示法中的示例都是本树<br><img src="https://img-blog.csdnimg.cn/5c7c2be045d84c94a1a0f84730cc3016.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="为方便，我们把它命名为M树"></p><h2 id="1-双亲表示法"><a href="#1-双亲表示法" class="headerlink" title="1. 双亲表示法"></a>1. 双亲表示法</h2><p>这种表示法中，每一个节点中专门设置一个域用来指示双亲的位置，如下图所示<br><img src="https://img-blog.csdnimg.cn/cce19ec1b4494c81980ee827d87f7dc8.png" alt="双亲表示法"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*树的双亲表示法结点结构定义*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_TREE_SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> TElemType;<span class="hljs-comment">//树结点的数据类型，目前暂定为整型</span><br><span class="hljs-comment">/*结点的结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>TElemType data;<span class="hljs-comment">//结点数据</span><br><span class="hljs-keyword">int</span> parent;<span class="hljs-comment">//双亲位置</span><br>&#125;TNode;<br><span class="hljs-comment">/*树结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>TNode nodes[MAX_TREE_SIZE];<span class="hljs-comment">//结点数组</span><br><span class="hljs-keyword">int</span> r, n;<span class="hljs-comment">//根的位置和结点数</span><br>&#125;Tree;<br><br></code></pre></td></tr></table></figure><p>由此就可以推导出来上图中的M树的结构就如下图所示<br><img src="https://img-blog.csdnimg.cn/2857e61a37ef47e8acb262244e83df41.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="双亲表示法结构图"><br>思考：上图中的 -1 表示什么意思</p><p>这种表示法我们可以根据结点的 parent 指针很容易找到色的双亲结点，所用的时间复杂度为 O(1)，但是如果想要知道孩子节点是哪一个则需要全部遍历完才行，比较麻烦</p><h2 id="2-孩子表示法"><a href="#2-孩子表示法" class="headerlink" title="2.孩子表示法"></a>2.孩子表示法</h2><p> 把每个结点的孩子结点排列起来，以单链表作存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空。然后n个头指针又组成一个线性表，采用顺序存储结构，存放进一个一维数组中，如图所示。<img src="https://img-blog.csdnimg.cn/dffd9e59e222443da9714cddc23de18c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="孩子表示法"><br> 孩子表示法中需要两种结构，一种是孩子结点的结构，还有一种是表头结点<br> <img src="https://img-blog.csdnimg.cn/c55dffc097c8443b998bcfacdcb60577.png" alt="孩子结点的结构"><br> child保存数据，next是指针域，用于保存下一个结点的位置<br><img src="https://img-blog.csdnimg.cn/d163d229787341338b3328331dac6ae4.png" alt="表头结点"><br>同理，data用于保存数据，firstchild用于保存第一个孩子结点的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*树的孩子表示法结构定义*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_TREE_SIZE 100</span><br><span class="hljs-comment">/*孩子结点*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTNode</span>&#123;</span><br><span class="hljs-keyword">int</span> child;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;*ChildPtr;<br><span class="hljs-comment">/*表头结点*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>TElemType data;<br>ChildPtr firstchild;<br>&#125;CTBox;<br><span class="hljs-comment">/*树结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>CTBox nodes[MAX_TREE_SIZE];<span class="hljs-comment">//结点数组</span><br><span class="hljs-keyword">int</span> r, n;<span class="hljs-comment">//根的位置和结点数</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-孩子兄弟表示法"><a href="#3-孩子兄弟表示法" class="headerlink" title="3.孩子兄弟表示法"></a>3.孩子兄弟表示法</h2><p>任意一棵树， 它的结点的第一个孩子如果存在就是唯一的，它的右兄弟如果存在也是唯一的。 因此，我们设置两个指针，分别指向该结点的第一个孩子和此结点的右兄弟</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*树的孩子兄弟表示法结构定义*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span>&#123;</span><br>TElemtype data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CSNode</span> *<span class="hljs-title">firstchild</span>, *<span class="hljs-title">rightsib</span>;</span><br>&#125; CSNode, *CSTree;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/33b9e0c1d20049bf944e1af6e613cbfb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="孩子兄弟表示法"><br>(即生成一棵二叉树，至于怎么生成，后面会讲</p><h1 id="五、二叉树"><a href="#五、二叉树" class="headerlink" title="五、二叉树"></a>五、二叉树</h1><h2 id="1、什么是二叉树"><a href="#1、什么是二叉树" class="headerlink" title="1、什么是二叉树"></a>1、什么是二叉树</h2><p>二叉树是另一种树形结构，其特点是每个结点至多只有两棵子树( 即二叉树中不存在度大于2的结点)，并且二叉树的子树有左右之分，其次序不能任意颠倒。<br>与树相似，二叉树也以递归的形式定义。二叉树是n (n≥0) 个结点的有限集合:</p><h2 id="2、二叉树的特点"><a href="#2、二叉树的特点" class="headerlink" title="2、二叉树的特点"></a>2、二叉树的特点</h2><ul><li>每个结点<strong>最多有</strong>两棵子树，.注意不是只有两棵子树，而是最多有.没有子树或者有一棵子树都可以</li><li>左子树和右子树是有顺序的，次序不能任意颠倒。即使树中某结点只有一个子树，也要区分它是左子树还是右子树.</li></ul><p><img src="https://img-blog.csdnimg.cn/7f82d256469640a2a8679d6b5193afa2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_15,color_FFFFFF,t_70,g_se,x_16"><br>二叉树的5种基本形态<br><img src="https://img-blog.csdnimg.cn/7a526a04419a4b8687592eff967f5b86.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="5种形态"></p><h2 id="3、特殊的二叉树"><a href="#3、特殊的二叉树" class="headerlink" title="3、特殊的二叉树"></a>3、特殊的二叉树</h2><h3 id="3-1斜树"><a href="#3-1斜树" class="headerlink" title="3.1斜树"></a>3.1斜树</h3><p>所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。</p><h3 id="3-2满二叉树"><a href="#3-2满二叉树" class="headerlink" title="3.2满二叉树"></a>3.2满二叉树</h3><p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都同一层上，这样的二叉树称为满二叉树<br><img src="https://img-blog.csdnimg.cn/f27fd59b4fa244b18b08723c836cebfd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="3-3完全二叉树"><a href="#3-3完全二叉树" class="headerlink" title="3.3完全二叉树"></a>3.3完全二叉树</h3><p>对一棵具有n个结点的二叉树按层序编号，如果编号为 (l&lt;i&lt;n) 的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树<br><img src="https://img-blog.csdnimg.cn/b11208870f4d45b69f1c80ec6a923122.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li>若i ≤ n / 2, 则结点i为分支结点，否则为叶子结点。</li><li>叶子结点只可能在层次最大的两层上出现。对于最大层次中的叶子结点，都依次排列在该层最左边的位置上。</li><li>若有度为1 的结点，则只可能有一个，且该结点只有左孩子而无右孩子(重要特征)。</li><li>按层序编号后，一旦出现某结点(编号为i)为叶子结点或只有左孩子，则编号大于i的结点均为叶子结点。</li><li>若n为奇数，则每个分支结点都有左孩子和右孩子;若n为偶数，则编号最大的分支结点(编号为n / 2 )只有左孩子，没有右孩子，其余分支结点左、右孩子都有。</li></ul><p><strong>注意：</strong><br>完全二叉树和满二叉树的区别，满二叉树一定是棵完全二叉树，但完全二叉树不一定是满二叉树</p><h2 id="4-二叉树的性质"><a href="#4-二叉树的性质" class="headerlink" title="4.二叉树的性质"></a>4.二叉树的性质</h2><p><img src="https://img-blog.csdnimg.cn/a6254509679e47f1992a4c7951a32885.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_16,color_FFFFFF,t_70,g_se,x_16"></p><ol><li>非空二叉树上第i层上至多有 $2 ^ {i-1}$ 个结点（i $\geq$ 0）</li><li>高度为h的二叉树至多有$2 ^ h − 1$ 个结点（h $\geq$ 1）</li><li>任意一棵树，若结点数量为n,则边的数量为n − 1</li><li>非空二叉树上的叶子结点数(度为0的节点数)等于度为2的结点数加1，即 $n_0 = n_2 + 1$ </li><li>具有n个( n &gt; 0 )结点的完全二叉树的高度为$\log_2n+1$ </li><li>对有n个结点的完全二叉树按从上到下、从左到右的顺序依次编号1 , 2.. ∗ , n 则有以下关系:<ul><li>i = 1时，结点i是二叉树的根，没有双亲；若 i &gt; 1结点i的双亲的编号为[i / 2]</li><li>当2i &gt;n时，则结点 无左孩子(结点 为叶子结点) ;否则其左孩子是结点2i</li><li>如果 2i+1&gt;n ，则结点 无右孩子;否则其右孩子是结点 2i+1</li></ul></li></ol><h2 id="5-二叉树的存储结构"><a href="#5-二叉树的存储结构" class="headerlink" title="5.二叉树的存储结构"></a>5.二叉树的存储结构</h2><p>直接上链式结构、二叉树每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域是比较自然的想法，我们称这样的链表叫做二叉链表。<br><img src="https://img-blog.csdnimg.cn/22c46fabe0fe47938be7fc3d02683a5a.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*二叉树的二叉链表结点构造定义*/</span><br><span class="hljs-comment">/*结点结构*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>&#123;</span><br>TElemType data;<span class="hljs-comment">//结点数据</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><span class="hljs-comment">//左右孩子指针</span><br>&#125; BiTNode, *BiTree;<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/43919b58fdc547e39ebc822464c78827.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="6-遍历二叉树"><a href="#6-遍历二叉树" class="headerlink" title="6.遍历二叉树"></a>6.遍历二叉树</h2><h3 id="6-1-先序遍历"><a href="#6-1-先序遍历" class="headerlink" title="6.1 先序遍历"></a>6.1 先序遍历</h3><p>顺序为：根-&gt;左-&gt;右<br><img src="https://img-blog.csdnimg.cn/22fdc94421da45afb7db1a077964050a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_15,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//使用递归算法进行先序遍历</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br><span class="hljs-keyword">if</span>(T != <span class="hljs-literal">NULL</span>)&#123;<br>visit(T);<span class="hljs-comment">//访问根节点输出</span><br>PreOrder(T-&gt;lchild);<span class="hljs-comment">//递归遍历左子树</span><br>PreOrder(T-&gt;rchild);<span class="hljs-comment">//递归遍历右子树</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-2-中序遍历"><a href="#6-2-中序遍历" class="headerlink" title="6.2 中序遍历"></a>6.2 中序遍历</h3><p>顺序：左-&gt;根-&gt;右<br><img src="https://img-blog.csdnimg.cn/789ba64239ef4b80b7046e4941d435a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//递归版</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br><span class="hljs-keyword">if</span>(T != <span class="hljs-literal">NULL</span>)&#123;<br>InOrder(T-&gt;lchild);<span class="hljs-comment">//递归遍历左子树</span><br>visit(T);<span class="hljs-comment">//访问根结点</span><br>InOrder(T-&gt;rchild);<span class="hljs-comment">//递归遍历右子树</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-3-后序遍历"><a href="#6-3-后序遍历" class="headerlink" title="6.3 后序遍历"></a>6.3 后序遍历</h3><p>顺序为：左-&gt;右-&gt;根<br><img src="https://img-blog.csdnimg.cn/e97540b04d0b41d683c8585cda7562c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_15,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//递归版</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br><span class="hljs-keyword">if</span>(T != <span class="hljs-literal">NULL</span>)&#123;<br>PostOrder(T-&gt;lchild);<span class="hljs-comment">//递归遍历左子树</span><br>PostOrder(T-&gt;rchild);<span class="hljs-comment">//递归遍历右子树</span><br>visit(T);<span class="hljs-comment">//访问根结点</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-4三种遍历的非递归算法"><a href="#6-4三种遍历的非递归算法" class="headerlink" title="6.4三种遍历的非递归算法"></a>6.4三种遍历的非递归算法</h3><p>以下图这棵树为例<br><img src="https://img-blog.csdnimg.cn/8bd149999c474d97b6a6778618f1e058.png"></p><p><strong>1. 中序遍历的非递归算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder2</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>InitStack(S);<span class="hljs-comment">//初始化栈S</span><br>BiTree p = T;<span class="hljs-comment">//p是遍历指针</span><br><span class="hljs-keyword">while</span>(p || !IsEmpty(S))&#123;<span class="hljs-comment">//栈不空或p不空时循环</span><br><span class="hljs-keyword">if</span>(p)&#123;<br>Push(S, p);<span class="hljs-comment">//当前节点入栈</span><br>p = p-&gt;lchild;<span class="hljs-comment">//左孩子不空，一直向左走</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>Pop(S, p);<span class="hljs-comment">//栈顶元素出栈</span><br>visit(p);<span class="hljs-comment">//访问出栈结点</span><br>p = p-&gt;rchild;<span class="hljs-comment">//向右子树走，p赋值为当前结点的右孩子</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后的遍历结果就是DBEAC</p><p><strong>2. 先序遍历的非递归算法（和中序遍历是类似的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder2</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>InitStack(S);<span class="hljs-comment">//初始化栈S</span><br>BiTree p = T;<span class="hljs-comment">//p是遍历指针</span><br><span class="hljs-keyword">while</span>(p || !IsEmpty(S))&#123;<span class="hljs-comment">//栈不空或p不空时循环</span><br><span class="hljs-keyword">if</span>(p)&#123;<br>visit(p);<span class="hljs-comment">//访问出栈结点</span><br>Push(S, p);<span class="hljs-comment">//当前节点入栈</span><br>p = p-&gt;lchild;<span class="hljs-comment">//左孩子不空，一直向左走</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>Pop(S, p);<span class="hljs-comment">//栈顶元素出栈</span><br>p = p-&gt;rchild;<span class="hljs-comment">//向右子树走，p赋值为当前结点的右孩子</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后的遍历结果就是ABDEC</p><p><strong>3. 后序遍历的非递归算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder2</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>InitStack(S);<br>p = T;<br>r = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">while</span>(p || !IsEmpty(S))&#123;<br><span class="hljs-keyword">if</span>(p)&#123;<span class="hljs-comment">//走到最左边</span><br>push(S, p);<br>p = p-&gt;lchild;<br>&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//向右</span><br>GetTop(S, p);<span class="hljs-comment">//读栈顶元素（非出栈）</span><br><span class="hljs-comment">//若右子树存在，且未被访问过</span><br><span class="hljs-keyword">if</span>(p-&gt;rchild &amp;&amp; p-&gt;rchild != r)&#123;<br>p = p-&gt;rchild;<span class="hljs-comment">//转向右</span><br>push(S, p);<span class="hljs-comment">//压入栈</span><br>p = p-&gt;lchild;<span class="hljs-comment">//再走到最左</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//否则，弹出结点并访问</span><br>pop(S, p);<span class="hljs-comment">//将结点弹出</span><br>visit(p-&gt;data);<span class="hljs-comment">//访问该结点</span><br>r = p;<span class="hljs-comment">//记录最近访问过的结点</span><br>p = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后的遍历结果就是DEBCA</p><h3 id="6-5-层序遍历"><a href="#6-5-层序遍历" class="headerlink" title="6.5 层序遍历"></a>6.5 层序遍历</h3><p>故名思意，层序遍历就是按照每一层的顺序进行遍历，例如下图所示<br><img src="https://img-blog.csdnimg.cn/3a563960ce4f4305ad78caa328f40794.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_8,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//（其实就和广度优先搜索是一样的，使用队列实现</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>InitQueue(Q);<span class="hljs-comment">//初始化辅助队列</span><br>BiTree p;<br>EnQueue(Q, T);<span class="hljs-comment">//将根节点入队</span><br><span class="hljs-keyword">while</span>(!IsEmpty(Q))&#123;<span class="hljs-comment">//队列不空则循环</span><br>DeQueue(Q, p);<span class="hljs-comment">//队头结点出队</span><br>visit(p);<span class="hljs-comment">//访问出队结点</span><br><span class="hljs-keyword">if</span>(p-&gt;lchild != <span class="hljs-literal">NULL</span>)&#123;<br>EnQueue(Q, p-&gt;lchild);<span class="hljs-comment">//左子树不空，则左子树根节点入队</span><br>&#125;<br><span class="hljs-keyword">if</span>(p-&gt;rchild != <span class="hljs-literal">NULL</span>)&#123;<br>EnQueue(Q, p-&gt;rchild);<span class="hljs-comment">//右子树不空，则右子树根节点入队</span><br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-反推遍历结果"><a href="#7-反推遍历结果" class="headerlink" title="7.反推遍历结果"></a>7.反推遍历结果</h2><p>首先记住几个点：</p><ul><li>由二叉树的先序序列和中序序列可以唯一地确定一棵二叉树。</li><li>由二叉树的后序序列和中序序列也可以唯一地确定一棵二叉树。</li><li>由二叉树的层序序列和中序序列也可以唯一地确定一棵二叉树。</li><li><strong>只知道二叉树的先序序列和后序序列,则无法唯一确定一棵二叉树。</strong></li></ul><p>下面以这个序列作为演示<br>已知某一棵树的遍历结果如下图所示，请画出这棵树<br>前序遍历：ABCDEF<br>中序遍历：CBAEDF</p><p>分析：首先，根据前面所讲的前序和中序恶的遍历顺序，可以得知，A是该树的根节点，再结合中序遍历CB <em><strong>A</strong></em> EDF，可以得知，CB结点在根节点的左子树，EDF在根结点的右子树。由于先序先输出了B，所以B是A的孩子，而C是B的孩子，再根据中序中先输出了C，所以C是B的右孩子。右子树中根据先序遍历可得EF是D的子节点，再根据中序就可以确定E在左，D在右。即如下图所示的树。<br><img src="https://img-blog.csdnimg.cn/a5ff3ea8f1914fe7b9e6279de116f152.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_13,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="8-创建二叉树"><a href="#8-创建二叉树" class="headerlink" title="8.创建二叉树"></a>8.创建二叉树</h2><p>创建一棵二叉树和之前的遍历没有什么区别，唯一的不同就是多了内存分配。下面以先序遍历为例创建一棵二叉树<br><img src="https://img-blog.csdnimg.cn/ecd3546b67f7450da6e186c94b41a199.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_13,color_FFFFFF,t_70,g_se,x_16"><br>若想要创建如图所示的一棵二叉树，我们需要补全一下，这棵树的结构，把所有的结点都改成度为的结点，不够的就以符号‘＃’补齐，以便让程序知道到了终点<br><img src="https://img-blog.csdnimg.cn/fa346b3c0fd04e3b81daee268eaab68e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"><br>补齐之后按照前序遍历的方式输入如下字符：AB###C##</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//前序遍历创建一棵树</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateBiTree</span> <span class="hljs-params">(BiTree *T)</span></span><br><span class="hljs-function"></span>&#123; <br>   TElemType ch; <br>   <span class="hljs-built_in">scanf</span> (<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch) ;<span class="hljs-comment">//输入先序遍历的字符串 </span><br>   <span class="hljs-keyword">if</span> (ch==<span class="hljs-string">&quot;#&quot;</span> ) &#123;<br>         *T=<span class="hljs-literal">NULL</span>;<br>      &#125; <br>   <span class="hljs-keyword">else</span>&#123; <br>         *T=(BiTree) <span class="hljs-built_in">malloc</span> (<span class="hljs-keyword">sizeof</span>(BiTNode));<span class="hljs-comment">//如果不为#就给分配一个内存空间</span><br>      &#125; <br>      <span class="hljs-keyword">if</span> (!*T)&#123; <br>         <span class="hljs-built_in">exit</span>(OVERFLOW) ;<span class="hljs-comment">//内存分配失败</span><br>         &#125;<br>      (*T) -&gt;data = ch;<span class="hljs-comment">// 生成根结点，并把数据读入数据域</span><br>      CreateBiTree (&amp;(*T) -&gt;lchild); <span class="hljs-comment">//递归构造左子树</span><br>      CreateBiTree (&amp;(*T) -&gt;rchild);<span class="hljs-comment">//递归构造右子树</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理和之前的先序遍历是一样的，如果想使用中序遍历或者是后序遍历创建一棵树，只需要把递归代码的顺序改一下即可。</p><h1 id="六、树、二叉树、森林的转换"><a href="#六、树、二叉树、森林的转换" class="headerlink" title="六、树、二叉树、森林的转换"></a>六、树、二叉树、森林的转换</h1><h2 id="1-树转换为二叉树"><a href="#1-树转换为二叉树" class="headerlink" title="1. 树转换为二叉树"></a>1. 树转换为二叉树</h2><ul><li>加线。在所有兄弟结点之间加一条连线。</li><li>去钱。对树中每个结点，只保留它与第一个孩子结点的连线，删除与其他孩子结点之间的连线。</li><li> 层次调整。以树的根结点为轴心，将整棵树顺时针旋转 定的角度，使之结构层次分明。注意第一个孩子是二叉树结点的左孩子，兄弟转换过来的孩子是结点的右孩子。</li></ul><p><img src="https://img-blog.csdnimg.cn/66e2fe96701345df94119767e7fbe42c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="给兄弟之间加线"><br><img src="https://img-blog.csdnimg.cn/1661a2a134e548ac8e89ae842dc8b8c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="去线"></p><h2 id="2-森林转换为二叉树"><a href="#2-森林转换为二叉树" class="headerlink" title="2. 森林转换为二叉树"></a>2. 森林转换为二叉树</h2><ul><li>把每个树转换为二叉树。</li><li>第一 棵二叉树不动，从第二棵二叉树开始，依次把后一棵 叉树的根结点作为<br>棵二叉树的根结点的右孩子，用线连接起来。当所有的二叉树连接起来后<br>就得到了由森林转换来的二叉树。</li></ul><p><img src="https://img-blog.csdnimg.cn/84d628fb789e40648e0ab4cb0f2cc413.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="森林"></p><p><img src="https://img-blog.csdnimg.cn/84df22d0a9a343f0a6b246905a17e455.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="把每一棵树转换为二叉树"></p><p><img src="https://img-blog.csdnimg.cn/bf8c5d80f3474fa3be07efbb15ca62f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="把每一棵树作为前一棵树的右子树连接起来"></p><h2 id="3-二叉树转换为树"><a href="#3-二叉树转换为树" class="headerlink" title="3. 二叉树转换为树"></a>3. 二叉树转换为树</h2><ul><li>加线。若某结点的左孩子结点存在，则将这个左孩子的右孩子结点、右孩子的</li><li>右孩子结点、右孩子的右孩 的右孩子结点……将该结点与这些右孩子结点用线连接起来。</li><li>去钱。删除原二叉树中所有结点与其右孩子结点的连线。</li><li>层次调整使之结构层次分明。</li></ul><p><img src="https://img-blog.csdnimg.cn/3f08aa4960234221aa4092a066720f58.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_12,color_FFFFFF,t_70,g_se,x_16" alt="二叉树"></p><p><img src="https://img-blog.csdnimg.cn/ca684fa4c4f644d8b16acbfdf97ba087.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="加线"></p><p><img src="https://img-blog.csdnimg.cn/3150978ae6fb4830bf76a26a153498d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_13,color_FFFFFF,t_70,g_se,x_16" alt="去线"></p><p><img src="https://img-blog.csdnimg.cn/5b603c2200414ef1995dd341b04672d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="层次调整"></p><h2 id="4-二叉树转换为森林"><a href="#4-二叉树转换为森林" class="headerlink" title="4. 二叉树转换为森林"></a>4. 二叉树转换为森林</h2><ul><li>从根结点开始 若右孩子存在，则把与右孩子结点的连线 ，再查看分离后的二叉树，若右孩子存在，则连续去除……，直到所有右孩子连线都删除为止，得到分离的 叉树再将每棵分离后的 叉树转换为树即可（就是过程反一下而已</li></ul><p><img src="https://img-blog.csdnimg.cn/db8b4cd5a9ef49e9a50328c6085bc27e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_14,color_FFFFFF,t_70,g_se,x_16" alt="二叉树"></p><p><img src="https://img-blog.csdnimg.cn/9a5882b52f9f44538ce525beb753da7d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_14,color_FFFFFF,t_70,g_se,x_16" alt="寻找右孩子去线"></p><p><img src="https://img-blog.csdnimg.cn/cb75e4708e6f4ba5a72176ed60ebc957.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="将分离的二叉树转换为树"></p><h1 id="七、哈夫曼树"><a href="#七、哈夫曼树" class="headerlink" title="七、哈夫曼树"></a>七、哈夫曼树</h1><h2 id="1-带权路径长度及哈夫曼树的定义"><a href="#1-带权路径长度及哈夫曼树的定义" class="headerlink" title="1. 带权路径长度及哈夫曼树的定义"></a>1. 带权路径长度及哈夫曼树的定义</h2><p>树中结点常常被赋予一个表示某种意义的数值，称为该结点的权。从树的根到任意结点的路径长度(经过的边数)与该结点上权值的乘积，称为该结点的带权路径长度，树中所有叶结点的带权路径长度之和称为该树的带权路径长度。<strong>在含有n个带权叶结点的二叉树中，其中带权路径长度(WPL)最小的二叉树称为哈夫曼树，也称最优二叉树。</strong> 例如，下图中的3棵二叉树都有4个叶子结点a, b,c,d,分别带权7,5,2,4，它们的带权路径长度分别为</p><p><img src="https://img-blog.csdnimg.cn/eefc1b5f75a341beb43e3d3676ede415.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"><br>上图中C树的带权路径长度最小，因此为哈夫曼树</p><h2 id="2-构建一棵哈夫曼树"><a href="#2-构建一棵哈夫曼树" class="headerlink" title="2. 构建一棵哈夫曼树"></a>2. 构建一棵哈夫曼树</h2><p>   采用贪心算法的思想构造</p><ol><li>先把有权值的叶子结点按照从大到小（从小到大也可以）的顺序排列成一个有序序列。</li><li>取最后两个最小权值的结点作为一个新节点的两个子结点，注意相对较小的是左孩子。</li><li>用第2步构造的新结点替掉它的两个子节点，插入有序序列中，保持从大到小排列。</li><li>重复步骤2到步骤3，直到根节点出现。</li></ol><p><img src="https://img-blog.csdnimg.cn/ce5fbd7136c748458ff74a9c1c718e93.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3-哈夫曼编码"><a href="#3-哈夫曼编码" class="headerlink" title="3. 哈夫曼编码"></a>3. 哈夫曼编码</h2><p>哈夫曼编码是一种被广泛应用而且非常有效的数据压缩编码<br>例如将这串字符用二进制转换</p><pre><code class="hljs">BADCADFEED</code></pre><p>得到的代码如下图所示：<br><img src="https://img-blog.csdnimg.cn/88f44e2917c44e3b9f7911e522d1017b.png"><br>采用哈夫曼树进行编码，根据出现的次数确定权重。构造的哈夫曼树如下图所示：<br><img src="https://img-blog.csdnimg.cn/c4c683ed99a64db08d56968d2f4714cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>然后转换为二进制代码：<br><img src="https://img-blog.csdnimg.cn/187f72f293954aee85731636911d9054.png"><br>和原来的相比，就会压缩了许多<br><img src="https://img-blog.csdnimg.cn/062df6ce4a1a411eb4976adaf04a096c.png"><br>哈夫曼树博大精深，这里只是粗浅的讲一下。</p><p>———————————————————————————————《完结撒花，感谢陪伴》</p>]]></content>
    
    
    <categories>
      
      <category>data structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swagger</title>
    <link href="/2021/11/23/Swagger/"/>
    <url>/2021/11/23/Swagger/</url>
    
    <content type="html"><![CDATA[<h1 id="一、为什么要使用swagger"><a href="#一、为什么要使用swagger" class="headerlink" title="一、为什么要使用swagger"></a>一、为什么要使用swagger</h1><p>在前后端分离的时代，前端人员和后端人员无法做到“及时协商，尽早解决”，最终会导致许多的问题出现。<br>解决方案：</p><ul><li>首先制定一个schema，实时更新最新的API，降低集成的风险；</li><li>前后端分离<ul><li>前端测试后端接口：postman</li><li>后端提供接口，需要实时更新最新的消息及改动<br>这里可以参考swagger的官网 <a href="https://swagger.io/">https://swagger.io/</a></li></ul></li></ul><h1 id="二、springboot集成swagger"><a href="#二、springboot集成swagger" class="headerlink" title="二、springboot集成swagger"></a>二、springboot集成swagger</h1><p>这里是以springboot 2.6.0和swagger3.0.0版本作为演示</p><p>首先在pom.xml文档里面加入这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后需要写一个对于swagger的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//分组</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;A&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;B&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;C&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket</span><span class="hljs-params">()</span></span>&#123;<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .enable(<span class="hljs-keyword">true</span>)<span class="hljs-comment">//默认为true 关闭后，则不能使用swagger</span><br>                .select()<br>                <span class="hljs-comment">//指定接口的位置</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.swagger.controller&quot;</span>))<br>                <span class="hljs-comment">//过滤什么路径</span><br>                <span class="hljs-comment">//.paths()</span><br>                .build();<br>                <span class="hljs-comment">//.globalOperationParameters(pars);</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//作者信息</span><br>        Contact contact = <span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;William&quot;</span>,<span class="hljs-string">&quot;https://mercurys-52hz.gitee.io/&quot;</span>,<span class="hljs-string">&quot;chening_william@163.com&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfo(<br>                <span class="hljs-string">&quot;William的接口文档&quot;</span>,<br>                <span class="hljs-string">&quot;前端根据接口进行测试&quot;</span>,<br>                <span class="hljs-string">&quot;1.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://mercurys-52hz.gitee.io/&quot;</span>,<br>                contact,<br>                <span class="hljs-string">&quot;Apache 2.0&quot;</span>,<br>                <span class="hljs-string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>                <span class="hljs-keyword">new</span> ArrayList()<br>        );<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三、配置详解"><a href="#三、配置详解" class="headerlink" title="三、配置详解"></a>三、配置详解</h1><h2 id="1-swagger配置"><a href="#1-swagger配置" class="headerlink" title="1.swagger配置"></a>1.swagger配置</h2><p>在swagger3.0.0版本中，需要在配置类的上面加上 <strong>@EnableOpenApi</strong>，当然还有配置类需要的@Configuration注解，最重要的就是一定需要加上 <strong>@EnableWebMvc</strong>注解，不然控制面板就会报错，就是这个错误浪费了我一下午的时间</p><p><img src="https://img-blog.csdnimg.cn/c56545e911d04ed2846559866babdb15.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="更多的配置"><br>可以通过设置 <strong>.apis(RequestHandlerSelectors.basePackage(“com.swagger.controller”))</strong> 里面的参数用来指定需要扫描的包，这里面还可以设置更多的参数，详情可以参照上面的这张图片。加上 <strong>paths()</strong> 后可以在里面设置过滤的路径不扫描。</p><h2 id="2-信息配置"><a href="#2-信息配置" class="headerlink" title="2.信息配置"></a>2.信息配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//作者信息</span><br>        Contact contact = <span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;William&quot;</span>,<span class="hljs-string">&quot;https://mercurys-52hz.gitee.io/&quot;</span>,<span class="hljs-string">&quot;chening_william@163.com&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfo(<br>                <span class="hljs-string">&quot;William的接口文档&quot;</span>,<br>                <span class="hljs-string">&quot;前端根据接口进行测试&quot;</span>,<br>                <span class="hljs-string">&quot;1.0&quot;</span>,<br>                <span class="hljs-string">&quot;https://mercurys-52hz.gitee.io/&quot;</span>,<br>                contact,<br>                <span class="hljs-string">&quot;Apache 2.0&quot;</span>,<br>                <span class="hljs-string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>                <span class="hljs-keyword">new</span> ArrayList()<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7738d84b0a794a7a8870ffb54cdcd915.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="里面一些参数的名字"><br>这里主要就是配置一些作者的信息的名字好联系啥的，不太重要，就不细讲了。</p><h2 id="3-配置多api分组"><a href="#3-配置多api分组" class="headerlink" title="3.配置多api分组"></a>3.配置多api分组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分组</span><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket1</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;A&quot;</span>);<br>   &#125;<br><br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket2</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;B&quot;</span>);<br>   &#125;<br><br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">docket3</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="hljs-string">&quot;C&quot;</span>);<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>作用就是为每个api分一下组。作用效果如下图<br><img src="https://img-blog.csdnimg.cn/13fe5463f9b240b0a2d76be6183d9d63.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="分组详情"></p><h2 id="4-通过注解配置注释"><a href="#4-通过注解配置注释" class="headerlink" title="4.通过注解配置注释"></a>4.通过注解配置注释</h2><p>凭空传过去，前端一定会一脸懵逼的，这时候就需要注释来帮助理解了。<br><img src="https://img-blog.csdnimg.cn/b7caed00139349b499335c18b7b094c7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="四、swagger的使用"><a href="#四、swagger的使用" class="headerlink" title="四、swagger的使用"></a>四、swagger的使用</h1><p>1、访问</p><p>swagger3.0的默认的访问地址为  主机地址+/swagger-ui/index.html</p><p>2、注释的使用</p><p>Swagger使用的注解及其说明：</p><p>@Api：用在类上，说明该类的作用。</p><p>@ApiOperation：注解来给API增加方法说明。</p><p>@ApiImplicitParams : 用在方法上包含一组参数说明。</p><p>@ApiImplicitParam：用来注解来给方法入参增加说明。</p><p>@ApiResponses：用于表示一组响应</p><p>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息</p><pre><code class="hljs">   code：数字，例如400   message：信息，例如&quot;请求参数没填好&quot;   response：抛出异常的类   </code></pre><p>@ApiModel：描述一个Model的信息（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）</p><pre><code class="hljs">  @ApiModelProperty：描述一个model的属性</code></pre><table><thead><tr><th align="left">paramType：指定参数放在哪个地方</th><th align="left">header：请求参数放置于Request Header，使用@RequestHeader获取 <br> query：请求参数放置于请求地址，使用@RequestParam获取<br>path：（用于restful接口）–&gt;请求参数的获取：@PathVariable<br>body：（不常用）<br>form（不常用</th></tr></thead><tbody><tr><td align="left">name：参数名</td><td align="left"></td></tr><tr><td align="left">dataType：参数类型</td><td align="left"></td></tr><tr><td align="left">required：参数是否必须传</td><td align="left">true / false</td></tr><tr><td align="left">value：说明参数的意思</td><td align="left"></td></tr><tr><td align="left">defaultValue：参数的默认值</td><td align="left"></td></tr></tbody></table><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Api(&quot;登录控制器&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">loginController</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;输入用户的id和密码，查询用户信息，如果数据库没有或者密码不对应则会返回空值&quot;)</span><br>    <span class="hljs-meta">@ApiImplicitParams(&#123; @ApiImplicitParam(paramType = &quot;query&quot;,name = &quot;id&quot;,value = &quot;用户的id&quot;,required = true,dataType = &quot;Integer&quot;,dataTypeClass = Integer.class,example = &quot;123&quot;),</span><br><span class="hljs-meta">                         @ApiImplicitParam(paramType = &quot;query&quot;,name = &quot;password&quot;, value = &quot;密码&quot;,required = true,dataType = &quot;String&quot;,dataTypeClass = String.class)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span><span class="hljs-keyword">int</span> id, <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>&#123;<br><br>        User loginuser = userService.doLogin(id,password);<br><br>        <span class="hljs-keyword">if</span>(loginuser == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> loginuser;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里补充一点，在使用swagger(version 3.0)的进行上传文件的调试的时候需要注意一点，记得把把参数那里的文件的注解换一下，才能使swagger显示出来上传文件的按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file<br></code></pre></td></tr></table></figure><h4><<<<<完结撒花>>>>></h4>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot</title>
    <link href="/2021/10/24/springboot/"/>
    <url>/2021/10/24/springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="一、初识boot"><a href="#一、初识boot" class="headerlink" title="一、初识boot"></a>一、初识boot</h1><p><img src="https://img-blog.csdnimg.cn/cb9ab8a3d43543849f3b99943bee9000.png"><br><img src="https://img-blog.csdnimg.cn/37911160829e4ddf8031e998b114b15c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>可以从Spring或者idea上面直接创建boot项目</p><p><strong>@RestController//返回字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-comment">//返回字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hellocontroller</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br><br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,world&quot;</span>;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在application中启动程序<br><img src="https://img-blog.csdnimg.cn/42b5d70b2c06457d9cdbb5e588c594fc.png"></p><h2 id="1-pom-xml分析"><a href="#1-pom-xml分析" class="headerlink" title="1. pom xml分析"></a>1. pom xml分析</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 这个boot的依赖集成了tomcat dispatcherServlet xml     --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!--测试用的有依赖--&gt;</span><br><br><span class="hljs-comment">&lt;!--有一个共同的前缀就是spring-boot-starter--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!--这里有时候需要收到导入一下这个web依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--打包的依赖，打包成jar包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置端口"><a href="#2-配置端口" class="headerlink" title="2. 配置端口"></a>2. 配置端口</h2><p><img src="https://img-blog.csdnimg.cn/bb17c9cf3a8547639146187eb765bfe1.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">server.port = <span class="hljs-number">8081</span>   <span class="hljs-regexp">//</span>properties配置端口文件<br></code></pre></td></tr></table></figure><h2 id="3-启动器"><a href="#3-启动器" class="headerlink" title="3. 启动器"></a>3. 启动器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>启动器:就是boot的启动场景</li><li>比如spring-boot-starter-web,他就会帮我们自动导入web环境的所有依赖</li><li>springboot会将所有的场景功能,都变成一个个的启动器</li><li>我们要使用什么功能,就只要找到对应的启动器就行了</li></ul><h2 id="4-自动配置"><a href="#4-自动配置" class="headerlink" title="4. 自动配置"></a>4. 自动配置</h2><p>boot所有的自动配置都是启动的时候扫描并加载, spring,factories所有的自动配置都在这里面,但是不一定生效,要判断条件是否成立,只要导入了对应的start,就有对应的启动器了,有了启动器,我们的自动装配就会生效,然后就会配置成功</p><ol><li>springboot在启动的时候,从类路径下/META/spring.factorirs 获取指定的值;</li><li>将这些自动配置导入容器,自动配置就会生效,帮我进行自动配置</li><li>整合JavaEE,解决方案和自动配置的东西都在spring-boot-autoconfigure-2.2.0.RELEASE.jar这个包下.</li><li>它会把所有需要导入的组件,以类名的方式返回,这些组件就会被添加到容器</li><li>容器也会存在非常多的xxxAutoConfiguration 的文件,  就是这些类给容器中导入了这个场景需要的所有组件</li></ol><h1 id="二、一些简单的boot操作"><a href="#二、一些简单的boot操作" class="headerlink" title="二、一些简单的boot操作"></a>二、一些简单的boot操作</h1><h2 id="1-yaml语句"><a href="#1-yaml语句" class="headerlink" title="1. yaml语句"></a>1. yaml语句</h2><p><strong>一定要记住有空格!!!  空格很重要  代表了他们之间的层级关系</strong></p><p><img src="https://img-blog.csdnimg.cn/604fbd34eb62486587f3a6d8bde347ad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1) 基础语法"></a>1) 基础语法</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">william</span><br><span class="hljs-comment">#对象</span><br><br><span class="hljs-attr">student:</span><br>  <span class="hljs-string">name:william</span><br>  <span class="hljs-string">age:3</span><br><span class="hljs-comment"># 行内写法</span><br><span class="hljs-string">student</span> &#123;<span class="hljs-string">name:william</span>,<span class="hljs-string">age:3</span>&#125;<br>     <br><span class="hljs-comment"># 数组</span><br><span class="hljs-string">pets</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br><br><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]     <br></code></pre></td></tr></table></figure><p>可以同时存在两个配置文件,但是他们有优先级<br><img src="https://img-blog.csdnimg.cn/808c9f56c6b94255915b74f98fda238f.png"></p><h3 id="2-yaml可以直接个实体类赋值"><a href="#2-yaml可以直接个实体类赋值" class="headerlink" title="2) yaml可以直接个实体类赋值"></a>2) yaml可以直接个实体类赋值</h3><ol><li>常规方法</li></ol><p>@Componet  标记为spring的组件  spring才会扫描</p><p>@Value (“”)   为属性添加值</p><p><img src="https://img-blog.csdnimg.cn/fc2bfab5037c4a62ac5f1a8f3b353315.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>@Autowired自动装配过来</p><ol start="2"><li>yaml方法<br><img src="https://img-blog.csdnimg.cn/cb891492fd19434fbbc15b5768832385.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ol><p>配置了上图的configurationProperties()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span>;<br><span class="hljs-comment">//这里就将yaml里person和类绑定起来了,就可以给类进行赋值</span><br></code></pre></td></tr></table></figure><p>再加上对应的名  和yaml中的一样就可以赋值成功了</p><h2 id="2-ConfigurationProperties"><a href="#2-ConfigurationProperties" class="headerlink" title="2. ConfigurationProperties"></a>2. ConfigurationProperties</h2><p><img src="https://img-blog.csdnimg.cn/128d7f927e674c558982aaf244bc8c26.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ol><li>自定义配置文件</li></ol><p>也可以自定义自己的配置文件绑定一下就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySouce(value = &quot;classpath:qinjiang.properties&quot;)</span><br>...类...<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3b9261d3808f41459886d9ba7a437864.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_16,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/57e795efb2a34ffea55efb1fc19475e9.png"></p><ol start="2"><li>也可以使用el表达式 </li></ol><p><img src="https://img-blog.csdnimg.cn/e639db1cd8e142c9baf114c78688ad24.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_11,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">qinjiang$&#123;random.uuid&#125;</span><br> <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random,int&#125;</span>  <span class="hljs-comment"># 给属性赋随机值</span><br> <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br> <span class="hljs-attr">birth:</span> <span class="hljs-number">2021</span><span class="hljs-string">/10/13</span><br> <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br> <span class="hljs-attr">list:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">girl</span> <br><span class="hljs-attr">dog:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;person.hello:hello&#125;_旺财</span><br> <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>或者dog.name 那里  使用该表达式，如果person里(就上面那个类)有person.hello  就赋值person.hello 的值,否则就赋值”hello”</p><h2 id="4-松散绑定"><a href="#4-松散绑定" class="headerlink" title="4. 松散绑定"></a>4. 松散绑定</h2><p><img src="https://img-blog.csdnimg.cn/2309a3700f664d71b43f0684ff25b041.png"></p><h2 id="5-配置文件相关"><a href="#5-配置文件相关" class="headerlink" title="5. 配置文件相关"></a>5. 配置文件相关</h2><p><img src="https://img-blog.csdnimg.cn/55e108936b3c4ec9ad3024eb9e76d17b.png"></p><p>几个能配置appliction的位置</p><p><strong>配置多个端口</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span>   <span class="hljs-comment">#激活yaml中的端口  active</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br><br></code></pre></td></tr></table></figure><h1 id="三、web开发"><a href="#三、web开发" class="headerlink" title="三、web开发"></a>三、web开发</h1><p><img src="https://img-blog.csdnimg.cn/9e8afeda4ade46c48524a431e4d8d050.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="1-导入静态资源"><a href="#1-导入静态资源" class="headerlink" title="1. 导入静态资源"></a>1. 导入静态资源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//导入静态资源的源码，了解</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">this</span>.addResourceHandler(registry, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>        <span class="hljs-keyword">this</span>.addResourceHandler(registry, <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>            registration.addResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations());<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.servletContext != <span class="hljs-keyword">null</span>) &#123;<br>                ServletContextResource resource = <span class="hljs-keyword">new</span> ServletContextResource(<span class="hljs-keyword">this</span>.servletContext, <span class="hljs-string">&quot;/&quot;</span>);<br>                registration.addResourceLocations(<span class="hljs-keyword">new</span> Resource[]&#123;resource&#125;);<br>            &#125;<br><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c25d5881db2443719781738e6b82670a.png"><br>静态资源主要可以放在这三个资源目录下，就可以直接通过  8080/wenjian_name.html来访问</p><p>如果存在相同名字的文件， 他们之间存在一个优先级为</p><blockquote><p>resources&gt;static&gt;public</p><p><img src="https://img-blog.csdnimg.cn/3346e158563e4e6cb87105b73e95bbc1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p></blockquote><h2 id="2-定制首页"><a href="#2-定制首页" class="headerlink" title="2. 定制首页"></a>2. 定制首页</h2><p>把index文件放到静态资源的那三个目录里面,注意一定要是index这个名字</p><p>如果不放在那三个目录下，要放在template下则需要添加模板引擎，然后添加一个controller跳转<br>使用模板引擎thymeleaf</p><p>在pom.xml中导入这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样以后template里的html文件通过controller 的跳转就可以访问了</p><p><strong>简单的controller和thymeleaf使用</strong><br><img src="https://img-blog.csdnimg.cn/91d9cddff4df47ea938b9110e56d9b48.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/c1d74c71b7564e138f116aa2ebbf6df1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3-mvc配置原理"><a href="#3-mvc配置原理" class="headerlink" title="3. mvc配置原理"></a>3. mvc配置原理</h2><p><img src="https://img-blog.csdnimg.cn/3339e9bc1c6640929271bbfd4efdeb31.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*自定义一个视图解析器，并设置对应的url跳转到哪个位置</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcconfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<span class="hljs-comment">//自定义视图解析器</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<span class="hljs-comment">//输入这两个 url时会跳转到 templates 下的 index</span><br>        registry.addViewController(<span class="hljs-string">&quot;/index.html&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        registry.addViewController(<span class="hljs-string">&quot;/main.html&quot;</span>).setViewName(<span class="hljs-string">&quot;dashboard&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/07557ed6001c4697a26e9e346cdd29ea.png"></p><h2 id="4-使用Lombok"><a href="#4-使用Lombok" class="headerlink" title="4. 使用Lombok"></a>4. 使用Lombok</h2><p>Lombok注解快速注解一个标准类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- lombok--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> Integer id;<br>    <span class="hljs-keyword">public</span> String departName;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1addc28352f84c7c99a7de23f0cad44a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_12,color_FFFFFF,t_70,g_se,x_16"><br>只需要几行代码，就已经配置好了上面所示的结构</p><h2 id="5-thymeleaf使用"><a href="#5-thymeleaf使用" class="headerlink" title="5. thymeleaf使用"></a>5. thymeleaf使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-comment">&lt;!--在使用的时候都需要导入命名空间， thymeleaf的语法才会生效--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 命名空间 --&gt;</span><br><span class="hljs-comment">&lt;!-- Bootstrap core CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意导入命名空间和   @{  }  就是用来放链接的</p><p>本地的链接 都需要改+th:<br>只要是被thymeleaf接管就需要加上th:</p><p> <strong>给默认路径前面增加一个chen 的url</strong><br> 在配置文件(application)里面加上这段代码就行了<br>server.servlet.context-path=/chen</p><h2 id="6-数据层的实现"><a href="#6-数据层的实现" class="headerlink" title="6. 数据层的实现"></a>6. 数据层的实现</h2><p><img src="https://img-blog.csdnimg.cn/2b26c58a43b547c3a6fd45a96e0ac508.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*员工数据层</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeDao</span> </span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-meta">@Autowired</span><span class="hljs-comment">//这里从仓库中获取之后才可以使用，注意这里注入之后DepartmentDao就变成了紫色</span><br>    <span class="hljs-keyword">private</span>  DepartmentDao DepartmentDao;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        employees = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Employee&gt;();<br><br>        employees.put(<span class="hljs-number">1001</span>,<span class="hljs-keyword">new</span> Employee( <span class="hljs-number">1001</span>,<span class="hljs-string">&quot;AA&quot;</span>,<span class="hljs-string">&quot;2230035341@qq.com&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>,<span class="hljs-string">&quot;教学部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1002</span>,<span class="hljs-keyword">new</span> Employee( <span class="hljs-number">1002</span>,<span class="hljs-string">&quot;BB&quot;</span>,<span class="hljs-string">&quot;6454564456@qq.com&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">102</span>,<span class="hljs-string">&quot;市场部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1003</span>,<span class="hljs-keyword">new</span> Employee( <span class="hljs-number">1003</span>,<span class="hljs-string">&quot;CC&quot;</span>,<span class="hljs-string">&quot;2230044447@qq.com&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">103</span>,<span class="hljs-string">&quot;教研部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1004</span>,<span class="hljs-keyword">new</span> Employee( <span class="hljs-number">1004</span>,<span class="hljs-string">&quot;DD&quot;</span>,<span class="hljs-string">&quot;2230454441@qq.com&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">104</span>,<span class="hljs-string">&quot;运营部&quot;</span>)));<br>        employees.put(<span class="hljs-number">1005</span>,<span class="hljs-keyword">new</span> Employee( <span class="hljs-number">1005</span>,<span class="hljs-string">&quot;EE&quot;</span>,<span class="hljs-string">&quot;8599855697@qq.com&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">105</span>,<span class="hljs-string">&quot;后勤部&quot;</span>)));<br><br>    &#125;<br><br>    <span class="hljs-comment">//主键自增</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span>  Integer initId = <span class="hljs-number">1006</span>;<br>    <span class="hljs-comment">//增加一个员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(Employee employee)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(employee.getId()==<span class="hljs-keyword">null</span>)&#123;<br>            employee.setId(initId++);<br>        &#125;<br>        employee.setDepartment(DepartmentDao.getDepartmentById(employee.getDepartment().getId()));<br>        employees.put(employee.getId(),employee);<br><br>    &#125;<br><br>    <span class="hljs-comment">//查询员工的信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> employees.values();<span class="hljs-comment">//注意这里,map集合.value()的返回值是Collection集合</span><br>    &#125;                             <br><br>    <span class="hljs-comment">//通过id查询员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmployeeById</span><span class="hljs-params">(Integer id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> employees.get(id);<span class="hljs-comment">// 通过key获取对应的value值</span><br>    &#125;<br><br>    <span class="hljs-comment">//删除员工</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span></span>&#123;<br>        employees.remove(id);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*部门数据层</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Department&gt; departments = <span class="hljs-keyword">null</span>;<br><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        departments = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Department&gt;();<br>        departments.put(<span class="hljs-number">101</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">101</span>,<span class="hljs-string">&quot;教学部&quot;</span>));<br>        departments.put(<span class="hljs-number">102</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">102</span>,<span class="hljs-string">&quot;市场部&quot;</span>));<br>        departments.put(<span class="hljs-number">103</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">103</span>,<span class="hljs-string">&quot;教研部&quot;</span>));<br>        departments.put(<span class="hljs-number">104</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">104</span>,<span class="hljs-string">&quot;运营部&quot;</span>));<br>        departments.put(<span class="hljs-number">105</span>,<span class="hljs-keyword">new</span> Department(<span class="hljs-number">105</span>,<span class="hljs-string">&quot;后勤部&quot;</span>));<br><br>    &#125;<br><br>    <span class="hljs-comment">//获得所有部门的信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Department&gt; <span class="hljs-title">getDepartment</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> departments.values();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDepartmentById</span><span class="hljs-params">(Integer id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> departments.get(id);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>map集合.value()的返回值是Collection集合,并且<strong>一定</strong>要在该类的上面写上 <strong>@Repository</strong>注解,告诉spring这是一个dao的数据的层,封装一个bean,方便调用</p><h2 id="7-登录功能的实现"><a href="#7-登录功能的实现" class="headerlink" title="7. 登录功能的实现"></a>7. 登录功能的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//登录的controller</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">loginController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password, Model model, HttpSession session)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(username)&amp;&amp;<span class="hljs-string">&quot;123456&quot;</span>.equals(password))&#123;<br>             session.setAttribute(<span class="hljs-string">&quot;loginuser&quot;</span>,username);<br>             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/main.html&quot;</span>;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br><br>            model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/user/logout&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span></span>&#123;<br>        session.invalidate();<span class="hljs-comment">//注销session</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:index.html&quot;</span>;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p>同样的道理，也需要在controller的类上加上@Controller注解，方法里面返回字符串，spring才会<strong>执行</strong>字符串里的内容，如果是@Restcontroller的话，就只会把它当作普通的字符串返回给前端</p></li><li><p>@RequestParam简单的来讲就是把参数绑定在了url上 </p><blockquote><p>详情请见     <a href="https://blog.csdn.net/sswqzx/article/details/84195043?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163473054216780366541664%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163473054216780366541664&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-84195043.pc_search_es_clickV2&amp;utm_term=@RequestParam&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/sswqzx/article/details/84195043?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163473054216780366541664%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163473054216780366541664&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-84195043.pc_search_es_clickV2&amp;utm_term=%40RequestParam&amp;spm=1018.2226.3001.4187</a></p></blockquote></li><li><p>并且设置了一个session将用户的名字以 “loginuser” 的名字保存了下来<br><img src="https://img-blog.csdnimg.cn/a5e196246a9947c9b21c2010bbf4824f.png"><br>然后前端在接收一波就可以在dashboard的界面中获取到登录的信息了，这里的这种写法[[${…}]]等同于th:text:” ${ …}”</p></li><li><p>最后重定向到”main.html”这个url，因为前面 自定义了一个视图解析器，”main.html”这个url会跳转到dashboard这个html文件中。这样会比较安全</p></li><li><p>如果登录错误就将一个msg的数据通过model回传到前端<br><img src="https://img-blog.csdnimg.cn/93a4b317a40a4d879b33448aa8894eb8.png"><br>前端在刚刚的表单中用thymeleaf接收输出一下，就可以提示错误信息了</p></li><li><p>退出登录就是将session注销就行了 session.invalidate();</p><h2 id="8-拦截器的配置"><a href="#8-拦截器的配置" class="headerlink" title="8. 拦截器的配置"></a>8. 拦截器的配置</h2><p>这个时候可以登录了，发现一个问题，你直接输入mian的url照样可以进入登录的后的界面，这又问题啊，这里就需要用到我们的拦截器了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHanderInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        Object loginuser = request.getSession().getAttribute(<span class="hljs-string">&quot;loginuser&quot;</span>);<br>        <span class="hljs-keyword">if</span>(loginuser==<span class="hljs-keyword">null</span>)&#123;<br>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;没有权限，请您先登录！&quot;</span>);<span class="hljs-comment">//</span><br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/index.html&quot;</span>).forward(request,response);<span class="hljs-comment">//把这个请求专发到index页面</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<span class="hljs-comment">//设置拦截</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//设置放行</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写拦截器首先需要实现一下HandlerInterceptor</p></li><li><p>然后重写preHandle</p></li><li><p>这里采用的是获取刚刚登录时发送的session 数据，要数据匹配才能登录</p></li><li><p>然后设置一个request的请求，设置一段话</p></li><li><p>通过转发的方法将这句话返回到登录的界面</p><blockquote><p>request.getRequestDispatcher(“/index.html”).forward(request,response);//把这个请求专发到index页面</p></blockquote></li></ol><p>登录失败的时候就会显示这段话提醒<br>6. 最后还有一步<img src="https://img-blog.csdnimg.cn/d62ef09993dd405c96a59cbd6607db9e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加刚刚配置的那个视图解析器</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>       registry.addInterceptor(<span class="hljs-keyword">new</span> LoginHanderInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>               .excludePathPatterns(<span class="hljs-string">&quot;/index.html&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/user/login&quot;</span>,<span class="hljs-string">&quot;/css/*&quot;</span>,<span class="hljs-string">&quot;/js/**&quot;</span>,<span class="hljs-string">&quot;/img/**&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p> 最后一步就是将刚刚写好的拦截器配置一下，到刚刚继承了configurer的类里面重写一个addInterceptors的方法，配置他的拦截路径，new一个刚刚写好的拦截器，这里的addPathPatterns就是添加拦截路径，excludePathPatterns就是放行的路径。<br> 然后一个拦截器就配置好了</p><h2 id="9-增删改查的实现"><a href="#9-增删改查的实现" class="headerlink" title="9. 增删改查的实现"></a>9. 增删改查的实现</h2><p> 最重要的功能–增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmployeeController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    EmployeeDao employeeDao;<br><br>    <span class="hljs-meta">@Autowired</span><br>    DepartmentDao departmentDao;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        Collection&lt;Employee&gt; employees = employeeDao.getAll();<br>        <span class="hljs-comment">//这里map.value返回的是Collection的集合</span><br>        model.addAttribute(<span class="hljs-string">&quot;emps&quot;</span>,employees);<br>        <span class="hljs-comment">//通过model将数据返回给前端,前端通过使用循环一下,展现出所有的数据</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;list&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/add&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>        Collection&lt;Department&gt; departments = departmentDao.getDepartment();<br>        model.addAttribute(<span class="hljs-string">&quot;departments&quot;</span>,departments);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add&quot;</span>;<span class="hljs-comment">//和前面同样的道理</span><br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><span class="hljs-comment">//这里使用是post请求</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toadd</span><span class="hljs-params">(Employee employee)</span> </span>&#123;<br>        employeeDao.save(employee);<span class="hljs-comment">//将数据存储到假的数据库中</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<span class="hljs-comment">//重定向到emps</span><br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/emp/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,Model model)</span> </span>&#123;<br>        Employee employee = employeeDao.getEmployeeById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;emp&quot;</span>,employee);<br><br>        Collection&lt;Department&gt; departments = departmentDao.getDepartment();<br>        model.addAttribute(<span class="hljs-string">&quot;departments&quot;</span>,departments);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/updateEmp&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toupdate</span><span class="hljs-params">(Employee employee)</span> </span>&#123;<br>        employeeDao.save(employee);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,Model model)</span> </span>&#123;<br>        employeeDao.delete(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/emps&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这一部分主要是对数据库的操作,原理都差不多的.<br>构建一个简单的网站就差不多到这儿了</p><h1 id="四、springboot♂♀数据库"><a href="#四、springboot♂♀数据库" class="headerlink" title="四、springboot♂♀数据库"></a>四、springboot♂♀数据库</h1><h2 id="1-springboot整合JDBC"><a href="#1-springboot整合JDBC" class="headerlink" title="1. springboot整合JDBC"></a>1. springboot整合JDBC</h2><p>首先最重要的就是链接数据库</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 设置时区和编码等</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>这里使用的yaml配置,当然你使用properties也是差不多的<br>这里链接的是一个叫做mybatis的数据库,里面有一张叫做user的表<img src="https://img-blog.csdnimg.cn/83ef857fa466462fa7bb40d8a76086f5.png"><br>接着就是写jdbcController了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-comment">//因为没有写对应的页面,所以就是直接返回字符串了</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCcontroller</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br>    <span class="hljs-comment">//只要配置了数据库就有这个类了</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/select&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; userList()&#123;<br>        String sql = <span class="hljs-string">&quot;select *from user&quot;</span>;<br>        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);<span class="hljs-comment">//返回list的值</span><br>        <span class="hljs-keyword">return</span> maps;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/adduser&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">adduserList</span><span class="hljs-params">()</span></span>&#123;<br>        String sql = <span class="hljs-string">&quot;insert into mybatis.user(id,name,pwd) values (4,&#x27;小明&#x27;,&#x27;123456&#x27;)&quot;</span>;<br>        jdbcTemplate.update(sql);<span class="hljs-comment">//返回list的值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add_ok&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/update/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateuserList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        String sql = <span class="hljs-string">&quot;update mybatis.user set name= ?,pwd = ? where id = &quot;</span>+id;<br>        <span class="hljs-comment">//拼接sql</span><br>        Object[] objects = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">2</span>];<br>        objects[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;小明&quot;</span>;<br>        objects[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;123445&quot;</span>;<br><br>        jdbcTemplate.update(sql,objects);<span class="hljs-comment">//这里是提供了重载的方法的,传入进取取代两个?,使用数组注入</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update_ok&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/deleteuser/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteuserList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        String sql = <span class="hljs-string">&quot;delete from mybatis.user where id = ?&quot;</span>;<br>        jdbcTemplate.update(sql,id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;update_ok&quot;</span>;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里唯一需要特别注意的就是第一个获取所有的数据的时候,jdbcTemplate.queryForList(sql)这里返回的是一个 List&lt;Map&lt;String, Object&gt;&gt;的数据类型</p><h2 id="2-springboot集成Druid数据源"><a href="#2-springboot集成Druid数据源" class="headerlink" title="2. springboot集成Druid数据源"></a>2. springboot集成Druid数据源</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 设置时区和编码等</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span> <span class="hljs-comment">#配置这个druid数据源</span><br><br>      <span class="hljs-comment">#SpringBoot默认是不注入这些的，需要自己绑定</span><br>      <span class="hljs-comment">#druid数据源专有配置</span><br><br>    <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span><br>    <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span><br>    <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span><br>    <span class="hljs-comment">#如果允许报错，java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br>    <span class="hljs-comment">#则导入log4j 依赖就行</span><br>    <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j2</span> <span class="hljs-comment">#要使用这个日志功能需要导入log4j</span><br>    <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">useGlobalDataSourceStat:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br></code></pre></td></tr></table></figure><p>前面的数据源的配置和前面的jdbc都是一样的,就是多了后一大堆,多了记录日志的功能,要使用这个功能需要再在xml里面导入log4j的依赖;</p><p><img src="https://img-blog.csdnimg.cn/b321b4be9ae94f26be563d95ebc16a22.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>并且添加一个Druid的config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfig</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">druidDatasource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();<br>    &#125;<br><br>    <span class="hljs-comment">//后台监控</span><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">a</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//因为boot内置了servlet的容器  所以么有web.xml  取而代之的时ServletRegistrationBean，想注册什么new 就欧克</span><br>        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="hljs-keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="hljs-keyword">new</span> StatViewServlet(), <span class="hljs-string">&quot;/druid/*&quot;</span>);<br><br>        <span class="hljs-comment">//后台的账号密码</span><br>        HashMap&lt;String, String&gt; InitParameter = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        InitParameter.put(<span class="hljs-string">&quot;loginUsername&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);  <span class="hljs-comment">//这里需要使用固定的key  loginUsername  loginPassword</span><br>        InitParameter.put(<span class="hljs-string">&quot;loginPassword&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-comment">//自己设置一个密码和账号</span><br><br>        <span class="hljs-comment">//允许谁可以访问</span><br>        InitParameter.put(<span class="hljs-string">&quot;allow&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br><br>        bean.setInitParameters(InitParameter);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br><br>    <span class="hljs-comment">//filter,,配置一个过滤器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">webStatFilter</span><span class="hljs-params">()</span> </span>&#123;<br><br>        FilterRegistrationBean bean = <span class="hljs-keyword">new</span> FilterRegistrationBean();<br>        bean.setFilter(<span class="hljs-keyword">new</span> WebStatFilter());<br>        <span class="hljs-comment">//可以过滤哪些请求呢?</span><br>        Map&lt;String, String&gt; initParameters = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(); <span class="hljs-comment">//这些东西不进行统计</span><br>        initParameters.put(<span class="hljs-string">&quot;exclusions&quot;</span>,<span class="hljs-string">&quot;*.js ,*.css,/druid/*&quot;</span>);<br>        bean.setInitParameters(initParameters);<br>        <span class="hljs-keyword">return</span> bean;<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置好了以后,你在url中输入druid就可以进入一个登录界面<br><img src="https://img-blog.csdnimg.cn/80db75072ab64477adec2de5f0237c29.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>输入刚刚配置的账号和密码后就可以进入页面了；<br><img src="https://img-blog.csdnimg.cn/0343486a3b6d4d4bb889c7b108a4debf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>里面有各种日志信息<br>比如查询一下刚刚数据库里面的数据<br><img src="https://img-blog.csdnimg.cn/2c9771f147a94db4871597876880397c.png"><br>就会有对应的sql信息<br><img src="https://img-blog.csdnimg.cn/5d7624b17c4648a7a859e4f8f71f2025.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="五、SpringSecurity"><a href="#五、SpringSecurity" class="headerlink" title="五、SpringSecurity"></a>五、SpringSecurity</h1><p>SpringSecurity是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，它可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-security模块，进行少量的配置，即可实现强大的安全管理</p><p>记住几个类</p><ul><li>WebSecurityConfigurerAdapter: 自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity:开启WebSecurity模式<br>SpringSecurity的两个主要目标是“认证”和“授权”(访问控制)。<br> “认证”（Authentication）<br> “授权”（Authorization）<br> 这个概念是通用的，而不是只在Spring Security中存在</li></ul><h2 id="1-设置页面的访问权限"><a href="#1-设置页面的访问权限" class="headerlink" title="1. 设置页面的访问权限"></a>1. 设置页面的访问权限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><br><br>    <span class="hljs-comment">//链式编程</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//首页所有人可以访问，功能页只有对应有权限的人才能访问</span><br><br>        http.authorizeHttpRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()            <span class="hljs-comment">//首页所有人都可以访问</span><br>                .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)  <span class="hljs-comment">//只有vip1 的用户才可以访问level1下面的页面</span><br>                .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)  <span class="hljs-comment">//只有vip2 的用户才可以访问level2下面的页面</span><br>                .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>); <span class="hljs-comment">//只有vip3 的用户才可以访问level3下面的页面</span><br>                <br>        <span class="hljs-comment">//没有权限默认到那个登录页，需要 写这个代码进行开启  加上后面的.loginPage后就可以定制登录页</span><br>        http.formLogin().loginPage(<span class="hljs-string">&quot;/tologin&quot;</span>);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>通过继承和重写authorizeHttpRequests方法用以实现页面的访问权限，有点类似于拦截器配置路径</p><h2 id="2-设置认证授权"><a href="#2-设置认证授权" class="headerlink" title="2.设置认证授权"></a>2.设置认证授权</h2><p>通过对用户的认证授权，赋予用户不同的访问权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//认证授权</span><br>    <span class="hljs-comment">//这里密码需要加密一下才能够使用</span><br>    <span class="hljs-comment">//这里使用的是BCryptPasswordEncoder</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> BCryptPasswordEncoder())<br>                .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password( <span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>) ).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">&quot;root&quot;</span>).password( <span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>) ).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>                .and()<br>                .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password( <span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>) ).roles(<span class="hljs-string">&quot;vip1&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是直接写密码是会报错的，因为spring会认为这不安全，需要加密一下，这里采用的是BCryptPasswordEncoder加密的方式，如果需要增加用户只需要加上and就行。</p><h2 id="3-注销和记住我功能"><a href="#3-注销和记住我功能" class="headerlink" title="3.注销和记住我功能"></a>3.注销和记住我功能</h2><p>emmmm,,,然后第三个功能注销和记住我功能的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//链式编程</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <span class="hljs-comment">//首页所有人可以访问，功能页只有对应有权限的人才能访问</span><br><br>       http.authorizeHttpRequests()<br>               .antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>               .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>               .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br>       <span class="hljs-comment">//没有权限默认到那个登录页，需要 写这个代码进行开启  加上后面的.loginPage后就可以定制登录页</span><br>       http.formLogin().loginPage(<span class="hljs-string">&quot;/tologin&quot;</span>);<br><br>       <span class="hljs-comment">//开启注销的功能  并且设置注销后的跳转地址</span><br>       http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br><br>       <span class="hljs-comment">//开启记住我功能  就是使用cookie实现的  默认保存两周</span><br>       http.rememberMe();<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>   感觉没有啥写的，主要就是在那个方法里面配置这两行代码就行</p><h2 id="4-SpringSecurity集成thymeleaf"><a href="#4-SpringSecurity集成thymeleaf" class="headerlink" title="4.SpringSecurity集成thymeleaf"></a>4.SpringSecurity集成thymeleaf</h2><p>   虽然一直觉得thymeleaf拉跨得一批，但是该学得还是要学</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span> <span class="hljs-attr">xmlns:sec</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity4&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--这里自动配置得命名空间是不是这个地址，需要手动修改一下--&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span> <span class="hljs-attr">sec:authorize</span> = <span class="hljs-string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--这里得sec 就是security--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui raised segment&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ui&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Level 1<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> Level-1-3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的   sec:authorize = “hasRole(‘vip1’)”  的意思就是只有登录的用户的权限是vip1的时候这短前端代码才会展示出来</p><h1 id="六、一些常用的任务"><a href="#六、一些常用的任务" class="headerlink" title="六、一些常用的任务"></a>六、一些常用的任务</h1><h2 id="1-异步任务"><a href="#1-异步任务" class="headerlink" title="1.异步任务"></a>1.异步任务</h2><p>首先我们来看看普通的方法</p><p>使用多线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Serice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncService</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">try</span>&#123;<br>           Thread.sleep(<span class="hljs-number">3000</span>);<span class="hljs-comment">//使用线程使他停止三秒钟</span><br>       &#125;<span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>           e.printStackTrace()<br>       &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;系统正在处理。。。。。&quot;</span>);<span class="hljs-comment">//然后再打印这个</span><br>&#125; <br><br><br><span class="hljs-comment">/*---------------------------------------------------------*/</span><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncController</span></span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    AsyncService asyncService;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>       asyncService.hello();<span class="hljs-comment">//停止三秒</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用springboot实现，只需要两步就可以实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Serice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncService</span></span>&#123;<br><br><span class="hljs-comment">//首先告诉spring这是一个异步的方法,加上一个注解就行</span><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">try</span>&#123;<br>           Thread.sleep(<span class="hljs-number">3000</span>);<br>       &#125;<span class="hljs-keyword">catch</span>(InterruptedException e)&#123;<br>           e.printStackTrace()<br>       &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;系统正在处理。。。。。&quot;</span>);<br>&#125; <br><br><br><span class="hljs-comment">/*---------------------------------------------------------*/</span><br><br><span class="hljs-comment">//第二步就是开启功能</span><br><span class="hljs-comment">//这个只需要使用Enable那个注解在主类上面加上就ok</span><br><br><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YibuApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(YibuApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>大功告成，这样就可以实现异步任务了。</p><h2 id="2-邮件任务"><a href="#2-邮件任务" class="headerlink" title="2.邮件任务"></a>2.邮件任务</h2><p>邮件任务也是经常需要写的任务。</p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p> 获取你邮箱的POP3/SMTP的码<br><img src="https://img-blog.csdnimg.cn/07a213bdc487485fbe89732349366f13.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="这里以QQ邮箱为例"></p></li><li><p>在配置文件里面配置相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">spring.mail.username=2108796780@qq.com</span><br><span class="hljs-string">spring.mail.password=刚刚的那个码</span><br><span class="hljs-string">spring.mail.host=smtp.qq.com</span><br><span class="hljs-comment"># 开启加密验证</span><br><span class="hljs-string">spring.mail.properties.mail.smtp.ssl.enable=true</span><br></code></pre></td></tr></table></figure><p>这里需要注意：<br>host主机是qq就写qq，是163就写163<br>qq的才有开启加密验证，163没有</p></li><li><p> 好的，现在来一个简单的邮件<br><img src="https://img-blog.csdnimg.cn/7aa70e1207ab4683888715377fcf65f1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="简单的邮件"></p></li><li><p>一个复杂的邮件<br><img src="https://img-blog.csdnimg.cn/888591744f7248dfa857be2a83aa6a43.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="复杂的邮件"></p></li><li><p>你也可以把这个发邮件的方法封装一下<br><img src="https://img-blog.csdnimg.cn/a8e7f44b8cba41e285d91a63c447cc0b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="封装的的邮件方法"><br>ok,邮件任务没了</p></li></ol><h2 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3.定时任务"></a>3.定时任务</h2><p>定时任务的实现也很简单，主要就是cron表达式有点难理解</p><ul><li>首先需要开启定时功能，这个和之前的一样，只需要Enable就可以<br>这里使用的是 <strong>@EnableScheduling</strong> 注解，也是直接加到主类上面就可以了。</li><li>第二步就是编写一个方法，在方法的上面加上 <strong>@Scheduled()</strong> 就行，注解里面需要填写表达式，这个不需要记忆，需要的时候去查就行，附上一个链接<a href="https://cron.qqe2.com/">在线的cron生成器</a>,为了方便理解，附上一张图，如下图。<br><img src="https://img-blog.csdnimg.cn/d0f52b456603435a80aa249a7bc792c2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="简单的cron"><h2 id="4-文件上传"><a href="#4-文件上传" class="headerlink" title="4.文件上传"></a>4.文件上传</h2>最近在写一个项目的时候，需要用到文件的上传的任务，因此把代码粘在这里，以便后面继续回顾和使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DynamicService dynamicService;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/fileload&quot;)</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file, HttpServletRequest request )</span> </span>&#123;<br><br>        String fileName = file.getOriginalFilename();<span class="hljs-comment">//获取文件的原始的名字</span><br>        String suffixName = fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<span class="hljs-comment">//文件后缀</span><br>        String filePath = <span class="hljs-string">&quot;D:/文档/新鲜出炉的程序/SpringBoot/LostandFound/src/main/resources/static/img/dynamic/&quot;</span>;<br>        fileName = UUID.randomUUID() + suffixName;<span class="hljs-comment">//通过uuid生成唯一标识符</span><br>        File dest = <span class="hljs-keyword">new</span> File(filePath + fileName);<br>        <span class="hljs-keyword">if</span> (!dest.getParentFile().exists()) &#123;<br>            dest.getParentFile().mkdirs();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.transferTo(dest);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            HttpSession session = request.getSession();<br>            System.out.println(session.getId() +<span class="hljs-string">&quot; &quot;</span>+session.getAttribute(<span class="hljs-string">&quot;uid&quot;</span>)+(String)session.getAttribute(<span class="hljs-string">&quot;dtext&quot;</span>)+session.getAttribute(<span class="hljs-string">&quot;dtag&quot;</span>));<br>            dynamicService.addImg(<span class="hljs-string">&quot;img/dynamic/&quot;</span>+fileName, (Integer) session.getAttribute(<span class="hljs-string">&quot;uid&quot;</span>),(String)session.getAttribute(<span class="hljs-string">&quot;dtext&quot;</span>),(String)session.getAttribute(<span class="hljs-string">&quot;dtag&quot;</span>));<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2021/09/17/CSS/"/>
    <url>/2021/09/17/CSS/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">    <p>更新日志:<p>    <ul>       <p>2021.9.17：根据狂神说的视频整理出该笔记</p>      <p>2022.4.18：由于学校前端选修课要考试了，根据沈大佬的笔记以及教学ppt做了一些修订和补充</p>    </ul></div><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>   Cascading Style Sheets 层叠样式表</p><h2 id="1-内联样式-行内样式-："><a href="#1-内联样式-行内样式-：" class="headerlink" title="1. 内联样式(行内样式)："></a>1. 内联样式(行内样式)：</h2><p>在标签内使用style属性指定css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> style = &quot;<span class="hljs-attribute">color</span> :red ;&quot;&gt;hello css&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="2-内部样式："><a href="#2-内部样式：" class="headerlink" title="2. 内部样式："></a>2. 内部样式：</h2><p>在head标签内，定义style标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;head&gt;<br>    &lt;style&gt;<br>                  <span class="hljs-selector-tag">div</span>&#123;<br>                         <span class="hljs-attribute">color</span>:blue;<br>                   &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span>&gt;hello css&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="3-外部样式"><a href="#3-外部样式" class="headerlink" title="3. 外部样式"></a>3. 外部样式</h2><ul><li><p>定义css资源文件       </p></li><li><p>在head标签内，定义link标签，引入外部资源文件   </p></li></ul><p>a.css文件:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">color</span> : green;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span> = <span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;css/a.css&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 这个不用写在style里面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello css<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>    <span class="hljs-keyword">@import</span>  <span class="hljs-string">&quot;css/a.css&quot;</span>;    &lt;!-- 来引入 --&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><div class = "note note-warning">注意</div><ul><li><p>外部样式表的文件名称必须带后缀名.css。</p></li><li><p>CSS文件一定是纯文本格式。</p></li><li><p>外部样式表修改后所有引用的页面样式自动地更新；</p></li><li><p>外部样式表优先级低于内部样式表；</p></li><li><p>同时链接几个外部样式表时按“最近优先的原则”</p></li></ul><h2 id="4-css的语法"><a href="#4-css的语法" class="headerlink" title="4. css的语法"></a>4. css的语法</h2><p> 格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器&#123;<br><br>           属性名：属性值；<br><br>           属性名：属性值；<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最后一个属性可以不加  ；</p><h2 id="5-选择器"><a href="#5-选择器" class="headerlink" title="5. 选择器"></a>5. 选择器</h2><h3 id="5-1-基础选择器"><a href="#5-1-基础选择器" class="headerlink" title="5.1 基础选择器"></a>5.1 基础选择器</h3><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-class">.cls1</span>&#123;                      &lt;!--前面是一个 . --&gt;<br>            <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#ff2</span><br>            color:blue<br>        &#125;<br>        <span class="hljs-selector-class">.test</span>&#123;<br>            <span class="hljs-attribute">color</span>:green<br>        &#125;<br>&lt;style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class = &quot;cls1&quot;&gt;Mercury牛逼&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class = &quot;test&quot;&gt;Mercury牛逼&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class = &quot;cls1 test&quot;&gt;Mercury牛逼&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><div class = "note note-warning">类选择器注意事项</div> <ul><li>类选择器是可以多次使用的</li><li>一个标签可以可以有多个class,后面的内容会覆盖掉前面的(写在class里面的顺序)</li></ul><h4 id="id选择器："><a href="#id选择器：" class="headerlink" title="id选择器："></a>id选择器：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-id">#div</span>&#123;                      &lt;!-- 前面是一个 # --&gt;<br>            <span class="hljs-attribute">color</span>:blue;<br>        &#125;<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> id = &quot;div1&quot; &gt;hello css&lt;/<span class="hljs-selector-tag">div</span>&gt; <br></code></pre></td></tr></table></figure><div class = "note note-info">ID选择符与类选择符的区别：</div>    <ul><li>类选择符可以给任意多的标记定义样式，但ID选择符在页面中标记中只能使用一次，<strong>具有唯一标识性</strong>；</li><li>ID选择符样式比类选择符样式优先级高。ID选择符局限性大，只能单独定义某个元素的样式（特殊情况下使用）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#a-good-id&quot;</span>&gt;</span>跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个可以实现跳转到id为a-good-id的标签所在的位置。那么可不可以写class呢？当然不能，因为class可能“重名”，这样就不知道到底该跳转到哪里。</p><h4 id="元素选择器-标记选择"><a href="#元素选择器-标记选择" class="headerlink" title="元素选择器(标记选择)"></a>元素选择器(标记选择)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>            <span class="hljs-selector-tag">div</span>&#123;<br><br>                <span class="hljs-attribute">color</span>:blue;<br><br>              &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="5-2-扩展选择器"><a href="#5-2-扩展选择器" class="headerlink" title="5.2 扩展选择器"></a>5.2 扩展选择器</h3><pre><code class="hljs">  选择所有元素  &#123;&#125;</code></pre><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">p</span>&#123;<br>               <span class="hljs-attribute">color</span>:blue;<br>     &#125;         <br></code></pre></td></tr></table></figure><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span>&#123; <br>                    <span class="hljs-attribute">color</span>:blue;<br><br>       &#125;<br>&lt;!-- 选择<span class="hljs-selector-tag">div</span>下的<span class="hljs-selector-tag">p</span>标签 --&gt;       <br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)<br>&lt;!--父元素下的第几个子元素--&gt;<br><br>   <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">p</span> &#123; <br>                    <span class="hljs-attribute">color</span>:blue;<br><br>            &#125;<br>&lt;!-- 选择父标签是<span class="hljs-selector-tag">div</span>标签的<span class="hljs-selector-tag">p</span>标签 --&gt;   <br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span><br>&#123;<br><span class="hljs-attribute">background-color</span>:<span class="hljs-number">#ff0000</span>;<br>&#125;<br><span class="hljs-selector-attr">[type]</span><br>&#123;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">5px</span> solid blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述两个样式都能作用于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>一种特殊的类选择符，最大的作用就是对链接<code>&lt;a&gt;</code>的不同状态定义不同的样式效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#339999</span>;text-decration:none;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>&#123;<span class="hljs-attribute">color</span>:<span class="hljs-number">#33cc00</span>;text-decration:none&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-attribute">color</span>:red;text-decration:underline;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;<span class="hljs-attribute">color</span>:blue;text-decration:underline;&#125;<br><br>&lt;!--<br><br>link:初始化状态<br><br>visited:被访问过的状态<br><br>hover:鼠标悬浮的状态<br><br>active:正在访问的状态<br><br>--&gt;<br></code></pre></td></tr></table></figure><p>在支持CSS的浏览器中，链接的不同状态都可以不同的方式显示，这些状态包括：未被访问状态,  已被访问状态，鼠标悬停状态,  活动状态。</p><div class = "note note-warning"> 注意：</div>- a:hover 必须被置于a:link 和a:visited 之后，才是有效的。a:active必须被置于a:hover之后，才是有效的- CSS规定样式的优先级 <span class = "label label-danger">行内样式 > id样式 > 类样式 > 标记样式 </span>- CSS的继承：样式表的继承规则是子标记继承父标记的样式<p>附表</p><table><thead><tr><th align="left">选择器</th><th align="left">例子</th><th align="left">例子描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_class.asp">.<em>class</em></a></td><td align="left">.intro</td><td align="left">选择 class=”intro” 的所有元素。</td></tr><tr><td align="left">.<em>class1</em>.<em>class2</em></td><td align="left">.name1.name2</td><td align="left">选择 class 属性中同时有 name1 和 name2 的所有元素。</td></tr><tr><td align="left">.<em>class1</em> .<em>class2</em></td><td align="left">.name1 .name2</td><td align="left">选择作为类名 name1 元素后代的所有类名 name2 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_id.asp">#<em>id</em></a></td><td align="left">#firstname</td><td align="left">选择 id=”firstname” 的元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_all.asp">*</a></td><td align="left">*</td><td align="left">选择所有元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element.asp"><em>element</em></a></td><td align="left">p</td><td align="left">选择所有 <code>&lt;p&gt; </code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_class.asp"><em>element</em>.<em>class</em></a></td><td align="left">p.intro</td><td align="left">选择 class=”intro” 的所有 <code>&lt;p&gt; </code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_comma.asp"><em>element</em>,<em>element</em></a></td><td align="left">div, p</td><td align="left">选择所有 <code>&lt;div&gt;</code> 元素和所有<code>&lt;p&gt;</code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_element.asp"><em>element</em> <em>element</em></a></td><td align="left">div p</td><td align="left">选择 <code>&lt;div&gt; </code>元素内的所有<code>&lt;p&gt;</code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_gt.asp"><em>element</em>&gt;<em>element</em></a></td><td align="left">div &gt; p</td><td align="left">选择父元素是 <code>&lt;div&gt;</code> 的所有 <code>&lt;p&gt; </code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_element_plus.asp"><em>element</em>+<em>element</em></a></td><td align="left">div + p</td><td align="left">选择紧跟 <code>&lt;div&gt;</code> 元素的首个<code> &lt;p&gt;</code> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_gen_sibling.asp"><em>element1</em>~<em>element2</em></a></td><td align="left">p ~ ul</td><td align="left">选择前面有 <code>&lt;p&gt; </code>元素的每个 <code>&lt;ul&gt; </code>元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute.asp"><em>attribute</em>]</a></td><td align="left">[target]</td><td align="left">选择带有 target 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value.asp"><em>attribute</em>=<em>value</em>]</a></td><td align="left">[target=_blank]</td><td align="left">选择带有 target=”_blank” 属性的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp"><em>attribute</em>~=<em>value</em>]</a></td><td align="left">[title~=flower]</td><td align="left">选择 title 属性包含单词 “flower” 的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_start.asp"><em>attribute</em>|=<em>value</em>]</a></td><td align="left">[lang|=en]</td><td align="left">选择 lang 属性值以 “en” 开头的所有元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_begin.asp"><em>attribute</em>^=<em>value</em>]</a></td><td align="left">a[href^=”https”]</td><td align="left">选择其 src 属性值以 “https” 开头的每个<code> &lt;a&gt;</code> 元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_end.asp"><em>attribute</em>$=<em>value</em>]</a></td><td align="left">a[href$=”.pdf”]</td><td align="left">选择其 src 属性以 “.pdf” 结尾的所有<code>&lt;a&gt;</code>元素。</td></tr><tr><td align="left">[<a href="https://www.w3school.com.cn/cssref/selector_attr_contain.asp"><em>attribute</em>*=<em>value</em>]</a></td><td align="left">a[href*=”w3schools”]</td><td align="left">选择其 href 属性值中包含 “abc” 子串的每个 <code>&lt;a&gt;</code> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_active.asp">:active</a></td><td align="left">a:active</td><td align="left">选择活动链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_after.asp">::after</a></td><td align="left">p::after</td><td align="left">在每个<code> &lt;p&gt;</code> 的内容之后插入内容。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_before.asp">::before</a></td><td align="left">p::before</td><td align="left">在每个<code> &lt;p&gt;</code> 的内容之前插入内容。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_checked.asp">:checked</a></td><td align="left">input:checked</td><td align="left">选择每个被选中的<code>&lt;input&gt;</code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_default.asp">:default</a></td><td align="left">input:default</td><td align="left">选择默认的 <code>&lt;input&gt; </code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_disabled.asp">:disabled</a></td><td align="left">input:disabled</td><td align="left">选择每个被禁用的 <code>&lt;input&gt; </code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_empty.asp">:empty</a></td><td align="left">p:empty</td><td align="left">选择没有子元素的每个 <code>&lt;p&gt;</code> 元素（包括文本节点）。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_enabled.asp">:enabled</a></td><td align="left">input:enabled</td><td align="left">选择每个启用的<code> &lt;input&gt;</code> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-child.asp">:first-child</a></td><td align="left">p:first-child</td><td align="left">选择属于父元素的第一个子元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-letter.asp">::first-letter</a></td><td align="left">p::first-letter</td><td align="left">选择每个 <code>&lt;p&gt; </code>元素的首字母。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-line.asp">::first-line</a></td><td align="left">p::first-line</td><td align="left">选择每个 <code>&lt;p&gt;</code> 元素的首行。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_first-of-type.asp">:first-of-type</a></td><td align="left">p:first-of-type</td><td align="left">选择属于其父元素的首个<code> &lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_focus.asp">:focus</a></td><td align="left">input:focus</td><td align="left">选择获得焦点的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_fullscreen.asp">:fullscreen</a></td><td align="left">:fullscreen</td><td align="left">选择处于全屏模式的元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_hover.asp">:hover</a></td><td align="left">a:hover</td><td align="left">选择鼠标指针位于其上的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_in-range.asp">:in-range</a></td><td align="left">input:in-range</td><td align="left">选择其值在指定范围内的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_indeterminate.asp">:indeterminate</a></td><td align="left">input:indeterminate</td><td align="left">选择处于不确定状态的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_invalid.asp">:invalid</a></td><td align="left">input:invalid</td><td align="left">选择具有无效值的所有 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_lang.asp">:lang(<em>language</em>)</a></td><td align="left">p:lang(it)</td><td align="left">选择 lang 属性等于 “it”（意大利）的每个 <code>&lt;p&gt; </code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-child.asp">:last-child</a></td><td align="left">p:last-child</td><td align="left">选择属于其父元素最后一个子元素每个<code>&lt;p&gt;</code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_last-of-type.asp">:last-of-type</a></td><td align="left">p:last-of-type</td><td align="left">选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个<code> &lt;p&gt;</code> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_link.asp">:link</a></td><td align="left">a:link</td><td align="left">选择所有未访问过的链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_not.asp">:not(<em>selector</em>)</a></td><td align="left">:not(p)</td><td align="left">选择非 <code>&lt;p&gt;</code> 元素的每个元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-child.asp">:nth-child(<em>n</em>)</a></td><td align="left">p:nth-child(2)</td><td align="left">选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt; </code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-child.asp">:nth-last-child(<em>n</em>)</a></td><td align="left">p:nth-last-child(2)</td><td align="left">同上，从最后一个子元素开始计数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-of-type.asp">:nth-of-type(<em>n</em>)</a></td><td align="left">p:nth-of-type(2)</td><td align="left">选择属于其父元素第二个 <code>&lt;p&gt; </code>元素的每个<code> &lt;p&gt;</code> 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_nth-last-of-type.asp">:nth-last-of-type(<em>n</em>)</a></td><td align="left">p:nth-last-of-type(2)</td><td align="left">同上，但是从最后一个子元素开始计数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-of-type.asp">:only-of-type</a></td><td align="left">p:only-of-type</td><td align="left">选择属于其父元素唯一的 <code>&lt;p&gt;</code> 元素的每个<code>&lt;p&gt;</code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_only-child.asp">:only-child</a></td><td align="left">p:only-child</td><td align="left">选择属于其父元素的唯一子元素的每个<code>&lt;p&gt;</code>元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_optional.asp">:optional</a></td><td align="left">input:optional</td><td align="left">选择不带 “required” 属性的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_out-of-range.asp">:out-of-range</a></td><td align="left">input:out-of-range</td><td align="left">选择值超出指定范围的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_placeholder.asp">::placeholder</a></td><td align="left">input::placeholder</td><td align="left">选择已规定 “placeholder” 属性的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-only.asp">:read-only</a></td><td align="left">input:read-only</td><td align="left">选择已规定 “readonly” 属性的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_read-write.asp">:read-write</a></td><td align="left">input:read-write</td><td align="left">选择未规定 “readonly” 属性的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_required.asp">:required</a></td><td align="left">input:required</td><td align="left">选择已规定 “required” 属性的 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_root.asp">:root</a></td><td align="left">:root</td><td align="left">选择文档的根元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_selection.asp">::selection</a></td><td align="left">::selection</td><td align="left">选择用户已选取的元素部分。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_target.asp">:target</a></td><td align="left">#news:target</td><td align="left">选择当前活动的 #news 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_valid.asp">:valid</a></td><td align="left">input:valid</td><td align="left">选择带有有效值的所有 input 元素。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/cssref/selector_visited.asp">:visited</a></td><td align="left">a:visited</td><td align="left">选择所有已访问的链接。</td></tr></tbody></table><h2 id="6-属性"><a href="#6-属性" class="headerlink" title="6. 属性"></a>6. 属性</h2><h3 id="6-1-字体"><a href="#6-1-字体" class="headerlink" title="6.1 字体"></a>6.1 字体</h3><table><thead><tr><th>属性</th><th>作用</th><th>属性值</th></tr></thead><tbody><tr><td>font-size</td><td>字体大小</td><td>40px|2.5em   （px/16=em）</td></tr><tr><td>color</td><td>文本颜色</td><td>#FFCCFF</td></tr><tr><td>text-align</td><td>对其方式</td><td>center | left | right | justify</td></tr><tr><td>line-height</td><td>行高</td><td>px</td></tr><tr><td>font-style</td><td>字体样式 正常|斜体</td><td>normal|italic</td></tr><tr><td>font-weight</td><td>指定字体的粗细</td><td>px</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--关于字体下划线等--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">text-decoration</span>: overline&#125;</span><br><span class="css"><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">text-decoration</span>: line-through&#125;</span><br><span class="css"><span class="hljs-selector-tag">h3</span> &#123;<span class="hljs-attribute">text-decoration</span>: underline&#125;</span><br><span class="css"><span class="hljs-selector-tag">h4</span> &#123;<span class="hljs-attribute">text-decoration</span>:blink&#125;</span><br><span class="css"><span class="hljs-selector-tag">a</span> &#123;<span class="hljs-attribute">text-decoration</span>: none&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是标题 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是标题 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是标题 3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是标题 4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.w3school.com.cn/index.html&quot;</span>&gt;</span>这是一个链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.mercuryblog.site/img/image-20220427205032344.png" alt="image-20220427205032344"></p><h3 id="6-2-边框"><a href="#6-2-边框" class="headerlink" title="6.2 边框"></a>6.2 边框</h3><table><thead><tr><th>属性</th><th>作用</th><th>属性值</th></tr></thead><tbody><tr><td>border</td><td>设置边框粗细 、实虚线 、颜色</td><td>1px  solid | dashed   red</td></tr></tbody></table><h3 id="6-3-背景"><a href="#6-3-背景" class="headerlink" title="6.3  背景"></a>6.3  背景</h3><table><thead><tr><th>属性</th><th>作用</th><th>属性值</th></tr></thead><tbody><tr><td>background</td><td>控制背景图片、不重复、居中</td><td>url(“….”)     no-repeat     center</td></tr></tbody></table><h3 id="6-4-尺寸"><a href="#6-4-尺寸" class="headerlink" title="6.4  尺寸"></a>6.4  尺寸</h3><table><thead><tr><th>属性</th><th>属性值</th></tr></thead><tbody><tr><td>width</td><td>..px</td></tr><tr><td>height</td><td>..px</td></tr></tbody></table><h2 id="7-布局"><a href="#7-布局" class="headerlink" title="7. 布局"></a>7. 布局</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul><li><p>inline：此元素将显示为行内元素（行内元素默认的 display属性值）</p></li><li><p>block：此元素将显示为块元素（块元素默认的 display属性值）。</p></li><li><p>inline- block：此元素将显示为行内块元素，可以对其设置宽度、高度和对齐等属性，但是该元素不会独占一行。</p></li><li><p>none：此元素将被隐藏，不显示，也不占用页面空间，相当于该元素不存在。</p></li></ul><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><h4 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位 static"></a>静态定位 static</h4><ol><li>静态定位是元素默认的定位方式，是各个元素在HTML文档流中默认的位置。</li><li>块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。</li><li>在静态定位方式中，无法通过位置偏移属性（top、bottom、left或right）来改变元素的位置</li></ol><h4 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位 relative"></a>相对定位 relative</h4><ol><li>相对定位是普通文档流的一部分，相当于本元素在文档流原来出现位置的左上角进行定位。</li><li>可以通过位置偏移属性（top、bottom、left或right）来改变元素的位置。</li><li>虽然其移动到其他位置，但该元素仍占据原来未移动时的位置，该元素移动后会导致其覆盖其他的框元素。</li></ol><h4 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位 absolute"></a>绝对定位 <strong>absolute</strong></h4><ol><li>绝对定位是脱离文档流的，不占据其原来未移动时的位置,是相对于父级元素或更高的祖先级中有relative（相对）定位,并且离本元素层级关系上最近元素的左上角进行定位,如果在祖先元素中没有relative定位的，就默认相对于body进行定位。</li><li>使用绝对定位的时候，一般要给出上一个相对定位的元素作为参考点。</li></ol><h4 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 fixed"></a>固定定位 fixed</h4><ol><li>当元素被设置为固定定位的时候，该元素将脱离标准文档流的控制，始终依据浏览器窗口的左上角位置来定义自己的显示位置。</li></ol><div class = "note note-info">总结：</div>   <table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td><strong>absolute</strong></td><td>生成绝对定位的元素，相对于  static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”,  “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td><strong>fixed</strong></td><td>生成固定定位的元素，相对于浏览器窗口左上角进行定位。元素的位置通过  “left”, “top”, “right” 以及 “bottom”  属性进行规定。</td></tr><tr><td><strong>relative</strong></td><td>生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20”  会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td><strong>static</strong></td><td>默认值。没有定位，元素出现在正常的流中（忽略  top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td><strong>inherit</strong></td><td>规定应该从父元素继承  position 属性的值。</td></tr></tbody></table><h3 id="z-index-层叠次序"><a href="#z-index-层叠次序" class="headerlink" title="z-index(层叠次序)"></a>z-index(层叠次序)</h3><p><strong>z 轴</strong>定义为<strong>垂直</strong>延伸到显示区(垂直于你的显示器)的<strong>轴</strong>。如果为<strong>正数</strong>，则离用户更<strong>近</strong>，为<strong>负数</strong>则表示离用户更<strong>远</strong></p><ul><li><p>元素可拥有负的z-index 属性值</p></li><li><p>z-index 仅能在绝对定位元素（例如 position:absolute;）上起作用</p></li></ul><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>所谓的float就是CSS浮动，需要注意的是浮动脱离<strong>文档流</strong>，并且可以<strong>左</strong>浮动、<strong>右</strong>浮动</p><ul><li><p>元素左浮动后，则元素将会脱离文档流，直到其左边缘碰到包含框的左边缘。</p></li><li><p>三个框都左浮动，那么第一个框其左边缘碰到包含框的左边缘，另外两个框左浮动直到碰到前一个浮动框的右边框。</p></li><li><p>如果包含框太窄，无法容纳水平排列，则会向下进行浮动。</p></li></ul><div class = "note note-info">说明：</div>   <p>以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td><strong>left</strong></td><td>元素向左浮动。</td></tr><tr><td><strong>right</strong></td><td>元素向右浮动。</td></tr><tr><td><strong>none</strong></td><td>默认值。元素不浮动，并会显示在其在文本中出现的位置。</td></tr><tr><td><strong>inherit</strong></td><td>规定应该从父元素继承  float属性的值。</td></tr></tbody></table><div class = "note note-warning">注意：</div>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。clear 属性指定元素两侧不能出现浮动元素。使用 clear 属性往文本中添加图片廊<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text_line</span><br>&#123;<br>    <span class="hljs-attribute">clear</span>:both;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS溢出"><a href="#CSS溢出" class="headerlink" title="CSS溢出"></a>CSS溢出</h3><p>在盒子模型中的代表块元素的矩形对象，可以通过CSS样式来定义内容区域的高度与宽度，当这个内容无法容纳子矩形对象时，对于这些子矩形对象必须决定怎么显示，显示什么，这样的处理规则就称为溢出处理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>：visible｜hidden｜scroll｜<span class="hljs-attribute">auto</span><br></code></pre></td></tr></table></figure><h3 id="visibility属性"><a href="#visibility属性" class="headerlink" title="visibility属性"></a>visibility属性</h3><p>在CSS中可以使用 <strong>visibility</strong>（可见性）来设置对象是否<strong>可见</strong>，该属性的语法格式如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">visibility</span>: visible | hidden<br></code></pre></td></tr></table></figure><p>visibility属性设置隐藏，但隐藏后其原来位置仍然被占用。注意与display:none的区别</p><p>　　</p><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>元素的边框（border）是围绕元素内容和内边距的一条或多条线。CSS中使用border属性设置元素边框的样式、宽度和颜色。</p><p>边框线定义方式如下：</p><p>border: 宽度、样式，颜色;</p><p>border-width，border-color</p><p>border-top….</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML</title>
    <link href="/2021/09/17/HTML/"/>
    <url>/2021/09/17/HTML/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">    <p>更新日志:<p>    <ul>       <p>2021.9.17：根据狂神说的视频整理出该笔记</p>      <p>2022.4.18：由于学校前端选修课要考试了，根据沈大佬的笔记以及教学PPT做了一些修订和补充</p>    </ul></div><p class = "note note-info">关于前端的学习，这里推荐<a herf = "https://developer.mozilla.org/zh-CN/docs/Web">mdn文档 </a></p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1-初识html"><a href="#1-初识html" class="headerlink" title="1. 初识html"></a>1. 初识html</h2><p>全称是Hyper Text Market Language（超文本标记语言) , 而超文本指的是流媒体、图片、声音、视频等等.</p><h3 id="1-1-特殊符号的表达"><a href="#1-1-特殊符号的表达" class="headerlink" title="1.1 特殊符号的表达"></a>1.1 特殊符号的表达</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!--  特殊符号的样式  &amp;   ; --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>                           <span class="hljs-comment">&lt;!--换行--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>i love you <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>     <span class="hljs-comment">&lt;!--粗体--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>i love you<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>              <span class="hljs-comment">&lt;!--斜体--&gt;</span><br><span class="hljs-symbol">&amp;nbsp;</span>                          <span class="hljs-comment">&lt;!--空格--&gt;</span><br><span class="hljs-symbol">&amp;gt;</span>                            <span class="hljs-comment">&lt;!--大于&gt;--&gt;</span><br><span class="hljs-symbol">&amp;lt;</span>                            <span class="hljs-comment">&lt;!--小于&lt;--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-行级元素和块级元素"><a href="#1-2-行级元素和块级元素" class="headerlink" title="1.2 行级元素和块级元素"></a>1.2 行级元素和块级元素</h3><table><thead><tr><th>类型</th><th>效果</th><th>例子</th></tr></thead><tbody><tr><td>块级元素(block)</td><td>独占一行</td><td>div h p ul teble</td></tr><tr><td>行级元素(inline)</td><td>只占据内容的大小</td><td>span td a img</td></tr></tbody></table><p><span class = "label label-success" >示例</span></p><div style="background-color: #FFCCFF">HTML</div><p><span style="background-color: #FFCCFF">HTML</span></p><p>一个行内元素通常会和其前后的其他行内元素显示在同一行中，不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构.一般不可以设置高度、对齐等属性，常用于控制页面中文本的样式</p><h3 id="1-3-关于图片，视频和音频"><a href="#1-3-关于图片，视频和音频" class="headerlink" title="1.3 关于图片，视频和音频"></a>1.3 关于图片，视频和音频</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--img </span><br><span class="hljs-comment">src : 图片地址  相对地址 绝对地址 或者 图片的链接</span><br><span class="hljs-comment">alt : 图片的名字</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../resources/imge/1.jpg&quot;</span> <span class="hljs-attr">alt</span> = <span class="hljs-string">&quot;chen&quot;</span> <span class="hljs-attr">title</span> = <span class="hljs-string">&quot;悬停文字&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;100&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;https://s2.loli.net/2022/04/13/qzsEFCRXW89Vc7I.jpg&quot;</span> <span class="hljs-attr">alt</span> = <span class="hljs-string">&quot;chen&quot;</span> <span class="hljs-attr">title</span> = <span class="hljs-string">&quot;悬停文字&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;250&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--视频和音频--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../resources/video/chen.mp4&quot;</span> &gt;</span>                    <span class="hljs-comment">&lt;!--同理这里也可以放链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../resources/video/chen.mp4&quot;</span>  <span class="hljs-attr">controls</span>&gt;</span>           <span class="hljs-comment">&lt;!--加上进度条--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../resources/video/chen.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span>   <span class="hljs-comment">&lt;!--自动播放--&gt;</span><br><br></code></pre></td></tr></table></figure><p><span class = "label label-success" >示例</span></p><center><img src = "https://s2.loli.net/2022/04/13/qzsEFCRXW89Vc7I.jpg" alt = "chen" title = "悬停文字" width = "200" height = "250"></center><h3 id="1-4-超链接"><a href="#1-4-超链接" class="headerlink" title="1.4 超链接"></a>1.4 超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--a标签</span><br><span class="hljs-comment">href : 必填，表示要跳转到的那个页面</span><br><span class="hljs-comment">target ：表示窗口在哪里打开</span><br><span class="hljs-comment">          _blank : 在新标签打开</span><br><span class="hljs-comment">          _self: 在此窗口打开             </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;https://space.bilibili.com/399488488&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success" >示例</span></p><p> <a href = "https://space.bilibili.com/399488488" target = "_blank">点我</a></p><h3 id="1-5-锚链接"><a href="#1-5-锚链接" class="headerlink" title="1.5 锚链接"></a>1.5 锚链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--锚链接</span><br><span class="hljs-comment">1. 需要一个锚标记</span><br><span class="hljs-comment">2. 跳转到标记</span><br><span class="hljs-comment"> #</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;#&quot;</span> &gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><span class = "label label-success" >示例</span></p><p><a href = "#" >回到顶部</a></p><h3 id="1-6-功能性链接"><a href="#1-6-功能性链接" class="headerlink" title="1.6 功能性链接"></a>1.6 功能性链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:chenning_william@163.com&quot;</span>&gt;</span>点击联系我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span> 此为分割线<br></code></pre></td></tr></table></figure><p><span class = "label label-success" >示例</span></p><p><a href="mailto:chenning_william@163.com">点击联系我</a></p> <hr/> 此为分割线<h3 id="1-7-列表"><a href="#1-7-列表" class="headerlink" title="1.7 列表"></a>1.7 列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--有序列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>c/c++<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>运维<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--无序列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>c/c++<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>运维<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--自定义列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>学科<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>c/c++<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>位置<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>成都<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">效果展示</span></p><!--有序列表--><ol>   <li>java</li>   <li>python</li>   <li>c/c++</li>   <li>运维</li></ol><!--无序列表--><ul>   <li>java</li>   <li>python</li>   <li>c/c++</li>   <li>运维</li></ul><!--自定义列表--><dl>   <dt>学科</dt>      <dd>c/c++</dd>      <dd>java</dd>   <dt>位置</dt>      <dd>成都</dd>      <dd>西安</dd></dl><h3 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>表格标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">效果展示</span></p><table>    <caption>表格标题</caption>    <tr>      <td>1-1</td>      <td>1-2</td>      <td>1-3</td>      <td>1-4</td>    </tr>    <tr>      <td>2-1</td>      <td>2-2</td>      <td>2-3</td>      <td>2-4</td>    </tr>    <tr>      <td>3-1</td>      <td>3-2</td>      <td>3-3</td>      <td>3-4</td>    </tr></table><p class = "note note-success">colspan  跨列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1px&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--添加边线--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;4&quot;</span>&gt;</span> 1-1 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-comment">&lt;!--跨四列--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table >     <tbody border = "1px"> <!--添加边线-->        <tr>          <td colspan = "4"> 1-1 </td>  <!--跨四列-->        </tr>        <tr>          <td>2-1</td>          <td>2-2</td>          <td>2-3</td>          <td>2-4</td>        </tr>        <tr>          <td>3-1</td>          <td>3-2</td>          <td>3-3</td>          <td>3-4</td>        </tr>    </tbody></table><p class = "note note-success">rowspan 跨行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">border</span> = <span class="hljs-string">&quot;1px&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--添加边线--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;4&quot;</span>&gt;</span> 1-1 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-comment">&lt;!--跨四列--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--rowspan 跨行--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span> = <span class="hljs-string">&quot;2&quot;</span>&gt;</span> 2-1 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <span class="hljs-comment">&lt;!--跨两行--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><table>     <tbody border = "1px"><!--添加边线-->        <tr>          <td colspan = "4"> 1-1 </td>  <!--跨四列-->        </tr>        <tr>         <!--rowspan 跨行-->          <td rowspan = "2"> 2-1 </td>  <!--跨两行-->          <td>2-2</td>          <td>2-3</td>          <td>2-4</td>        </tr>        <tr>          <td>3-2</td>          <td>3-3</td>          <td>3-4</td>        </tr>    </tbody></table><h2 id="2-页面结构分析"><a href="#2-页面结构分析" class="headerlink" title="2. 页面结构分析"></a>2. 页面结构分析</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span> = <span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span> = <span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>页面结构分析<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>网页头部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>网页主体<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>网页脚部<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="head部分"><a href="#head部分" class="headerlink" title="head部分"></a>head部分</h3><p>HTML文档的头部标记主要包含页面标题标记、元信息标记、样式标记、脚本标记、链接标记等。头部标记所包含的信息一般不会显示在网页上</p><h4 id="页面标题title"><a href="#页面标题title" class="headerlink" title="页面标题title"></a>页面标题title</h4><p> title标题信息显示在浏览器的标题栏上</p><h4 id="元信息meta"><a href="#元信息meta" class="headerlink" title="元信息meta"></a>元信息meta</h4><p>META标记用来描述一个HTML网页文档的属性，也称为元信息（meta-information），这些信息并不会显示在浏览器的页面中。例如作者、日期和时间、网页描述、关键词、页面刷新等。<code>&lt;meta&gt;</code>标记位于文档的头部，其属性定义了与文档相关联的“名称/值”对。</p><p class = "note note-success">name属性与content属性<p>    <p>name属性用于描述网页，它是以“名称/值”形式的名称，name属性的值所描述的内容(值)通过content属性表示，便于搜索引擎机器人查找、分类。其中最重要的是description、keywords和robots。</p><p class = "note note-success">http-equiv属性与content属性<p>    <p>​    http-equiv属性用于提供HTTP协议的响应头报文(MIME文档头)，它是以“名称/值”形式的名称，http-equiv属性的值所描述的内容(值)通过content属性表示，通常为网页加载前提供给浏览器等设备使用。其中最重要的是content-type charset提供编码信息，refresh刷新与跳转页面，no-cache页面缓存，expires网页缓存过期时间。</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th>描述</th></tr></thead><tbody><tr><td align="left">content</td><td align="left">some_text</td><td>定义与http-equiv或name属性相关的元信息</td></tr><tr><td align="left">http-equiv</td><td align="left">content-type   expires refresh   set-cookie</td><td>把content属性关联到HTTP头部。内容类型网页缓存过期时间刷新与跳转(重定向)页面  如果网页过期，那么存盘的cookie将被删除</td></tr><tr><td align="left">name</td><td align="left">author  description  keywords generator</td><td>把content属性关联到一个名称。定义网页作者  定义网页简短描述  定义网页关键词 定义编辑器</td></tr><tr><td align="left">scheme</td><td align="left">some_text</td><td>定义用于翻译content属性值的格式。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=信息参数&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;generator&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;信息参数&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;时间； url=网址参数&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">contect</span>=<span class="hljs-string">&quot;信息参数&quot;</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="body部分"><a href="#body部分" class="headerlink" title="body部分"></a>body部分</h3><table><thead><tr><th>元素名</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>标题头部区域的内容(用于页面或页面中的一块区域)</td></tr><tr><td>footer</td><td>标题脚部区域的内容(用于整个页面或页面中的一块区域)</td></tr><tr><td>section</td><td>Web页面中的一块独立区域</td></tr><tr><td>article</td><td>独立的文章内容</td></tr><tr><td>aside</td><td>相关内容或应用(常用于侧边栏)</td></tr><tr><td>nav</td><td>导航类辅助内容</td></tr></tbody></table><p class = "note note-info">在网页设计中，HTML提供了4种颜色设置方法：<p> <ul><li>使用RGB（R，G，B），其中R、G、B是整数，取值范围：0～255；</li><li>使用RGB（R%，G%，B%），其中R、G、B是整数，取值范围：0～100；</li><li>使用3位或6位十六进制数#RGB或#RRGGBB，R、G、B为十六进制数，取值范围：0～9、A～F，每一种颜色用2位十六进制数表示，RR：红色部分，GG：绿色部分，BB：蓝色部分。红色为#FF0000；#RGB可以转换为#RRGGBB 。例如红色 分别 表示为#F00、#FF0000。</li><li>使用颜色英文名称，如red表示红色，green表示绿色，blue表示蓝色等。</li></ul><h2 id="3-内联框架"><a href="#3-内联框架" class="headerlink" title="3. 内联框架"></a>3. 内联框架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">src : 引用页面的地址</span><br><span class="hljs-comment">name : 框架标识名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;mainFrame&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="嵌套网页"><a href="#嵌套网页" class="headerlink" title="嵌套网页"></a>嵌套网页</h3><iframe src="https://52hzmercury.github.io/" width="100%" height="500" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--示例嵌套网页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://52hzmercury.github.io/&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span>  <span class="hljs-attr">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p class = "note note-warning">参数说明</p<p><code>width=&quot;100%&quot;</code> 为宽度自适应，高度请根据实际需求跳转， <code>scrolling</code> 为滚动条参数。<code>frameborder</code> 为边框参数。<code>noresize</code> 属性规定用户无法调整框架的大小。</p><h3 id="嵌套B站视频"><a href="#嵌套B站视频" class="headerlink" title="嵌套B站视频"></a>嵌套B站视频</h3><iframe src="//player.bilibili.com/player.html?aid=972845916&bvid=BV1cp4y147ex&cid=329159472&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//player.bilibili.com/player.html?aid=375588815&amp;bvid=BV1so4y1m7U5&amp;cid=339262048&amp;page=1&amp;high_quality=1&amp;danmaku=0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;allowfullscreen&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">sandbox</span>=<span class="hljs-string">&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p class = "note note-warning">参数说明</p><p> BILIBILI 地址PC端参数</p><ul><li><p>&amp;high_quality=1   (1=最高画质 0=最低画质)</p></li><li><p>&amp;danmaku=0   (1=打开弹幕 0=关闭弹幕)</p></li></ul><p>iframe 参数</p><ul><li>allowfullscreen=”allowfullscreen” 移动端全屏</li><li>sandbox=”allow-top-navigation allow-same-origin allow-forms allow-scripts” 禁止弹出网页</li></ul><h2 id="4-表单"><a href="#4-表单" class="headerlink" title="4. 表单"></a>4. 表单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--表单from</span><br><span class="hljs-comment">action : 表单提交的位置，可以是网站，也可以是一个请求处理额地址</span><br><span class="hljs-comment">method : post ,get的提交方式</span><br><span class="hljs-comment">post: 速度较慢，但url上不会显示提交的数据，相对较安全</span><br><span class="hljs-comment">get: 速度较快，但url上会显示提交的数据，不太安全  </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;chenkong.html&quot;</span> <span class="hljs-attr">method</span> = <span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--文本输入框 : input type = &quot;text&quot;--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>名字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>   <br>   <span class="hljs-comment">&lt;!--密码输入框 : input type = &quot;password&quot;--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;pwd&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">  <p>名字：<input type = "text" name = "username"></p>    <p> 密码：<input type = "password" name = "pwd" ></p>  <p>     <input type = "submit">     <input type = "reset">  </p></form><h3 id="4-1-表单元素的格式"><a href="#4-1-表单元素的格式" class="headerlink" title="4.1 表单元素的格式"></a>4.1 表单元素的格式</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>指定元素的类型。text、password、checkbox、radio、submit、reset、file、hidden、ingage和button，默认为text</td></tr><tr><td>name</td><td>指定表单元素的名称</td></tr><tr><td>value</td><td>元素的初始值。type为radio时必须指定一个值</td></tr><tr><td>size</td><td>指定表单元素的宽度，当type为text或password时，表单元素的大小易字符为单位。对于其他类型，宽度以像素为单位</td></tr><tr><td>maxlength</td><td>type为text或password时，输入的最大字符数</td></tr><tr><td>checked</td><td>type为radio或checkbox时，指定按钮是否被选中</td></tr></tbody></table><h3 id="4-2-radio-单选器"><a href="#4-2-radio-单选器" class="headerlink" title="4.2 radio 单选器"></a>4.2 radio 单选器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--文本输入框:input type = &quot;text&quot;</span><br><span class="hljs-comment">value = &quot;陈William牛逼&quot; 默认初始值</span><br><span class="hljs-comment">maxlength = &quot;8&quot;  最长能写几个字符</span><br><span class="hljs-comment">size = &quot;30&quot;     文本框的长度</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;chenkong.html&quot;</span> <span class="hljs-attr">method</span> = <span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>名字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;pwd&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--radio 单选器</span><br><span class="hljs-comment">input type = &quot;radio&quot;</span><br><span class="hljs-comment">value  单选框的值</span><br><span class="hljs-comment">name  表示组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>  = <span class="hljs-string">&quot;boy&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;sex&quot;</span>&gt;</span> 男<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>  = <span class="hljs-string">&quot;girl&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;sex&quot;</span>&gt;</span> 女<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--这里的name属性必须要一样，表示他们是一个组的，这样就只能选一个了--&gt;</span><br>    <br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">  <p>名字：<input type = "text" name = "username"></p>    <p> 密码：<input type = "password" name = "pwd" ></p>  <span>     <input type = "radio" value  = "boy" name = "sex"> 男  </span>  <span>     <input type = "radio" value  = "girl" name = "sex"> 女    </span>  <p>     <input type = "submit">     <input type = "reset">  </p> </form><h3 id="4-3-多选框"><a href="#4-3-多选框" class="headerlink" title="4.3 多选框"></a>4.3 多选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;sleep&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">hobby</span>&gt;</span>睡觉<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">hobby</span>&gt;</span>敲代码<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;chat&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">hobby</span>&gt;</span>聊天<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;game&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">hobby</span>&gt;</span>游戏<br>   <br><span class="hljs-comment">&lt;!--这也是在from表单里的--&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">   <input type = "checkbox" value = "sleep" name = hobby>睡觉    <input type = "checkbox" value = "code" name = hobby>敲代码    <input type = "checkbox" value = "chat" name = hobby>聊天    <input type = "checkbox" value = "game" name = hobby>游戏 </form><h3 id="4-4-关于按钮"><a href="#4-4-关于按钮" class="headerlink" title="4.4 关于按钮"></a>4.4 关于按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">input type = &quot;buttion&quot;  普通的按钮</span><br><span class="hljs-comment">input  type = &quot;image&quot;  图像按钮   点击会提交 相当于submit</span><br><span class="hljs-comment">input  type = &quot;submit&quot;  提交按钮</span><br><span class="hljs-comment">input  type = &quot;reset&quot;  重置按钮</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;chenkong.html&quot;</span> <span class="hljs-attr">method</span> = <span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;https://s2.loli.net/2022/04/13/qzsEFCRXW89Vc7I.jpg&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">height</span> = <span class="hljs-string">&quot;70&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;buttion&quot;</span>  &gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>          <input type = "image" src = "https://s2.loli.net/2022/04/13/qzsEFCRXW89Vc7I.jpg" width = "50" height = "70">    </p>    <p>          <input type = "buttion"  >    </p>    <p>          <input  type = "submit">   </p>  <p>          <input type = "checkbox">   </p>   <p>          <input  type = "reset">   </p> </form><p class = "note note-warning">注意：</p><p>上图中在后面加上check后就是默认选中，图片的是可以提交的</p><h3 id="4-5-下拉框"><a href="#4-5-下拉框" class="headerlink" title="4.5 下拉框"></a>4.5 下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;列表名称&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;选项的值&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;选项的值&quot;</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;选项的值&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>瑞士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <span class="hljs-comment">&lt;!--加上selected就是下拉框的默认选项值--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;选项的值&quot;</span>&gt;</span>印度<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <select name = "列表名称">       <option value = "选项的值">中国</option>       <option value = "选项的值">美国</option>       <option value = "选项的值" selected>瑞士</option>  <!--加上selected就是下拉框的默认选项值-->       <option value = "选项的值">印度</option>    </select> </form><h3 id="4-6-文本域"><a href="#4-6-文本域" class="headerlink" title="4.6 文本域"></a>4.6 文本域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">cols</span> = <span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">rows</span> = <span class="hljs-string">&quot;10&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>     <br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>        <textarea name = "textarea" cols = "50" rows = "10"> </textarea>         </p> </form><h3 id="4-7-文件域"><a href="#4-7-文件域" class="headerlink" title="4.7 文件域"></a>4.7 文件域</h3><p class = "note note-danger">input必须要有name属性，不然上传不了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;files&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;上传&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;upload&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>       <input type = "file" name = "files">       <input type = "button" value = "上传" name = "upload">     </p> </form><h3 id="4-8-简单的邮件地址和url验证验证"><a href="#4-8-简单的邮件地址和url验证验证" class="headerlink" title="4.8 简单的邮件地址和url验证验证"></a>4.8 简单的邮件地址和url验证验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;chenkong.html&quot;</span> <span class="hljs-attr">method</span> = <span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>      email: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>       url: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;url&quot;</span>  <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;url&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>      email: <input type = "email" name = "email">    </p>     <p>       url: &nbsp&nbsp&nbsp&nbsp&nbsp<input type = "url"  name = "url">     </p></form><h3 id="4-9-数字验证"><a href="#4-9-数字验证" class="headerlink" title="4.9 数字验证"></a>4.9 数字验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;num&quot;</span> <span class="hljs-attr">max</span> = <span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">min</span> = <span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">step</span> = <span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>       number:<input type = "number" name = "num" max = "100" min = "0" step = "1">    </p></form><h3 id="4-10-滑块"><a href="#4-10-滑块" class="headerlink" title="4.10 滑块"></a>4.10 滑块</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;vocie&quot;</span> <span class="hljs-attr">min</span> = <span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">MAX</span> = <span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">step</span> = <span class="hljs-string">&quot;2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>音量：       <input type = "range" name = "vocie" min = "0" MAX = "100" step = "2">    </p></form><h3 id="4-11-搜索框"><a href="#4-11-搜索框" class="headerlink" title="4.11 搜索框"></a>4.11 搜索框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;search&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>搜索：       <input type = "search" name = "search">    </p></form><h3 id="4-12-只读标签"><a href="#4-12-只读标签" class="headerlink" title="4.12 只读标签"></a>4.12 只读标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>名字：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><p>名字：<input type = "text" name = "username" value = "admin" readonly></p><h3 id="4-13-禁用标签"><a href="#4-13-禁用标签" class="headerlink" title="4.13 禁用标签"></a>4.13 禁用标签</h3><p>加上 checked disabled</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;boy&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span> <span class="hljs-attr">disabled</span>/&gt;</span>男   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;girl&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>女   <br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><p>  <input type = "radio" value = "boy" name = "sex" checked disabled/>男     <input type = "radio" value = "girl" name = "sex"/>女   </p><h3 id="4-14-隐藏域"><a href="#4-14-隐藏域" class="headerlink" title="4.14 隐藏域"></a>4.14 隐藏域</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">hidden</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><p>密码<input type = "password" name = "pwd" hidden ></p><p>在隐藏域中设置默认值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">hidden</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;123456&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-15-增强鼠标"><a href="#4-15-增强鼠标" class="headerlink" title="4.15 增强鼠标"></a>4.15 增强鼠标</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span> = <span class="hljs-string">&quot;mark&quot;</span>&gt;</span>point<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;mark&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点一下point，就可以到文本框中，增强鼠标的可用性</p><p><span class = "label label-success">示例</span></p><form action = "chenkong.html" method = "get">    <p>        <label for = "mark">point</label>    </p>    <p>        <input type = "text" id = "mark">    </p></form><h3 id="4-16-表单的初级验证"><a href="#4-16-表单的初级验证" class="headerlink" title="4.16 表单的初级验证"></a>4.16 表单的初级验证</h3><p class = "note note-info">常用方式</p><ul><li>placeholder</li><li>required</li><li>pattern</li></ul><p><span class = "label label-success"><strong>placeholder</strong></span></p><p>加上后会在框中有提示信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span> = <span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><p> name: <input type = "text" name = "username" placeholder = "请输入用户名"></p><p><span class = "label label-info"><strong>required</strong></span></p><p>使用户不能提交空，加上required</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span> = <span class="hljs-string">&quot;请输入用户名&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-warning"><strong>pattern</strong></span></p><p>在pattern里面放入正则表达式判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;diyemail&quot;</span> <span class="hljs-attr">pattern</span> = <span class="hljs-string">&quot;/^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]&#123;2,4&#125;)$/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述正则的意思是：以数字字母开头中间可以是多个数字字符下划线或 ‘ - ’，然后是字符 ‘@’ ，后面是数字字符，最后是字符 ‘ . ’ 加上2-4个字母结尾。</p><h2 id="5-文本处理"><a href="#5-文本处理" class="headerlink" title="5. 文本处理"></a>5. 文本处理</h2><h3 id="5-1-标题字标记"><a href="#5-1-标题字标记" class="headerlink" title="5.1 标题字标记"></a>5.1 标题字标记</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--使用h1-h6和align控制--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>  &gt;</span>Web前端开发技术<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>  &gt;</span>Web前端开发技术<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>  &gt;</span>Web前端开发技术<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>  &gt;</span>Web前端开发技术<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;justify&quot;</span>  &gt;</span>Web前端开发技术<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>   <span class="hljs-comment">&lt;!--均等对齐。有些浏览器不支持--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>  &gt;</span>Web前端开发技术<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p>  <h6 align="center"  >Web前端开发技术</h6>  <h6 align="left"  >Web前端开发技术</h6>  <h6 align="center"  >Web前端开发技术</h6>  <h6 align="right"  >Web前端开发技术</h6>  <h6 align="justify"  >Web前端开发技术</h6>  <h6 align="center"  >Web前端开发技术</h6><h3 id="5-2-特殊符号"><a href="#5-2-特殊符号" class="headerlink" title="5.2 特殊符号"></a>5.2 特殊符号</h3><table><thead><tr><th>显示结果</th><th>说明</th><th>Entity  Name</th></tr></thead><tbody><tr><td></td><td>显示一个空格</td><td><code>&amp;nbsp;</code></td></tr><tr><td>&lt;</td><td>小于</td><td><code>&amp;lt; </code></td></tr><tr><td>&gt;</td><td>大于</td><td><code>&amp;gt; </code></td></tr><tr><td>&amp;</td><td>&amp;符号</td><td><code>&amp;amp; </code></td></tr><tr><td>“</td><td>双引号</td><td><code>&amp;quot;</code></td></tr><tr><td>©</td><td>版权</td><td><code>&amp;copy;</code></td></tr><tr><td>®</td><td>注册商标</td><td><code>&amp;reg; </code></td></tr><tr><td>×</td><td>乘号</td><td><code>&amp;times; </code></td></tr><tr><td>÷</td><td>除号</td><td><code>&amp;divide; </code></td></tr></tbody></table><h3 id="5-3-物理样式标记"><a href="#5-3-物理样式标记" class="headerlink" title="5.3 物理样式标记"></a>5.3 物理样式标记</h3><table><thead><tr><th>标记</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;b&gt;软件工程专业！&lt;/b&gt;</code></td><td>黑体</td></tr><tr><td><code>&lt;i&gt;软件工程专业！&lt;/i&gt; </code></td><td>斜体</td></tr><tr><td><code> &lt;u&gt;软件工程专业！&lt;/u&gt;</code></td><td>下划线</td></tr><tr><td><code>&lt;del&gt;软件工程专业！&lt;/del&gt;</code></td><td>删除线</td></tr><tr><td><code>&lt;small&gt;软件工程专业！&lt;/samll&gt;</code></td><td>变小字号</td></tr><tr><td><code>&lt;big&gt;软件工程专业！&lt;/big&gt;</code></td><td>变大字号</td></tr><tr><td><code>&lt;sup&gt;软件工程专业！&lt;/sup&gt;   </code></td><td>上标</td></tr><tr><td><code>&lt;sub&gt;软件工程专业！&lt;/sub&gt;   </code></td><td>下标</td></tr><tr><td><code>&lt;tt&gt;软件工程专业！&lt;/tt&gt; </code></td><td>打字机字体</td></tr></tbody></table><h3 id="5-4-换行"><a href="#5-4-换行" class="headerlink" title="5.4 换行"></a>5.4 换行</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> 换行<br><span class="hljs-tag">&lt;<span class="hljs-name">nobr</span>&gt;</span> 不换行 <span class="hljs-tag">&lt;/<span class="hljs-name">nobr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wbr</span>&gt;</span>  强制换行 <span class="hljs-tag">&lt;/<span class="hljs-name">wbr</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-段落缩进"><a href="#5-5-段落缩进" class="headerlink" title="5.5 段落缩进"></a>5.5 段落缩进</h3><p>一对blockquote标记能够向右缩进5个西方字符的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>段落缩进标记的应用<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span><br>没有缩进的文字内容<br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>缩进的文字内容<span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>缩进的文字内容<span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p> <h5 align="center">段落缩进标记的应用</h5> <hr color="green"> 没有缩进的文字内容 <blockquote>缩进的文字内容</blockquote>    <blockquote><blockquote>缩进的文字内容</blockquote></blockquote><h3 id="5-6-预格式化标记"><a href="#5-6-预格式化标记" class="headerlink" title="5.6 预格式化标记"></a>5.6 预格式化标记</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs <pre></pre>```标记对网页中的文字段落进行预格式化，浏览器会完整保留设计者在源文件中所定义的格式，包括各种空格、缩进以及其他特殊格式。"><br>```html<br>&lt;pre&gt;预格式化文本 &lt;/pre &gt; <br>&lt;pre&gt;<br>  春 晓     <br>    孟浩然 <br>         春眠不觉晓，<br>         处处闻啼鸟。<br>         夜来风雨声，<br>         花落知多少。<br>&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p><span class = "label label-success">示例</span></p><pre>预格式化文本 </pre > <pre>          春 晓                             孟浩然          春眠不觉晓，         处处闻啼鸟。         夜来风雨声，         花落知多少。</pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础</title>
    <link href="/2021/09/17/JavaScript/"/>
    <url>/2021/09/17/JavaScript/</url>
    
    <content type="html"><![CDATA[<div class = "note note-success">    <p>更新日志:<p>    <ul>       <p>2021.9.17：根据狂神说的视频整理出该笔记</p>      <p>2022.4.21：由于学校前端选修课要考试了，根据教学ppt做了一些修订和补充</p>    </ul></div><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript是一种基于对象和事件驱动并具有相对安全性的客户端脚本语言。被广泛应用于各种客户端Web程序尤其是HTML开发中，能给HTML网页添加动态功能，响应用户各种操作，实现诸如欢迎信息、数字日历、跑马灯，显示浏览器停留时间等特殊效果，提高网页的可观性。决定WEB页面的行为，具有客户端数据验证、用户交互等功能</p><h2 id="1-JavaScript放置"><a href="#1-JavaScript放置" class="headerlink" title="1. JavaScript放置"></a>1. JavaScript放置</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">   alert(&#x27;JSnb&#x27;)</span></span><br><span class="xml"><span class="handlebars"><span class="hljs-comment">&lt;!--可以直接在这里面写--&gt;</span></span></span><br><span class="xml"><span class="handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!--这个写js的标签放在头部或者身体都可以--&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;js1.js&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars"><span class="hljs-comment">&lt;!--也可以新建一个js文件然后导入--&gt;</span></span></span><br><span class="xml"><span class="handlebars"></span></span><br><span class="xml"><span class="handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JavaScript代码放置有4种情形: </p><ol><li>头部;</li><li>主体;</li><li>单独的js文件;</li><li>直接在事件处理代码中。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- edu_12_1_4.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>直接在事件处理代码中加入JavaScript代码<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;直接在事件处理代码中加入JavaScript代码&#x27;)&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;直接调用JavaScript代码&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JavaScript程序本身不能独立存在，它是依附于某个HTML页面，在浏览器端运行的。 </p><div class = "note note-warning">注：如果引入引入了外部js文件，在<span><</span><span>script></span><span><</span>/script></span>标记之间的所有JS语句都被忽略，不会执行</div><h2 id="2-消息对话框"><a href="#2-消息对话框" class="headerlink" title="2. 消息对话框"></a>2. 消息对话框</h2><p>JavaScript中的消息对话框分为告警框、确认框和提示框。</p><h3 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h3><p>​          alert (message) </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- edu_12_2_1.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>告警消息框使用实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  alert(<span class="hljs-string">&quot;这是告警消息框！&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><div class = "note note-warning">注：确定按钮必须响应，否则屏蔽一切操作。告警信息为纯文本信息或字符串，不能含有HTML标记</div><h3 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h3><p>​         confirm (message) </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- edu_12_2_2.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>确认框使用实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show_confirm</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> r=confirm(<span class="hljs-string">&quot;请选择按钮!&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (r==<span class="hljs-literal">true</span>)&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;您按了确定按钮！&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;您按了取消按钮！&quot;</span>); </span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show_confirm()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;显示确认框&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><div class = "note note-warning">注：确认按钮的返回值，类型为逻辑值，确定true，取消false</div><h3 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h3><p>​        prompt (text, defaultText)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- edu_12_2_3.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>提示框使用实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> &gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">disp_prompt</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> name=prompt(<span class="hljs-string">&quot;请输入您的姓名&quot;</span>,<span class="hljs-string">&quot;李大为&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (name!=<span class="hljs-literal">null</span> &amp;&amp; name!=<span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;您好，&quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>); </span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;disp_prompt()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;单击显示提示框&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><div class = "note note-warning">注：选择“确定”返回输入的值，选择“取消”返回null。</div><h2 id="3-命令规范"><a href="#3-命令规范" class="headerlink" title="3. 命令规范"></a>3. 命令规范</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>  标识符是计算机语言中用来表示变量名、函数名等的有效字符序列，简单来说，标识符就是一个名字，JavaScript关于标识符的规定如下：</p><ul><li><p>必须使用字母或者下划线开始。</p></li><li><p>必须使用英文字母、数字、下划线组成，不能出现空格或制表符。</p></li><li><p>不能使用JavaScript关键字与JavaScript保留字。</p></li><li><p>不能使用JavaScript语言内部的单词，比如Infinity，NaN，undefined等。</p></li><li><p>大小写敏感，如name和Name是不同的两个标识符。</p></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>  ​    关键字是JavaScript中已经被赋予特定意义的一些单词，关键字不能作为标识符来使用。</p><table><thead><tr><th>JavaScript的关键字</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>break</strong></td><td><strong>case</strong></td><td><strong>catch</strong></td><td><strong>continue</strong></td><td><strong>default</strong></td></tr><tr><td><strong>delete</strong></td><td><strong>do</strong></td><td><strong>else</strong></td><td><strong>finally</strong></td><td><strong>for</strong></td></tr><tr><td><strong>function</strong></td><td><strong>if</strong></td><td><strong>in</strong></td><td><strong>instanceof</strong></td><td><strong>new</strong></td></tr><tr><td><strong>return</strong></td><td><strong>switch</strong></td><td><strong>this</strong></td><td><strong>throw</strong></td><td><strong>try</strong></td></tr><tr><td><strong>typeof</strong></td><td><strong>var</strong></td><td><strong>void</strong></td><td><strong>while</strong></td><td><strong>with</strong></td></tr></tbody></table><table><thead><tr><th>JavaScript的保留字</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>abstract</strong></td><td><strong>boolean</strong></td><td><strong>byte</strong></td><td><strong>char</strong></td><td><strong>class</strong></td></tr><tr><td><strong>const</strong></td><td><strong>debugger</strong></td><td><strong>double</strong></td><td><strong>enum</strong></td><td><strong>export</strong></td></tr><tr><td><strong>extends</strong></td><td><strong>final</strong></td><td><strong>float</strong></td><td><strong>goto</strong></td><td><strong>implements</strong></td></tr><tr><td><strong>import</strong></td><td><strong>int</strong></td><td><strong>interface</strong></td><td><strong>long</strong></td><td><strong>native</strong></td></tr><tr><td><strong>package</strong></td><td><strong>private</strong></td><td><strong>protected</strong></td><td><strong>public</strong></td><td><strong>short</strong></td></tr><tr><td><strong>static</strong></td><td><strong>super</strong></td><td><strong>synchronized</strong></td><td><strong>throws</strong></td><td><strong>transient</strong></td></tr><tr><td><strong>volatile</strong></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><p>所有的变量直接使用var声明就行  如 var a = 1; 输出是console.log();</p><p>js不区分小数和整数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">123<br>123.1<br>1.23e3<br>-99<br>NaN     //not a number<br>Infinity  //表示无限大<br></code></pre></td></tr></table></figure><p>这里就是多了NaN  (not a number类型和Infinity 无限大的类型, 再说一下比较运算符有点不一样</p><p>比较运算符</p><ul><li>=  赋值</li><li>== 等于(类型不一样，值一样，也会判断为true)</li><li><span class = "label label-danger">===</span> 绝对等于(类型一样，值一样，结果为true)</li></ul><div class = "note note-warning">须知</div><ul><li>NaN===NaN 这个于所有的之都不相等，包括自己</li><li>只能通过isNaN(NaN)来判断是不是NaN</li><li>还有就是老生长谈的精度问题,不要直接比较浮点数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> i = <span class="hljs-number">304</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> f = <span class="hljs-number">3.87</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> s = <span class="hljs-number">8.1e3</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> o = <span class="hljs-number">034</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> h = <span class="hljs-number">0x2A</span>;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;十进制整型数304的输出结果：&quot;</span>+i+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;十进制浮点型数3.87的输出结果：&quot;</span>+f+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;十进制数科学计数法8.1e3的输出结果：&quot;</span>+s+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;八进制整型数034的输出结果：&quot;</span>+o+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;十六进制整型数0x2A的输出结果：&quot;</span>+h+<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h2><p>基本和Java类似,不详谈,不一样的就是什么类型都可以装,有点像集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">true</span>];<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">new</span> array(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>数组越界会undefined</p><p>同时数组还有一些方法如sort(),reverse(),concat();都是 <span class = "label label-success">数组名.方法名();</span> </p><p>来调用,就是多了一个join连接符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-string">&quot;C&quot;</span> <span class="hljs-string">&quot;B&quot;</span> <span class="hljs-string">&quot;A&quot;</span>]<br>arr.join(<span class="hljs-string">&#x27;-&#x27;</span>)<br><span class="hljs-string">&quot;C-B-A&quot;</span><br></code></pre></td></tr></table></figure><p>多维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">arr =  [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>]];<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="6-对象"><a href="#6-对象" class="headerlink" title="6. 对象"></a>6. 对象</h2><p>js是一个面向对象的语言，因此也有对象这个概念</p><p>声明一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;niubi&quot;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-number">3</span>,<br>  <span class="hljs-attr">tags</span>:[<span class="hljs-string">&#x27;js&#x27;</span>,<span class="hljs-string">&#x27;is&#x27;</span>,<span class="hljs-string">&#x27;niubi&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>这里注意,对象是大括号,数组是中括号.而且对象的前几个属性使用逗号隔 ( , ) 开,最后一个不用符号</li><li>调用的话直接person.age  就行了</li></ul><div class = "note note-info">严格检查模式</div><p> 在&lt; script &gt; 标签里<strong>第一句</strong>写上  ‘use strict’就行<br> 这样局部变量就只能使用let声明 (局部变量推荐使用let声明)</p><h2 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7. 字符串"></a>7. 字符串</h2><p> 和Java类似,不同的多了一个多行字符串的编写<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> msg = <span class="hljs-string">`chen</span><br><span class="hljs-string">shuai</span><br><span class="hljs-string">niu</span><br><span class="hljs-string">bi`</span><br></code></pre></td></tr></table></figure><br>这个符号声明的符号就是tab键上面的那个键<br>字符串是不可以变的,就像是Java里的String一样</p><h2 id="8-流程控制"><a href="#8-流程控制" class="headerlink" title="8. 流程控制"></a>8. 流程控制</h2><p>for-in循环</p><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(变量 <span class="hljs-keyword">in</span> 对象)<br>    &#123;<br>        在此执行代码<br>    &#125;<br></code></pre></td></tr></table></figure><p>感觉就是for-each循环，这里的变量可以是数组元素，也可以是对象的属性</p><p><span class = "label label-success">例如</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> num <span class="hljs-keyword">in</span> age)&#123;<br>   <span class="hljs-built_in">console</span>.log(num);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-map和set集合"><a href="#9-map和set集合" class="headerlink" title="9. map和set集合"></a>9. map和set集合</h2><p>和Java没啥区别</p><h4 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">90</span>],[<span class="hljs-string">&quot;haha&quot;</span>,<span class="hljs-number">80</span>]]);<br><span class="hljs-keyword">var</span> name = map.get(<span class="hljs-string">&quot;tom&quot;</span>);<span class="hljs-comment">//通过key来获取value</span><br>map.set(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-number">123456</span>);<br><span class="hljs-built_in">console</span>.log(name);<br>map.delete(<span class="hljs-string">&quot;tom&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h4><p>set: 无序不重复的集合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]);<span class="hljs-comment">//set是可以去重的</span><br>&gt; <span class="hljs-function"><span class="hljs-title">Set</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span> &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;       <span class="hljs-comment">//前面的2是指长度，后面的是含有的元素</span><br><br>set.add(<span class="hljs-number">2</span>);     <span class="hljs-comment">//添加</span><br>set.delete(<span class="hljs-number">1</span>);  <span class="hljs-comment">//删除</span><br>&gt; <span class="hljs-function"><span class="hljs-title">Set</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span> &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">console</span>.log(set.has(<span class="hljs-number">3</span>)); <span class="hljs-comment">//</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>同时遍历的方法多了个for-of循环….就是把 <strong>in</strong> 改成了 <strong>of</strong> 然后没有啥区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">90</span>],[<span class="hljs-string">&quot;haha&quot;</span>,<span class="hljs-number">80</span>]]);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> map)&#123; <span class="hljs-built_in">console</span>.log(x) &#125;<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;tom&#x27;</span>]<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">90</span>, <span class="hljs-string">&#x27;jack&#x27;</span>]<br>(<span class="hljs-number">2</span>) [<span class="hljs-number">80</span>, <span class="hljs-string">&#x27;haha&#x27;</span>]<br><br><span class="hljs-comment">//set遍历同理</span><br></code></pre></td></tr></table></figure><h2 id="10-函数来一点点"><a href="#10-函数来一点点" class="headerlink" title="10. 函数来一点点"></a>10. 函数来一点点</h2><h3 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h3><ul><li>JavaScript函数分为系统内部函数和系统对象定义的函数及用户自定义函数。</li><li>函数就是完成一个特定的功能的程序代码。函数只需要定义一次，可以多次使用，从而提高程序代码的复用率，既减轻开发人员的负担，以降低了代码的重复度。</li><li>函数需要先定义后使用，JavaScript函数一般定义在HTML文件的头部head标记或外部JS文件中，而函数的调用可以在HTML文件的主体body标记中任何位置。</li><li>常用系统内部函数又称为内部函数（内部方法），与任何对象无关，可以直接使用。</li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>function 函数名(参数1, 参数2, … 参数N) {函数体；}</p><p>语法说明：</p><ol><li><p>可以没有参数，但括号必须保留、以及包含在大括号内的由若干条语句构成的函数体。</p></li><li><p>不能在其他语句或其自身中嵌套function语句，也就是说，每个函数声明都是独立的。 </p></li><li><p>函数名（参数），形参是用来接收函数调用者传递过来的实参。</p></li><li><p>调用实参与形参要一一对应，主要表现在类型、顺序、数量、内容要一致。</p></li></ol><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一种方式</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abs</span>(<span class="hljs-params">x</span>)</span>&#123;<br>   <span class="hljs-keyword">if</span>()&#123;<br>   ...<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>   ...<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//第二种方式</span><br><span class="hljs-keyword">var</span> abs = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;<br>     <span class="hljs-keyword">if</span>()&#123;<br>   ...<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>   ...<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//两种定义的方式是等价的</span><br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">abs(-<span class="hljs-number">10</span>)<br>abs(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="ES6引入的新特性"><a href="#ES6引入的新特性" class="headerlink" title="ES6引入的新特性"></a>ES6引入的新特性</h3><p>rest类似于Java中的可变参数</p><p>ES6引入的新特性，获取除了已经定义的参数之外的所有参数，ES6新特性中还可以使用const定义常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params">a,b...rest</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a=&gt;&quot;</span>+a);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b=&gt;&quot;</span>+b);<br>    <span class="hljs-built_in">console</span>.log(rest);<br>&#125;<br></code></pre></td></tr></table></figure><p>rest参数只能写在最后面，且必须使用…标示</p><h2 id="11-方法"><a href="#11-方法" class="headerlink" title="11. 方法"></a>11. 方法</h2><p>定义一个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> chenshuai = &#123;<br>   <span class="hljs-attr">name</span>:chen,<br>   <span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<br>   <span class="hljs-attr">run</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    ....<span class="hljs-comment">//一些方法体</span><br>   &#125;<br><span class="hljs-comment">//方法要写在对象里面</span><br><br>&#125;<br><br>chenshuai.name<span class="hljs-comment">//直接点就可以进行调用</span><br></code></pre></td></tr></table></figure><h2 id="12-date对象的使用"><a href="#12-date对象的使用" class="headerlink" title="12. date对象的使用"></a>12. date对象的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//获取date对象</span><br>now.getFullyear();<span class="hljs-comment">//年</span><br>now.getMonth();<span class="hljs-comment">//月</span><br>now.getDate();<span class="hljs-comment">//日期</span><br>now.getDay();<span class="hljs-comment">//星期几</span><br>now.getHours();<span class="hljs-comment">//小时</span><br>now.getMinutes();<span class="hljs-comment">//分钟</span><br>now.getSeconds();<span class="hljs-comment">//秒</span><br><br>now.getTime();<span class="hljs-comment">//时间戳</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1595555665</span>))  <span class="hljs-comment">//时间戳转换为时间</span><br></code></pre></td></tr></table></figure><h2 id="13-初识Json"><a href="#13-初识Json" class="headerlink" title="13. 初识Json"></a>13. 初识Json</h2><p>这里只是简单的了解一下json，后面我会出专门的json篇<br> <strong>简单的三点</strong></p><ul><li>对象都使用{}</li><li>数组都使用[]</li><li>所有的键值对都是用key:value</li></ul><p>来一点代码理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> user  = &#123;<br>   <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;chenshuai&quot;</span>,<br>   <span class="hljs-attr">age</span>:<span class="hljs-number">3</span>,<br>   <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><br><span class="hljs-comment">//对象转换为json对象&#123;&quot;name&quot;:&quot;chenhsuai&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="hljs-keyword">var</span> jsonUser = <span class="hljs-built_in">JSON</span>.stringify(user);<br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;chenhsuai&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>)<br><br><span class="hljs-comment">//注意这里如果里面是双引号,外面就要用单引号.反之亦然</span><br></code></pre></td></tr></table></figure><p>关于js和Json的区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;hellob&#x27;</span>&#125;; <span class="hljs-comment">//js</span><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;hellob&quot;</span>&#125;; <span class="hljs-comment">//json</span><br></code></pre></td></tr></table></figure><h2 id="14-原型"><a href="#14-原型" class="headerlink" title="14. 原型"></a>14. 原型</h2><p>相当于Java中的继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> student = &#123;<br>   <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;chenhsuai&quot;</span>,<br>   <span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<br>   <span class="hljs-attr">run</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;student&quot;</span>);<br>  &#125;<br><br>&#125; <br><br><span class="hljs-keyword">var</span> xiaoming = &#123;<br>   <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;xiaoming&quot;</span>,<br>   <span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<br>&#125; <br><br>xiaoming._proto_ = student;<br><span class="hljs-comment">//将xiaoming的原型设置为student，相当于继承，这个时候小明就可以调用student中的run方法</span><br></code></pre></td></tr></table></figure><p>小明的原型是student 然后就可以使用student的方法了.在这里student也是一个对象</p><p>原型链：不深入了解</p><h2 id="15-操作BOM对象"><a href="#15-操作BOM对象" class="headerlink" title="15. 操作BOM对象"></a>15. 操作BOM对象</h2><p>javascript由三部分组成</p><ul><li><p>核心：描述了javascript的语法和基本对象。</p></li><li><p>文档对象模型（DOM）：是处理网页内容的方法和接口，是HTML和xml的应用程序接口（API）。</p></li><li><p>浏览器对象模型（BOM）：各个浏览器厂商根据DOM在各个浏览器上的实现。</p></li></ul><p>bom对象就是浏览器的对象模型，核心是对window的操作，主要针对浏览器窗口交互，BOM包含了DOM</p><p><img src="https://img.mercuryblog.site/img/image-20220422214828118.png" alt="bom对象模型图"></p><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>代表浏览器窗口</p><p>页面跳转和重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;url&quot;</span>;<br><span class="hljs-built_in">window</span>.location.replace(<span class="hljs-string">&quot;url&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h3><p>封装了浏览器的信息（大多数时候不会使用这个对象，因为会被认为的修改<br>所以不建议使用这些属性来判断和编写代码<br>）</p><h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><p>screen.width  获取屏幕的宽度</p><p>screen.height 获取长度</p><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>代表当前页面的URL信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">host:<span class="hljs-string">&quot;www.baidu.com&quot;</span><br><span class="hljs-attr">href</span>:<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span><br><span class="hljs-attr">protocol</span>:<span class="hljs-string">&quot;https:&quot;</span><br><span class="hljs-attr">reload</span>:f reload() <span class="hljs-comment">//刷新网页</span><br><span class="hljs-comment">//设置新的地址</span><br>location.assign(<span class="hljs-string">&#x27;https://blog.mercury.com/&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><ul><li><p>document对象是客户端JavaScript最为常用的对象之一，在浏览器对象模型中，它位于window对象的下一层级。</p></li><li><p>document对象包含一些简单的属性，提供了有关浏览器中显示文档的相关信息，例如：该文档的URL、字体颜色，修改日期等。</p></li><li><p>document对象还包含一些引用数组的属性，这些属性可以代表文档中的表单、图象、链接、锚以及applet。</p></li><li><p>同其他对象一样，document对象还定义了一系列的方法，通过这些方法，可以使JavaScript在解析文档时动态地将HTML文本添加到文档中。</p></li></ul><h4 id="获取具体的文档树结点"><a href="#获取具体的文档树结点" class="headerlink" title="获取具体的文档树结点"></a>获取具体的文档树结点</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>javaSE<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>javaEE<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> dl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h5><ul><li><p>通过getElementById方法可以快速访问某个HTML元素，而不必通过DOM层层遍历。</p></li><li><p>使用getElementById方法时如果元素的ID不是唯一的，那么会获得第一个符合条件的元素。</p></li></ul><h5 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a>getElementsByName</h5><ul><li>getElementsByName方法用于返回HTML元素中指定name属性的元素数组 ，而且仅用于像input,radio,checkbox等表单元素对象。</li></ul><h5 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h5><ul><li><p>getElementsByTagName方法返回指定HTML标记名的元素数组</p></li><li><p>通过遍历这个数组获得每一个单独的子元素</p></li></ul><p>定义多个P标记元素，通过getElementsByTagName(“p”)方法选中HTML标记是<p>的元素，返回是一个对象数组，可以通过下标访问这个数组。</p><h5 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h5><p>appendChild方法向当前节点对象追加节点，经常用于给页面动态的添加内容。</p><h5 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a>removeChild</h5><p>removeChild方法是删除当前节点下的某个子节点，并返回被删除的节点。</p><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><ul><li><p>cloneNode();</p></li><li><p>replaceChild(newChild,oldChild);</p></li><li><p>inserBefore(newElement,targeElement);</p></li></ul><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><p>例如：  document.cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.cookie<br><span class="hljs-string">&quot;buvid3=C1B1E27B-2C84-63F6-4A26-B4E8B02E8F6161085infoc&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//你先要在html中设置那个标签的id是&#x27;h1&#x27;，以下相同</span><br><span class="hljs-keyword">var</span> h1 = <span class="hljs-built_in">document</span>.getElementByTagName(<span class="hljs-string">&#x27;h1&#x27;</span>);<br><span class="hljs-keyword">var</span> p1 = <span class="hljs-built_in">document</span>.getElementByID(<span class="hljs-string">&#x27;p1&#x27;</span>);<br><span class="hljs-keyword">var</span> p2 = <span class="hljs-built_in">document</span>.getElementByclassName(<span class="hljs-string">&#x27;p2&#x27;</span>);<br><span class="hljs-keyword">var</span> father = <span class="hljs-built_in">document</span>.getElementByID(<span class="hljs-string">&#x27;father&#x27;</span>);<br><br><span class="hljs-keyword">var</span> childrens = father.children; <span class="hljs-comment">//获取父节点下的所有子结点</span><br><span class="hljs-comment">//father.firstChild</span><br><span class="hljs-comment">//father.lastChild</span><br></code></pre></td></tr></table></figure><h4 id="获取页面标题"><a href="#获取页面标题" class="headerlink" title="获取页面标题"></a>获取页面标题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.title<br><span class="hljs-string">&quot;百度一下，你就知道&quot;</span><br></code></pre></td></tr></table></figure><div class = "note note-warning">注意</div><ul><li><p>通过getElementById方法可以快速访问某个HTML元素，而不必通过DOM层层遍历。</p></li><li><p>使用getElementById方法时如果元素的ID不是唯一的，那么会获得第一个符合条件的元素。</p></li><li><p>getElementsByName方法用于返回HTML元素中指定name属性的元素数组。而且仅用于像input,radio,checkbox等表单元素对象</p></li></ul><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">history.back() <span class="hljs-comment">//后退</span><br><br>history.forward() <span class="hljs-comment">//前进</span><br></code></pre></td></tr></table></figure><h2 id="16-操作DOM对象节点"><a href="#16-操作DOM对象节点" class="headerlink" title="16. 操作DOM对象节点"></a>16. 操作DOM对象节点</h2><h3 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h3><p>DOM是一个发展中的标准，它指定了JavaScript等脚本语言访问和操作HTML或者XML文档各个结构的方法，随着技术的发展和需求的变化，DOM中的对象、属性和方法也在不断地变化</p><div class = "note note-success">对于大多数HTML文档来说，主要由以下几个节点构成：</div><p>•元素节点 (Element Node ),元素节点构成了DOM基础。在文档结构中，<code>&lt;html&gt;,&lt;head&gt;、&lt;body&gt;、&lt;h1&gt;、&lt;p&gt;,&lt;ul&gt;</code>等标签都是元素节点。 </p><p>•文本节点(Text Node),文本节点包含在元素节点内，如h1、p、li等节点就可以包含一些文本节点。 </p><p>•属性节点(Attribute Node),属性节点总是被包含在元素节点当中，可以通过元素节点对象调用getAttribute( )方法来获取属性节点。 </p><h3 id="DOM应用实例"><a href="#DOM应用实例" class="headerlink" title="DOM应用实例"></a>DOM应用实例</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>createElement(tagname)</td><td>创建标记名为tagname的结点</td></tr><tr><td>createTextNode(text)</td><td>创建包含文本text的文本结点</td></tr><tr><td>creatDocumentFragment()</td><td>创建文档碎片</td></tr><tr><td>removeChild(node)</td><td>删除一个名为node的子节点</td></tr><tr><td>appendChild(node)</td><td>添加一个名为node的子节点</td></tr><tr><td>insertBefore(node B ,node A)</td><td>在名为nodeA节点前插入一个名为nodeB的节点</td></tr><tr><td>replaceChild(node B ,node A)</td><td>用一个名为nodeB节点替换另一个名为nodeA节点</td></tr><tr><td>cloneNode(boolean)</td><td>克隆一个节点，它接收一个boolean参数，为true时表示该节点带文字；false表示该节点不带文字</td></tr></tbody></table><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><p>在DOM中有两个很重要的属性，这两个属性分别是innerText和innerHTML，通过这两个属性，可以更方便的进行文档操作。</p><p>在DOM中，如果需要动态地获取及设置节点属性的话，可以通过getAttribute( )方法setAttribute( )方法来处理 </p><p>先获取一个节点,然后进行相应的操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;id1&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">   <span class="hljs-keyword">var</span> id1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;id1&quot;</span>);</span><br><span class="javascript">   id1.innerText = <span class="hljs-string">&#x27;456&#x27;</span>                     <span class="hljs-comment">// 修改文本的值</span></span><br><span class="javascript">   id1.innerHTML = <span class="hljs-string">&#x27;&lt;strong&gt;123&lt; strong&gt;&#x27;</span>   <span class="hljs-comment">// 向标签中添加HTML语句</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>需要通过父节点来删除子节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;p1&quot;</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;p2&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">   </span><br><span class="javascript">    <span class="hljs-keyword">var</span> self = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;p1&#x27;</span>);      <span class="hljs-comment">//获得p1这个节点</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> father = p1.getElementById;                <span class="hljs-comment">//获得p1的父亲节点</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//第一种    </span></span><br><span class="javascript">    father.removechild(p1);                        <span class="hljs-comment">//通过父亲节点来删除儿子节点</span></span><br><span class="javascript"><span class="hljs-comment">//第二种</span></span><br><span class="javascript">    father.removeChild(father.child[<span class="hljs-number">0</span>]);           <span class="hljs-comment">//通过数组的形式来删除</span></span><br><span class="javascript">    father.removeChild(father.child[<span class="hljs-number">1</span>]);</span><br><span class="javascript">    <span class="hljs-comment">//需要注意的是这种方式是动态的，删除了0号，1号就变成了0号；</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><h4 id="1-追加"><a href="#1-追加" class="headerlink" title="1. 追加"></a>1. 追加</h4><p>可以通过append方法来追加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;me&quot;</span>&gt;</span>JavaME<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> js = <span class="hljs-built_in">document</span>.getElemntById(<span class="hljs-string">&#x27;js&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;list&#x27;</span>);</span><br><span class="javascript">    list.appendChild(js);        <span class="hljs-comment">//追加到后面</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-通过js创建一个新的节点"><a href="#2-通过js创建一个新的节点" class="headerlink" title="2. 通过js创建一个新的节点"></a>2. 通过js创建一个新的节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> newp = <span class="hljs-built_in">document</span>.creatElement(<span class="hljs-string">&#x27;p&#x27;</span>)<span class="hljs-comment">//创建一个p标签</span><br>newp.id = <span class="hljs-string">&#x27;newp&#x27;</span>;<br>newp.innerText = <span class="hljs-string">&#x27;hello chengshuai&#x27;</span><br></code></pre></td></tr></table></figure><p>插入到前面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;me&quot;</span>&gt;</span>JavaME<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;list&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> newnode = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<span class="hljs-comment">//创建一个p标签</span></span><br><span class="javascript">    newnode.innerHTML = <span class="hljs-string">&quot;hello chengshuai&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> ee = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;ee&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">    list.insertBefore(newnode,ee);<span class="hljs-comment">//将list插入到ee到前面  list必须是父标签</span></span><br><span class="javascript">   <span class="hljs-comment">// list.insertBefore(newnode,list.childNodes[0]);</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-通过函数"><a href="#3-通过函数" class="headerlink" title="3. 通过函数"></a>3. 通过函数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>创建节点举例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">creatp</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> op = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> otext = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;hello world&quot;</span>);</span><br><span class="javascript">            op.appendChild(otext);</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>].appendChild(op);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;from1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击创建节点&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;creatp()&quot;</span>&gt;</span>  <br>        <span class="hljs-comment">&lt;!--这里主要是要记住可以在标签里加入 onclik 事件，然后在里面放函数，就会执行函数的内容--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-操作css"><a href="#4-操作css" class="headerlink" title="4. 操作css"></a>4. 操作css</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">id1.style.color = <span class="hljs-string">&#x27;yellow&#x27;</span>;<br>id1.style.fronSize = <span class="hljs-string">&#x27;20px&#x27;</span>;<br>id1.style.padding = <span class="hljs-string">&#x27;2px&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶</title>
    <link href="/2021/09/03/Java%E8%BF%9B%E9%98%B6/"/>
    <url>/2021/09/03/Java%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、常用类"><a href="#一、常用类" class="headerlink" title="一、常用类"></a>一、常用类</h1><h2 id="1）-String相关类"><a href="#1）-String相关类" class="headerlink" title="1） String相关类"></a>1） String相关类</h2><h3 id="1-String"><a href="#1-String" class="headerlink" title="1.String"></a>1.String</h3><h4 id="1-1-初识字符串"><a href="#1-1-初识字符串" class="headerlink" title="1.1 初识字符串"></a>1.1 初识字符串</h4><p><strong>声明字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法一 声明时直接赋值</span><br>String s = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;uden&quot;</span>);<br><span class="hljs-comment">//方法二 先声明后赋值</span><br>String s = <span class="hljs-keyword">new</span> String();<br>s = sc.next();<br></code></pre></td></tr></table></figure><p>转换为二进制的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//插一个函数 重要</span><br>result = Integer.toBinaryString(num)<span class="hljs-comment">//将int 数字转换为二进制字符串（String）</span><br></code></pre></td></tr></table></figure><h4 id="1-2字符串的一系列操作"><a href="#1-2字符串的一系列操作" class="headerlink" title="1.2字符串的一系列操作"></a>1.2字符串的一系列操作</h4><p><strong>连接字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">join</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Java&quot;</span>);<br>        String s = s1+<span class="hljs-string">&quot; &quot;</span>+s2;<br>        System.out.println(s);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> size = str.length();<br></code></pre></td></tr></table></figure><p><strong>字符串查找</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> index = str.indexOf(substr);<span class="hljs-comment">//返回substr首次出现在str里的下标；</span><br><span class="hljs-comment">//例如</span><br><span class="hljs-keyword">int</span> index = str.indexOf(<span class="hljs-string">&quot;a&quot;</span>);<br><br><span class="hljs-keyword">int</span> index = str.lastindexOf(substr);<span class="hljs-comment">//返回substr最后一次出现在str里的下标；</span><br><span class="hljs-comment">//例如</span><br><span class="hljs-keyword">int</span> index = str.lastindexOf(<span class="hljs-string">&quot;a&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>获取指定位置的字符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> mychar = str.charAt(<span class="hljs-keyword">int</span> index);<br></code></pre></td></tr></table></figure><p><strong>获取子字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String substr = str.substring(<span class="hljs-keyword">int</span> beginIndex);<span class="hljs-comment">//获取从指定索引位置开始直到该字符串结尾的子串</span><br><br>String substr = str.substring(<span class="hljs-keyword">int</span> beginIndex，<span class="hljs-keyword">int</span> endIndex);<span class="hljs-comment">//从begin到end的子串</span><br></code></pre></td></tr></table></figure><p><strong>去除空格</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.trim();<br></code></pre></td></tr></table></figure><p><strong>字符串替换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">str.replace(<span class="hljs-keyword">char</span> oldChar,<span class="hljs-keyword">char</span> newChar);<br>str.replaceAll(String regex,String newstr);<span class="hljs-comment">//注意这里需使用正则表达式</span><br></code></pre></td></tr></table></figure><p><strong>比较字符串</strong><br>比较字符串不能用 “==” 因为字符串是对象，即使是内容相同，内存地址也是不同的，也会是false;<br>这里应该使用equals方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">str.equals(String otherString);<span class="hljs-comment">//返回Boolean类型</span><br><br>str.equalsIgnoreCase(String otherString);<span class="hljs-comment">//忽视大小写的情况下比较字符串  返回Boolean类型</span><br></code></pre></td></tr></table></figure><p><strong>按字典顺序比较两个字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.compareTo(String otherstr);<span class="hljs-comment">//如果str在otherstr之前则返回一个负值，否则返回正值，如果相等则返回0；</span><br></code></pre></td></tr></table></figure><p><strong>大小写转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>    String str = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc DEF&quot;</span>);<br>    String newstr1 = str.toUpperCase();<span class="hljs-comment">//转换为大写</span><br>    String newstr2 = str.toLowerCase();<span class="hljs-comment">//转换为小写</span><br>    System.out,println(newstr1);<span class="hljs-comment">//注意，转换时,数字或非字符是不受影响的</span><br>    System.out,println(newstr1);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>字符串分割</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] firstArray = str.split(<span class="hljs-string">&quot;\\.&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//第一个参数为正则表达式，第二个分割次数，也可以不写</span><br><br></code></pre></td></tr></table></figure><p><strong>字符串反转</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder(s);<br>System.out.print(stringBuilder.reverse().toString());<br></code></pre></td></tr></table></figure><h4 id="1-3-关于正则表达式（初级）"><a href="#1-3-关于正则表达式（初级）" class="headerlink" title="1.3 关于正则表达式（初级）"></a>1.3 关于正则表达式（初级）</h4><p><strong>注意：</strong> 在正则表达式中“.”代表任何一个字符，因此在正则表达式如果想使用普通意义的”.” ，需要写成”\.”;<br><img src="https://img-blog.csdnimg.cn/b6fab23d0d6143cfbb8598b42ad198a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="正则表达式"></p><h3 id="2-StringBuffer"><a href="#2-StringBuffer" class="headerlink" title="2. StringBuffer"></a>2. StringBuffer</h3><h4 id="2-1初始化"><a href="#2-1初始化" class="headerlink" title="2.1初始化"></a>2.1初始化</h4><p> StringBuffer() 构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;william&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-2-关于StringBuffer的一些方法"><a href="#2-2-关于StringBuffer的一些方法" class="headerlink" title="2.2 关于StringBuffer的一些方法"></a>2.2 关于StringBuffer的一些方法</h4><p><strong>添加字符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//append方法  在末尾添加字符或者字符串</span><br>StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;william&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;wiam&quot;</span>);<span class="hljs-comment">//结果应是williamwiam,即添加到末尾</span><br>System.out.println(sb);<br><br><span class="hljs-comment">//insert方法  在指定位置添加字符</span><br> sb.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;w&quot;</span>);<br> System.out.println(sb);<span class="hljs-comment">//结果为wabcb</span><br></code></pre></td></tr></table></figure><p><strong>删除字符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//deleteCharAt()方法  删除指定位置的字符</span><br>sb.deleteCharAt(<span class="hljs-number">1</span>); <br>System.out.println(sb);<span class="hljs-comment">//结果wbcb</span><br><br><span class="hljs-comment">//delete方法  删除指定位置的字符</span><br>sb.delete(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>System.out.println(sb);<span class="hljs-comment">//结果wb  即不包括位置的最后一位</span><br></code></pre></td></tr></table></figure><p><strong>替换指定位置的字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//Buffer里的replace方法</span><br>sb.replace(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chengningzuishuai&quot;</span>);<br>System.out.println(sb);<span class="hljs-comment">//结果chengningzuishuaib 最后一个依然为开区间</span><br></code></pre></td></tr></table></figure><p><strong>反转字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//reverse方法</span><br>sb.reverse();<br>System.out.println(sb);<span class="hljs-comment">//结果biauhsiuzgningnehc</span><br></code></pre></td></tr></table></figure><blockquote><p>参考:<a href="https://blog.csdn.net/weixin_44519467/article/details/103947361?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163092725916780265450059%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163092725916780265450059&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-103947361.first_rank_v2_pc_rank_v29&amp;utm_term=stringbuffer&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_44519467/article/details/103947361?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163092725916780265450059%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163092725916780265450059&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-103947361.first_rank_v2_pc_rank_v29&amp;utm_term=stringbuffer&amp;spm=1018.2226.3001.4187</a></p></blockquote><h3 id="3-StringBuilder"><a href="#3-StringBuilder" class="headerlink" title="3. StringBuilder"></a>3. StringBuilder</h3><h4 id="3-1-初始化"><a href="#3-1-初始化" class="headerlink" title="3.1 初始化"></a>3.1 初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder  sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;Hello mercury&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-2-几个常用的方法"><a href="#3-2-几个常用的方法" class="headerlink" title="3.2 几个常用的方法"></a>3.2 几个常用的方法</h4><p>和StringBuffer的都一样<br><strong>添加字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//append方法</span><br>sb.append(<span class="hljs-string">&quot;chenningzuishuai&quot;</span>);<br>System.out.println(sb);<span class="hljs-comment">//结果Hello mercurychenningzuishuai</span><br><br><span class="hljs-comment">//insert</span><br>sb.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;william&quot;</span>);<br>System.out.println(sb);<span class="hljs-comment">//结果为Hewilliamllo mercurychenningzuishuai</span><br></code></pre></td></tr></table></figure><p><strong>删除字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//deleteCharAt()方法  删除指定位置的字符</span><br>sb.deleteCharAt(<span class="hljs-number">1</span>); <br>System.out.println(sb);<span class="hljs-comment">//结果Hwilliamllo mercurychenningzuishuai</span><br><br><span class="hljs-comment">//delete方法  删除指定位置的字符</span><br>sb.delete(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>);<br>System.out.println(sb);<span class="hljs-comment">//结果Hshuai  即不包括位置的最后一位</span><br></code></pre></td></tr></table></figure><p><strong>替换指定位置的字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//Builder里的replace方法</span><br>sb.replace(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;chengningzuishuai&quot;</span>);<br>System.out.println(sb);```<br></code></pre></td></tr></table></figure><p><strong>反转字符串</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//reverse方法</span><br>sb.reverse();<br>System.out.println(sb);<br></code></pre></td></tr></table></figure><h3 id="4-关于这几个字符串的区别"><a href="#4-关于这几个字符串的区别" class="headerlink" title="4. 关于这几个字符串的区别"></a>4. 关于这几个字符串的区别</h3><table><thead><tr><th>String</th><th align="center">StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>String的值是不可变的（里面是final），这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间</td><td align="center">StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量</td><td>可变类，速度更快</td></tr><tr><td>不可变</td><td align="center">可变</td><td>可变</td></tr><tr><td></td><td align="center">线程安全</td><td>线程不安全</td></tr><tr><td></td><td align="center">多线程操作字符串</td><td>单线程操作字符串</td></tr></tbody></table><p>（1）如果要操作少量的数据用 String；</p><p>（2）多线程操作字符串缓冲区下操作大量数据 StringBuffer；</p><p>（3）单线程操作字符串缓冲区下操作大量数据 StringBuilder。</p><p><strong>在不考虑线程安全的情况下，现阶段应使用StringBuilder而不是StringBuffer</strong></p><blockquote><p>参考：<a href="https://blog.csdn.net/itchuxuezhe_yang/article/details/89966303?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163092981516780366546179%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163092981516780366546179&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-89966303.first_rank_v2_pc_rank_v29&amp;utm_term=stringbuilder&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/itchuxuezhe_yang/article/details/89966303?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163092981516780366546179%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163092981516780366546179&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-89966303.first_rank_v2_pc_rank_v29&amp;utm_term=stringbuilder&amp;spm=1018.2226.3001.4187</a></p></blockquote><h2 id="2-Math类"><a href="#2-Math类" class="headerlink" title="2) Math类"></a>2) Math类</h2><p>定义了一些常量,如 Math.PI   Math.E</p><h3 id="1-常用的数学方法"><a href="#1-常用的数学方法" class="headerlink" title="1.常用的数学方法"></a>1.常用的数学方法</h3><ol><li>三角函数方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mathdemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;90度的正弦值：&quot;</span>+Math.sin(Math.PI/<span class="hljs-number">2</span>));<span class="hljs-comment">//注意这几个函数参数和返回值都是double</span><br>        System.out.println(<span class="hljs-string">&quot;0度的余弦值：&quot;</span>+Math.cos(<span class="hljs-number">0</span>));<br>        System.out.println(<span class="hljs-string">&quot;60度的正弦值：&quot;</span>+Math.tan(Math.PI/<span class="hljs-number">3</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>指数函数方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExponentFunction</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<span class="hljs-comment">//这几个函数依旧是double参数和double返回值</span><br>        System.out.println(<span class="hljs-string">&quot;e的平方值&quot;</span> + Math.exp(<span class="hljs-number">2</span>));<span class="hljs-comment">//e的二次方</span><br>        System.out.println(<span class="hljs-string">&quot;以e为底2的对数值&quot;</span> + Math.log(<span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;以10为底2的对数值&quot;</span> + Math.log10(<span class="hljs-number">2</span>));<span class="hljs-comment">//这个10不可以变哈</span><br>        System.out.println(<span class="hljs-string">&quot;4的平方根值&quot;</span> + Math.sqrt(<span class="hljs-number">4</span>));<br>        System.out.println(<span class="hljs-string">&quot;8的立方根值&quot;</span> + Math.cbrt(<span class="hljs-number">8</span>));<br>        System.out.println(<span class="hljs-string">&quot;2的2次方值&quot;</span> + Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>取整函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Math类里的取整函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">ceil</span><span class="hljs-params">( <span class="hljs-keyword">double</span> a)</span></span>;<span class="hljs-comment">//向上取整</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">floor</span><span class="hljs-params">( <span class="hljs-keyword">double</span> a)</span></span>;<span class="hljs-comment">//向下取整</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">rint</span><span class="hljs-params">( <span class="hljs-keyword">double</span> a)</span></span>;<span class="hljs-comment">//返回和参数最接近的整数，如果同样接近，则结果取整数</span><br></code></pre></td></tr></table></figure></li><li>取最大值，最小值，绝对值函数方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>   System.out.println(<span class="hljs-string">&quot;4和8较大者&quot;</span>+Math.max(<span class="hljs-number">4</span>,<span class="hljs-number">8</span>));<br>   System.out.println(<span class="hljs-string">&quot;4.4和4较小者&quot;</span>+Math.min(<span class="hljs-number">4.4</span>,<span class="hljs-number">4</span>));<br>   System.out.println(<span class="hljs-string">&quot;-7的绝对值&quot;</span>+Math.abs(-<span class="hljs-number">7</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-Random类"><a href="#3-Random类" class="headerlink" title="3) Random类"></a>3) Random类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">randomdemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random r = <span class="hljs-keyword">new</span> Random();<span class="hljs-comment">//实例化一个random</span><br>        <span class="hljs-comment">//随机产生一个整数s</span><br>        System.out.println(<span class="hljs-string">&quot;随机产生一个整数&quot;</span>+r.nextInt());<br>        <span class="hljs-comment">//随机产生一个大于等于0且小于10的整数</span><br>        System.out.println(<span class="hljs-string">&quot;随机产生一个大于等于0且小于10的整数&quot;</span>+r.nextInt(<span class="hljs-number">10</span>));<br>        System.out.println(<span class="hljs-string">&quot;随机产生布尔型的值&quot;</span>+r.nextBoolean());<br>        System.out.println(<span class="hljs-string">&quot;随机产生一个双精度型的的值&quot;</span>+r.nextDouble());<br>        System.out.println(<span class="hljs-string">&quot;随机产生一个浮点型的的值&quot;</span>+r.nextFloat());<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-大数字计算类"><a href="#4-大数字计算类" class="headerlink" title="4) 大数字计算类"></a>4) 大数字计算类</h2><h3 id="1-BigInteger"><a href="#1-BigInteger" class="headerlink" title="1. BigInteger"></a>1. BigInteger</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigIntegerdemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BigInteger big = <span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;4&quot;</span>);<span class="hljs-comment">//实例化一个大数据</span><br>        <span class="hljs-comment">//取该数据加2的操作</span><br>        System.out.println(<span class="hljs-string">&quot;加法操作&quot;</span>+ big.add(<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;2&quot;</span>)));<br>        System.out.println(<span class="hljs-string">&quot;减法操作&quot;</span>+ big.subtract(<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;2&quot;</span>)));<br>        System.out.println(<span class="hljs-string">&quot;乘法操作&quot;</span>+ big.multiply(<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;2&quot;</span>)));<br>        System.out.println(<span class="hljs-string">&quot;除法操作&quot;</span>+ big.divide(<span class="hljs-keyword">new</span> BigInteger(<span class="hljs-string">&quot;2&quot;</span>)));<br>        System.out.println(<span class="hljs-string">&quot;乘方操作&quot;</span>+ big.pow(<span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;取相反数操作&quot;</span>+ big.negate());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-BigDecimal"><a href="#2-BigDecimal" class="headerlink" title="2. BigDecimal"></a>2. BigDecimal</h3><p>与BigInteger不同的是，BigDecimal可以进行小数的计算，包括float和double，值得注意的是，这个的加法减法等方法需要自己去定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//有两种构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BigDecimal</span><span class="hljs-params">(<span class="hljs-keyword">double</span> val)</span></span>;<span class="hljs-comment">//将double变为大数类型</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BigDecimal</span><span class="hljs-params">(String val)</span></span>;<span class="hljs-comment">//将字符串变为大数类型</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigDecimalDemo</span> </span>&#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>            BigDecimalDemo  big = <span class="hljs-keyword">new</span> BigDecimalDemo();<br>            System.out.println(<span class="hljs-string">&quot;两数相加的结果&quot;</span>+big.add(<span class="hljs-number">7.5</span>,<span class="hljs-number">8.9</span>));<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">double</span> value1, <span class="hljs-keyword">double</span> value2)</span></span>&#123;<span class="hljs-comment">//加法</span><br>            BigDecimal b1 = <span class="hljs-keyword">new</span> BigDecimal(Double.toString(value1));<span class="hljs-comment">//这里直接填value1也可以</span><br>            BigDecimal b2 = <span class="hljs-keyword">new</span> BigDecimal(Double.toString(value2));<br>            <span class="hljs-keyword">return</span> b1.add(b2);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="二、集合"><a href="#二、集合" class="headerlink" title="二、集合"></a>二、集合</h1><p>集合的索引也是从0开始</p><h2 id="1）Collection接口"><a href="#1）Collection接口" class="headerlink" title="1）Collection接口"></a>1）Collection接口</h2><p>Collection是根接口,一般不直接使用,后面的list接口和Set接口都继承了Collection接口,因此是通用的;而遍历集合一般都是通过迭代器实现;这里给出一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util*<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Muster</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>       Collection&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>       Iterator&lt;String&gt; it = list.iterator();<span class="hljs-comment">//迭代器是集合的一种方法</span><br>       <span class="hljs-keyword">while</span>(it.hasNext())&#123;<span class="hljs-comment">//这个判断一定要记得,不然会抛异常</span><br>          String str = it.next();<br>          System.out.println(str);<br>       &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外,collection中主要有以下方法</p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>add(E e)</td><td>添加指定对象</td></tr><tr><td>remove(Object o)</td><td>将指定对象移除</td></tr><tr><td>isEmpty</td><td>判断是否为空</td></tr><tr><td>itertor()</td><td>迭代器</td></tr><tr><td>size()</td><td>获取元素个数</td></tr></tbody></table><h2 id="2）List集合"><a href="#2）List集合" class="headerlink" title="2）List集合"></a>2）List集合</h2><p>List中主要包含了两种实现类，即ArrayList和LinkedList，他们的主要区别就是，List中类似数组存储，而LinkedList则是使用链表存储。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实例化</span><br>List&lt;E&gt;  list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>List&lt;E&gt;  list2 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br></code></pre></td></tr></table></figure><p>List集合继承了collection接口，有他的所有方法，并且多了两个方法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>get(int index)</td><td>获取指定那个位置的集合元素</td></tr><tr><td>set(int index,Object obj)</td><td>顾名思义就是设置元素的</td></tr></tbody></table><p>来个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListdemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        list.remove(<span class="hljs-number">2</span>);<span class="hljs-comment">//移除指定位置的集合元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            System.out.println(list.get(i));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3）Set集合"><a href="#3）Set集合" class="headerlink" title="3）Set集合"></a>3）Set集合</h2><p>Set继承了Collection接口；Set集合对象不按特定的顺序排序，只是简单的加入数据，但是Set集合中不能包含重复的对象，常用的实现类有HashSet类和TreeSet类</p><h3 id="1-HashSet实现类"><a href="#1-HashSet实现类" class="headerlink" title="1. HashSet实现类"></a>1. HashSet实现类</h3><p>数据结构：JDK1.8之前：哈希表（数组+单向链表）；JDK1.8之后：哈希表（数组+单向链表+红黑树），当链表长度超过阈值（8）时，链表将转换为红黑树。</p><p>特点：查询快，元素无序，元素不可重复，没有索引；</p><p>底层分析：哈希表底层用数组+单向链表实现，即使用链表处理冲突，同一Hash值的元素都存储在一个链表里，但是当位于一个链表中的元素较多，即Hash值相等的元素较多，通过key值依次查找的效率降低。JDK1.8之后，哈希表底层采用数据+单向链表+红黑树实现，当链表长度超过阈值（8）时，链表将转换为红黑树，极大缩短查询时间。</p><h3 id="2-TreeSet实现类"><a href="#2-TreeSet实现类" class="headerlink" title="2. TreeSet实现类"></a>2. TreeSet实现类</h3><p>数据结构：红黑树     </p><p>特点：查询快，元素有序，元素不可重复，没有索引；</p><p>底层分析：TreeSet实现了继承于Set接口的SortedSet接口 ，它支持两种排序方法，自然排序和定制排序，自然排序的意思就是放入元素“a”，“b”，a会自然地排在b前面，其中还有几个特有方法。</p><p>first() 返回第一个元素； last() 返回最后一个元素；comparator() 返回排序比较器；</p><blockquote><p>引用自<a href="https://blog.csdn.net/weixin_42559574/article/details/108203595?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163110337616780255269862%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163110337616780255269862&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108203595.first_rank_v2_pc_rank_v29&amp;utm_term=Java%E9%9B%86%E5%90%88%E7%B1%BB&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_42559574/article/details/108203595?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163110337616780255269862%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163110337616780255269862&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108203595.first_rank_v2_pc_rank_v29&amp;utm_term=Java%E9%9B%86%E5%90%88%E7%B1%BB&amp;spm=1018.2226.3001.4187</a></p></blockquote><h2 id="3）Map集合"><a href="#3）Map集合" class="headerlink" title="3）Map集合"></a>3）Map集合</h2><p>Map没有继承collection类，它提供的是key到value的映射，Map中不能包含相同的key,每个key只能映射一个value；其实key就相当于下标。</p><h3 id="1-Map接口"><a href="#1-Map接口" class="headerlink" title="1. Map接口"></a>1. Map接口</h3><p>其包含的主要方法</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>put(K key,V value)</td><td>添加指定的key到value的映射关系</td></tr><tr><td>containKey(Object key)</td><td>如果包含指定key的映射关系，则返回true</td></tr><tr><td>containsValue(Object value)</td><td>如果包含指定key的映射关系，则返回true</td></tr><tr><td>get(Object key)</td><td>如果存在指定的key对象，则返回对应的value值，否则返回null</td></tr><tr><td>keySet()</td><td>返回所有的key的值形成的Set集合</td></tr><tr><td>values()</td><td>返回所有的value的值形成的Collection集合</td></tr></tbody></table><h3 id="2-Map接口实现的类"><a href="#2-Map接口实现的类" class="headerlink" title="2. Map接口实现的类"></a>2. Map接口实现的类</h3><p>主要有HashMap和TreeMap，建议使用HashMap，因为效率更高，而TreeMap有一定的顺序，若希望Map集合里的对象也有一定的顺序，则使用TreeMap实现Map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实例化</span><br><span class="hljs-comment">//HashMap</span><br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br></code></pre></td></tr></table></figure><h1 id="三、-枚举类型"><a href="#三、-枚举类型" class="headerlink" title="三、 枚举类型"></a>三、 枚举类型</h1><h2 id="1）枚举类的使用"><a href="#1）枚举类的使用" class="headerlink" title="1）枚举类的使用"></a>1）枚举类的使用</h2><ol><li>枚举类的理解:类的对象只有有限个,确定的,就为枚举类</li><li>当需要定义一组常量时,强烈建议使用枚举类</li><li>如果枚举类中只有一个对象,则可以作为单例模式的实现方式<h2 id="2）使用enum类型来定义常量"><a href="#2）使用enum类型来定义常量" class="headerlink" title="2）使用enum类型来定义常量"></a>2）使用enum类型来定义常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">con</span></span>&#123;<br>       con_A,<br>       con_B,<br>       con_C<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="3-枚举类的常用方法"><a href="#3-枚举类的常用方法" class="headerlink" title="3)枚举类的常用方法"></a>3)枚举类的常用方法</h2></li></ol><table><thead><tr><th>方法名称</th><th>作用</th><th>使用方法</th></tr></thead><tbody><tr><td>values()</td><td>将枚举类型的成员以数组的形式返回(也可以通过该方法获取枚举类类型的成员)</td><td>枚举类型名称.values()</td></tr><tr><td>valuesOf()</td><td>将普通字符串转换为枚举实例</td><td>枚举类型名称.valueOf(“abc”)</td></tr><tr><td>compareTo()</td><td>比较两个枚举对象在定义时的顺序(正值表示在参数在调用该方法的枚举对象之前,负值则是之后)</td><td>枚举对象.compareTo()</td></tr><tr><td>ordinal</td><td>得到枚举成员的位置索引</td><td>枚举对象.ordinal()</td></tr></tbody></table><p><strong>构造函数</strong>在写枚举类构造方法的时候权限修饰符应该为private;</p><h1 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h1><h2 id="1）初识泛型"><a href="#1）初识泛型" class="headerlink" title="1）初识泛型"></a>1）初识泛型</h2><p>把元素的类型设计成一个参数,这个参数就是泛型</p><p><strong>如果集合不使用泛型</strong><br><img src="https://img-blog.csdnimg.cn/68c0d9e5ae994fa7b6fe68aac9d031b8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>就会出现种种问题</p><p><strong>使用泛型</strong><br><img src="https://img-blog.csdnimg.cn/be934e7a5d4742d2b5ed5dd00c6a31b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>问题迎刃而解</p><p>然后输出(这里复习一下增强for循环和迭代器)<br>问题迎刃而解</p><p>然后输出(这里复习一下增强for循环和迭代器)<br><img src="https://img-blog.csdnimg.cn/9329474c0533440ebf115928046fc335.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>注意点</strong>:集合中&lt;&gt;中填泛型时不能时基本数据类型(比如int),必须是一个类,例如是int需要填包装类Integer</p><h2 id="2）自定义泛型"><a href="#2）自定义泛型" class="headerlink" title="2）自定义泛型"></a>2）自定义泛型</h2><h3 id="1、泛型类"><a href="#1、泛型类" class="headerlink" title="1、泛型类"></a>1、泛型类</h3><p>这里的T相当于一个参数，就当成其他的数据类型一样用<br><img src="https://img-blog.csdnimg.cn/7aa9143c908c48df8647741b1ce412f1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/30e83d4922f74deca89cbb8531a87716.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>     <span class="hljs-comment">//如果定义了泛型类，实例化没有指明类的泛型，则认为泛型类型为Object类型</span><br>     <span class="hljs-comment">//要求：如果大家定义了类是带泛型的建议在实例化要指明类的泛型</span><br>     Order order = <span class="hljs-keyword">new</span> Order();<br>     order.setOrderT(<span class="hljs-number">123</span>);<br>     order.setOrderT(<span class="hljs-string">&quot;ABC&quot;</span>);<br>     <span class="hljs-comment">//建议：实例化时指明类的泛型</span><br>     Order&lt;String&gt; order1 = <span class="hljs-keyword">new</span> Order&lt;String&gt;(<span class="hljs-string">&quot;orderAA&quot;</span>)<span class="hljs-comment">//这里有一个构造方法传参，String就是传入类的泛型参数</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>如果子类在继承带泛型的父类的时候,指明了泛型的类型,则在实例化子类的对象时,不再需要指明泛型</p></li><li><p>静态方法中不能使用泛型</p></li><li><p>异常类不能是泛型类</p></li></ul><h3 id="3）泛型方法"><a href="#3）泛型方法" class="headerlink" title="3）泛型方法"></a>3）泛型方法</h3><p>泛型方法里的泛型参数和泛型类里的泛型参数是没有关系的<br><img src="https://img-blog.csdnimg.cn/d15474f7b5604bd8bb23536964387233.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>上图中因为返回的时List类型的所以还有个List，特别注意标明是泛型方法要有个 &lt; E &gt;<img src="https://img-blog.csdnimg.cn/3ef22290e2d44c9db78b22e335c3d510.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>测试泛型方法</strong><br><img src="https://img-blog.csdnimg.cn/2747ac3308cf487eb0c795e61012ea5d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>泛型方法是可以声明为静态的.原因就是:泛型参数实在调用方法时确定的,并非是在实例化类时确定的</p><h3 id="4）通配符的使用"><a href="#4）通配符的使用" class="headerlink" title="4）通配符的使用"></a>4）通配符的使用</h3><p><strong>通配符  :   ?</strong><br><img src="https://img-blog.csdnimg.cn/b0914c990d874f71830b8d65c2ed2283.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(List&lt;?&gt; list)</span></span>&#123;<br>   Iterator&lt;?&gt; iterator = list.iterator();<br>   <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>    Object obj = iterator.next;<span class="hljs-comment">//这里当然不能用 ? obj 声明啦</span><br>    System.out.println(obj);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>有限制条件的通配符的使用</strong></p><ul><li><p>? extends Person 向下限制,只接受Person类以下的类型</p></li><li><p>? super Person  向下限制,只接受Person类以上的类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实例</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">(A&lt;? extends List&gt; a)</span></span>&#123;<br>&#125;<br><span class="hljs-comment">//实例</span><br>List&lt;? extends list&gt; list = <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c2713d96c08b43d4b74dd41f1960c987.png"><br>比如在这里 list1 = list5 就会报错</p><h1 id="五、注解"><a href="#五、注解" class="headerlink" title="五、注解"></a>五、注解</h1><h2 id="1）初识注解"><a href="#1）初识注解" class="headerlink" title="1）初识注解"></a>1）初识注解</h2><p><img src="https://img-blog.csdnimg.cn/8ce3962f19fd425b8075e969920cd5dc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/7cfd5e06f6424f8798a66e4eddf0ce04.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="2）元注解"><a href="#2）元注解" class="headerlink" title="2）元注解"></a>2）元注解</h2><p>元注解主要是在定义自定义的注解的时候用<br><img src="https://img-blog.csdnimg.cn/974730ee77f84a9d829754eb1cbede15.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3）自定义注解"><a href="#3）自定义注解" class="headerlink" title="3）自定义注解"></a>3）自定义注解</h2><p><img src="https://img-blog.csdnimg.cn/6b639f21f7bb494e8b6f55d6dea107d6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/175034b2819743e980885c25ef169f22.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//自定义注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03</span></span>&#123;<br>   <span class="hljs-comment">//注解可以显示赋值，如果没有默认值，我们就必须给注解赋值</span><br>   <span class="hljs-meta">@MyAnnotation2(age = 18,name = &quot;陈帅&quot;)</span>;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;&#125;<br>   <span class="hljs-meta">@Target(&#123;Element.TYPE,Elementtype.NETHOD&#125;)</span><br>   <span class="hljs-meta">@Retention(RetenionPolicy.RUNTIME)</span><br>   <span class="hljs-meta">@interface</span> MyAnnotation2&#123;<br>   <span class="hljs-comment">//注解的参数： 参数类型 + 参数名();</span><br>   <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<span class="hljs-comment">//这里设置默认值为空，这样就不用传参了</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span></span>;<br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -1 </span>;<span class="hljs-comment">//设置默认值为-1</span><br>   String[] <span class="hljs-function">schools <span class="hljs-title">default</span><span class="hljs-params">(<span class="hljs-string">&quot;西柚牛逼&quot;</span>,<span class="hljs-string">&quot;Mercury最帅&quot;</span>)</span></span>;    <br>   &#125;<br>  <span class="hljs-meta">@Target(&#123;Element.TYPE,Elementtype.NETHOD&#125;)</span><br>  <span class="hljs-meta">@Retention(RetenionPolicy.RUNTIME)</span><br>  <span class="hljs-meta">@interface</span> MyAnnotation3&#123;<br>  <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>如果有default即有默认值,可以不用赋值</strong></p><h1 id="六、反射"><a href="#六、反射" class="headerlink" title="六、反射"></a>六、反射</h1><h2 id="1-关于静态语言和动态语言"><a href="#1-关于静态语言和动态语言" class="headerlink" title="1)关于静态语言和动态语言"></a>1)关于静态语言和动态语言</h2><p><img src="https://img-blog.csdnimg.cn/06b582dc6b7c4367a9c8ea7e61107469.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="2-初识反射"><a href="#2-初识反射" class="headerlink" title="2)初识反射"></a>2)初识反射</h2><p><img src="https://img-blog.csdnimg.cn/625231f3ad644f35bbb7545c494424f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/0033de28da924e1097c0248f28883f2f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//什么反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>     <span class="hljs-comment">//通过反射获取类的Test的对象</span><br>     Class c1 = class.forName(<span class="hljs-string">&quot;com.kuang.reflection.User&quot;</span>);<span class="hljs-comment">//User在这个位置</span><br>     System.out.println(c1);<br><br>     Class c2 = class.forName(<span class="hljs-string">&quot;com.kuang.reflection.User&quot;</span>);<br>     Class c3 = class.forName(<span class="hljs-string">&quot;com.kuang.reflection.User&quot;</span>);<br>     Class c4 = class.forName(<span class="hljs-string">&quot;com.kuang.reflection.User&quot;</span>);<br>     <br>     <span class="hljs-comment">//一个类在内存中只有一个class类</span><br>     <span class="hljs-comment">//一个类被加载后，类的整个结构都会被封装在class对象中</span><br>      System.out.println(c2.hashcode()); <br>      System.out.println(c3.hashcode()); <br>      System.out.println(c4.hashcode());<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;...&#125;<span class="hljs-comment">//在这里就不详细列出来了</span><br></code></pre></td></tr></table></figure><h2 id="3-获取class的实例"><a href="#3-获取class的实例" class="headerlink" title="3)获取class的实例"></a>3)获取class的实例</h2><p><img src="https://img-blog.csdnimg.cn/a57496e982f844cdac40a6601605fbbb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>实操获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundExcepion</span>&#123;<br>    Person person = <span class="hljs-keyword">new</span> Student();<br>    System.out.println(<span class="hljs-string">&quot;这个人是&quot;</span> + person.name);<br>    <br>    <span class="hljs-comment">//方式一：通过对象获取</span><br>    Class c1 = person.getClass();<br>    System.out.println(c1.hashcode());<br><br>    <span class="hljs-comment">//方式二：forname获取</span><br>    Class c2 = Class.forname(<span class="hljs-string">&quot;com.reflection.Student&quot;</span>)<br>    System.out.println(c2.hashcode());<br>    <br>    <span class="hljs-comment">//方式三：通过类名.class获得</span><br>    Class c3 = Student.class;<br>    System.out.println(c3.hashcode());<br><br>  &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;...&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;...&#125;<br></code></pre></td></tr></table></figure><h2 id="4-关于类加载器"><a href="#4-关于类加载器" class="headerlink" title="4)关于类加载器"></a>4)关于类加载器</h2><p><img src="https://img-blog.csdnimg.cn/d8f4ce0e5fc74b6d88bf26853d0f0b27.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获得类的信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>     <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c1</span> </span>= Class.forname(<span class="hljs-string">&quot;com.kuang.reflection.User&quot;</span>);<br>     User user = <span class="hljs-keyword">new</span> user();<br>     c1 = user.getclass();<br><br>     <span class="hljs-comment">//获取类的名字</span><br>     System.out.println(c1.getName);<span class="hljs-comment">//获取类名 +  包名</span><br>     System.out.println(c1.getSimpleName());<span class="hljs-comment">//获取类名</span><br><br>     <span class="hljs-comment">//获得类的属性</span><br>     Field[] fields = c1.getFields();<span class="hljs-comment">//只能找到public属性的</span><br><br>     fields = c1.getDeclaredFields();<br>     <span class="hljs-keyword">for</span>(Field field : fields)&#123;<br>       System.out.println(field);<br>      <br>     &#125;<br>    <br>     <span class="hljs-comment">//获得类的方法</span><br>     Method[] methods = c1.getMethods();<br>     <span class="hljs-keyword">for</span>(Method method : methods)&#123;<br>       System.out.println(<span class="hljs-string">&quot;正常的&quot;</span>+method);<br>     &#125;<br>    methods = c1.getDeclaredMethods();<br>    <span class="hljs-keyword">for</span>(Method method : method)&#123;<br>       System,out.println(<span class="hljs-string">&quot;getDeclaredMethods&quot;</span>+method);<br>    &#125;<br>    <br>    <span class="hljs-comment">//获取指定方法</span><br>    Method getName = c1.getMethod(<span class="hljs-string">&quot;getName&quot;</span>,<span class="hljs-keyword">null</span>);<span class="hljs-comment">//获取getName这个方法  getname方法没有参数</span><br>    Method setName = c1.getMethod(<span class="hljs-string">&quot;setName&quot;</span>,String.class);<br>    <span class="hljs-comment">//这里要丢一下参数,编译器才知道你要什么方法   </span><br>    <span class="hljs-comment">//这里是调用setname的String重载，所以要丢一个String.class进去</span><br>    System.out.println(getName);<br>    System.out.println(setName);<br>   &#125;<br><br>   <span class="hljs-comment">//获得指定构造器</span><br>   Constructor[] constructors = c1.getConstructors();<br>   <span class="hljs-keyword">for</span>(Constructor constructor : constructors)&#123;<br>      System.out.println(constructors);<br>   &#125;<br>&#125;<br><br>  <span class="hljs-comment">//获得指定的构造器</span><br>  Constructor declaredConstructor = c1.getDeclaredConstructor(String.class,<span class="hljs-keyword">int</span>.class,<span class="hljs-keyword">int</span>.class);<br>  System.out.println(declaredConstructor);<br></code></pre></td></tr></table></figure><h2 id="5-通过反射创建对象"><a href="#5-通过反射创建对象" class="headerlink" title="5)通过反射创建对象"></a>5)通过反射创建对象</h2><p><img src="https://img-blog.csdnimg.cn/4c7927bffcfe4a9e84f24b8e22f8f998.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException,IllegalAccessException</span>&#123;<br> <span class="hljs-comment">//获取class对象</span><br> Class c1 = Class.forname(<span class="hljs-string">&quot;com.reflection,User&quot;</span>);<br><br> <span class="hljs-comment">//1.普通创建一个对象</span><br> User user = (user)c1.newInstance(); <span class="hljs-comment">//本质是调用了类的无参构造</span><br> System.out.println(user);<br> <br>  <span class="hljs-comment">//2.获得指定的构造器创建对象</span><br>  Constructor declaredConstructor = c1.getDeclaredConstructor(String.class,<span class="hljs-keyword">int</span>.class,<span class="hljs-keyword">int</span>.class);<br>  User user2 = (user)constructor.newInstance(<span class="hljs-string">&quot;陈帅&quot;</span>,<span class="hljs-number">001</span>,<span class="hljs-number">18</span>);  <span class="hljs-comment">//有参构造</span><br>  System.out.println(user2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5d3aa1cba3ef405e958d7c9bd4eafbcf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">User user3 = (User)c1.newInstance();<br><span class="hljs-comment">//通过反射获取一个方法</span><br>Method setName = c1.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>,String.class);<br><br><span class="hljs-comment">//invoke:激活</span><br><span class="hljs-comment">//（对象，“方法的值”）</span><br>setName.invoke(user3,<span class="hljs-string">&quot;陈帅&quot;</span>);<br>System.out.println(user3.getName());<br><br><span class="hljs-comment">//通过反射操作属性</span><br>User user4 = (User)c1.newInstance();<br>Field name = c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br><br><span class="hljs-comment">//不要直接操作私有属性，我们需要关闭程序的安全检测，属性或者方法的setAccessible(true);</span><br>name.setAccessible(<span class="hljs-keyword">true</span>);<br>name.set(user4,<span class="hljs-string">&quot;陈帅牛逼&quot;</span>);<br>System.out.println(user4.getName());<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1ad8e2dc852c4965ae86e77984186978.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>实操</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xingneng</span> </span>&#123;<br>    <span class="hljs-comment">//普通方法调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        user user = <span class="hljs-keyword">new</span> user();<br>        <span class="hljs-keyword">long</span> starTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class="hljs-keyword">long</span> endtime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;普通方法执行10次&quot;</span>+(endtime-starTime)+ <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//反射方法调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        user user = <span class="hljs-keyword">new</span> user();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">long</span> starTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) &#123;<br>           getName.invoke(user,<span class="hljs-keyword">null</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> endtime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方法执行10次&quot;</span>+(endtime-starTime)+ <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//反射方法调用 关闭检测</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        user user = <span class="hljs-keyword">new</span> user();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>);<br>        getName.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">long</span> starTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000000</span>; i++) &#123;<br>            getName.invoke(user,<span class="hljs-keyword">null</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> endtime = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射方法执行10次&quot;</span>+(endtime-starTime)+ <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, NoSuchMethodException, IllegalAccessException </span>&#123;<br>        test();<br>        test2();<br>        test3();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>程序运行结果<br><img src="https://img-blog.csdnimg.cn/50f06659bbd349dbbbfa73f39a525f7f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_14,color_FFFFFF,t_70,g_se,x_16"><br>所以关闭检测可以提升程序的效率</p><h2 id="6-反射操作泛型"><a href="#6-反射操作泛型" class="headerlink" title="6)反射操作泛型"></a>6)反射操作泛型</h2><p><img src="https://img-blog.csdnimg.cn/545334e3e7e44e99aeaac2040441c4d8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/52490f31242f4386affa12a5482e9212.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="7-反射操作注解"><a href="#7-反射操作注解" class="headerlink" title="7)反射操作注解"></a>7)反射操作注解</h2><p>getAnnotations</p><p>getAnnotation</p><p><img src="https://img-blog.csdnimg.cn/bc10279420594b3c8d16b919d3ca2f71.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="七、多线程"><a href="#七、多线程" class="headerlink" title="七、多线程"></a>七、多线程</h1><h2 id="1、实现多线程"><a href="#1、实现多线程" class="headerlink" title="1、实现多线程"></a>1、实现多线程</h2><p>多线程在我目前开发中用的不算多，这里知识简单的梳理一下多线程的知识点。<br>实现    多线程的方法在Java中有两种，一种是继承thread类，还有一种方法就是重写runable方法</p><h3 id="1-、继承thread类"><a href="#1-、继承thread类" class="headerlink" title="1)、继承thread类"></a>1)、继承thread类</h3><p>这种方法就是写一个类来继承thread类，在这个类中还需要写一个run方法来运行这个线程，然后在主类中就可以创建这个线程然后启动该线程。以代码为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-comment">//创建一个类继承thread类</span><br><span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Thread1</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.name=name;<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//需要在该线程里面执行的方法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;运行  :  &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep((<span class="hljs-keyword">int</span>) Math.random() * <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>       <br>&#125;<br>&#125;<br><br><span class="hljs-comment">//主类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>Thread1 mTh1=<span class="hljs-keyword">new</span> Thread1(<span class="hljs-string">&quot;A&quot;</span>);<span class="hljs-comment">//创建一个线程的对象</span><br>Thread1 mTh2=<span class="hljs-keyword">new</span> Thread1(<span class="hljs-string">&quot;B&quot;</span>);<br>mTh1.start();<span class="hljs-comment">//启动该线程</span><br>mTh2.start();<br> <br>&#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>在线程运行的时候，需要注意下：两个线程启动时，在处理机上是并发运行的，因此线程输出的顺序并不确定。(所以在做PTA上面的题可能多提交几遍说不定就可以了。)</p><h3 id="2-重写Runable接口"><a href="#2-重写Runable接口" class="headerlink" title="2) 重写Runable接口"></a>2) 重写Runable接口</h3><p>具体需要子类实现Runable接口，然后重写里面的run方法就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Thread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><span class="hljs-comment">//继承</span><br><span class="hljs-keyword">private</span> String name;<br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Thread2</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name=name;<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重写run方法</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;运行  :  &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep((<span class="hljs-keyword">int</span>) Math.random() * <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Thread2(<span class="hljs-string">&quot;C&quot;</span>)).start();<span class="hljs-comment">//在主类中创建这个线程并且启动</span><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Thread2(<span class="hljs-string">&quot;D&quot;</span>)).start();<br>&#125;<br> <br>&#125;<br><br></code></pre></td></tr></table></figure><p>线程有好几种状态，如: 阻塞状态，准备状态等等，这一部分的内容以及关于线程的调度问题具体请参照操作系统部分</p><h2 id="2、多线程常用的函数"><a href="#2、多线程常用的函数" class="headerlink" title="2、多线程常用的函数"></a>2、多线程常用的函数</h2><h3 id="1-start-函数"><a href="#1-start-函数" class="headerlink" title="1) start() 函数"></a>1) start() 函数</h3><p>主要应用于在主类中启动该线程。(需要先new 一个多线程的对象。</p><h3 id="2-sleep-函数"><a href="#2-sleep-函数" class="headerlink" title="2) sleep()函数"></a>2) sleep()函数</h3><p>sleep(long millils)  在指定的毫秒数内让线程休眠</p><h3 id="3-join-函数"><a href="#3-join-函数" class="headerlink" title="3) join()函数"></a>3) join()函数</h3><p>等待该线程的终止</p><h3 id="4-yield-函数"><a href="#4-yield-函数" class="headerlink" title="4) yield()函数"></a>4) yield()函数</h3><p>暂停当前正在执行的线程对象，让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会</p><h3 id="5-setPriority-函数"><a href="#5-setPriority-函数" class="headerlink" title="5) setPriority()函数"></a>5) setPriority()函数</h3><p>更改线程的优先级</p><h3 id="6-interrupt-函数"><a href="#6-interrupt-函数" class="headerlink" title="6) interrupt()函数"></a>6) interrupt()函数</h3><p>向线程发出一个中断信号，让线程在无限等待的时候能够抛出，从而结束线程(并不是中断哪个线程)</p><h3 id="7-wait-函数"><a href="#7-wait-函数" class="headerlink" title="7) wait()函数"></a>7) wait()函数</h3><p>Obj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){…}语句块内。</p><h2 id="3、线程同步"><a href="#3、线程同步" class="headerlink" title="3、线程同步"></a>3、线程同步</h2><h3 id="1）、synchronized关键字"><a href="#1）、synchronized关键字" class="headerlink" title="1）、synchronized关键字"></a>1）、synchronized关键字</h3><ul><li>synchronized关键字的作用域有二种：</li></ul><ol><li>是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；</li><li>是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。</li></ol><ul><li><p>除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/<em>区块</em>/}，它的作用域是当前对象；</p></li><li><p>synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；</p></li></ul><p>总的说来，synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE</title>
    <link href="/2021/09/01/JavaSE/"/>
    <url>/2021/09/01/JavaSE/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><ul><li>Java所有的组成部分都需要有名字，类名，变量名以及方法名都被称为标识符 ，所有的标识符都应该以英文字母(a-z,A-Z)，美元符($)，或者下划线(_)开头</li><li>首字母之后可以是字母，美元符下划线或数字的任何字符组合</li><li>不能使用关键字作为标识符</li><li>标识符是大小写敏感的</li><li>可用使用中文命名，但是不建议</li></ul><p>下面的标识符是合法的：<br>myName，My_name，Points，$points,<em>sys_ta，OK，_23b，_3</em><br>下面的标识符是非法的：<br>#name，25name，class，&amp;time，if</p><p>Java 9规定：不允许单独使用下划线作为分隔符。<br>Java 的关键字加上goto const true false nulll 一共有53个关键字和保留字，都不能作为Java的标识符。</p><h2 id="Java数据的类型"><a href="#Java数据的类型" class="headerlink" title="Java数据的类型"></a>Java数据的类型</h2><ul><li>基本类型</li><li>引用类型<br><img src="https://img-blog.csdnimg.cn/e6e35e613e2041c69ac93c8df2bc1dc7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ul><p><strong>注意</strong></p><ul><li>其中float需要float需要这样来声明 float  = 0.1f;float是有限,离散,舍入误差,大约,接近但不等于,因此最好不要用浮点数进行 == 这样的确定是否相等的操作,会有精度的损失,可以采用BigDecimal数学工具类;</li><li>String是引用类型,不是基本类型;</li><li>Java和C不同的是,Java采用Unicode编码,范围是 0-65536;</li><li>布尔类型的初始值为false</li><li>在C语言中，char类型占一个字节，在Java中char类型占2个字节。</li><li>比较字符串时最好使用str.equal()方法进行比较</li></ul><hr><p>注意点<br><img src="https://img-blog.csdnimg.cn/4e8976c0dc134f598ed04186955c3669.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>上图中,false的原因是因为两个字符串在不同的对象中,因此为false,而后一个没有对象,在同一片内存中,因此为true;</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>类型转换主要有两种类型转换<br><img src="https://img-blog.csdnimg.cn/310a5a405c97449bbadc22e2ed9d0fc1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>byte只有128位<br>数字间是可以用下划线间隔的,更加方便阅读数字<br><img src="https://img-blog.csdnimg.cn/fead415a853c4ff384b1f8b560ce3574.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="https://img-blog.csdnimg.cn/ec452ab51a1f44ddb7c76d484481c458.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>分为实例变量和局部变量</p><ul><li>局部变量直接就可以使用</li><li>实例变量必须通过对象来调用</li><li>加上了static即成为了类变量,跟类一起出现消失,可以直接通过类调用</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><img src="https://img-blog.csdnimg.cn/08bcf1b5227e4011bbb720bbb034b62c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="https://img-blog.csdnimg.cn/068a9c341f5e41c7ab75719f26837d7f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>尤其应该注意一下位运算<br>&lt;&lt; 左移一位即 原数*2    ;   左移三位即原数 *2 *2 *2  是次方的关系<br>&lt;&lt; 右移则同理<br><img src="https://img-blog.csdnimg.cn/db8bdfbbb68641eb80bfef61ba8e8929.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><blockquote><p>插入一个idea的快捷键<br>ctrl+D 复制当前行到下一行</p></blockquote><h2 id="关于注释时的参数"><a href="#关于注释时的参数" class="headerlink" title="关于注释时的参数"></a>关于注释时的参数</h2><ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@异常抛出情况<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2>Java使用Scanner对象进行输入操作<br><img src="https://img-blog.csdnimg.cn/df7cc3e3a47f4176b0bd9d2fe390af13.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span></span>&#123;<br>   <span class="hljs-comment">//创建一个扫描器对象,用于接收键盘数据</span><br>   Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>   System.out.println(<span class="hljs-string">&quot;使用next方式接收:&quot;</span>);<br>   <span class="hljs-comment">//判断用户有没有输入信息,这个在这里没有必要,主要是后面的循环部分用得比较多</span><br>   <span class="hljs-keyword">if</span>(Scanner.hasNext())&#123;<br>   <span class="hljs-comment">//使用next方式进行接收</span><br>     String str = Scanner.next();<span class="hljs-comment">//String str = Scanner.nextLine();</span><br>     System.out.println(<span class="hljs-string">&quot;输出的内容为:&quot;</span>+str);<br>   &#125;<br>   <span class="hljs-comment">//养成好习惯,用完后关闭scanner;</span><br>   scanner.close();<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>关于next()和nextLine()</strong><br>next()会以空格结束,而nextLine()以enter结束,所以可以输入带空格的字符串</p><p>输入单个字符 <strong>char c = sc.next().charAt(0);</strong></p><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><p>增强for循环主要用于输出,因为它没有下表,不方便操作数据<br><img src="https://img-blog.csdnimg.cn/18b541fcfaf641dfac52a9af7fbe3f9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x:nums)&#123;<br>    System.out.println(x);<br>&#125;<span class="hljs-comment">//这里x表示循环时的数据名称类似i ; nums则是循环的数组名称</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ants:nums[])&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x:ants)&#123;<br>       System.out.println(x);<br>  &#125;<br>&#125;<span class="hljs-comment">//输出二维数组</span><br></code></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><img src="https://img-blog.csdnimg.cn/981d419a11ca40be9f167b58e742a04d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>熟记重载的规则<br><img src="https://img-blog.csdnimg.cn/7c0525834acb4ebdae262068b8c2f14e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p><img src="https://img-blog.csdnimg.cn/d36134a7fce94940a6e7484f6812071b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>可变参数的使用<br><img src="https://img-blog.csdnimg.cn/92dccd58cfea49fcaec42f24b9ed7ab2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>其实本质就是数组</strong></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组和C语言类似，就是声明时有所不同<br><img src="https://img-blog.csdnimg.cn/e135da64d534496189b136dc877ce460.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>Java的内存</strong><br><img src="https://img-blog.csdnimg.cn/2bf98bda1fa84718a7fa2e8c5c52c58b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="数组三种初始化"><a href="#数组三种初始化" class="headerlink" title="数组三种初始化"></a>数组三种初始化</h2><p>即有</p><ol><li>静态初始化</li><li>动态初始化</li><li>隐式初始化<br><img src="https://img-blog.csdnimg.cn/c6773a201d4b4212b8d865274f606f0c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ol><p><strong>特殊点:</strong> 布尔型的初始为false;</p><p>Java里数组可以通过　<strong>shuzuname.length</strong>　来直接获得长度;</p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><p>多维数组的其他部分皆于C语言相同,此处不再赘述;</p><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p><img src="https://img-blog.csdnimg.cn/a6010c745ca744d0bc6874a948705d73.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>toString()方法</strong><br><img src="https://img-blog.csdnimg.cn/e27eb4f46d3a444c9e8e04ce1c25d228.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>.sort() 排序方法</strong>  默认为升序;<br><strong>.fill() 填充方法</strong>  参数可以填(数组名,起始点,终止点,待填充的数字) 若不填起始点,终止点则会全部填充</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><img src="https://img-blog.csdnimg.cn/82a710aae75e4e44aae79715fd167d5d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>本质:以类的方式组织代码,以对象的组织(封装)数据</strong></p><p><strong>三大特性</strong></p><ol><li><p>封装</p></li><li><p>继承</p></li><li><p>多态</p></li></ol><hr><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>emmm…….这部分没啥写的</p><blockquote><p>关于静态方法:   静态方法可以直接调用,非静态方法必须将类实例化后才能通过对象调用此方法</p></blockquote><p><img src="https://img-blog.csdnimg.cn/6630c03d3dcf4c8482727a2ba2ea9f3e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><strong>引用传递</strong></p><p>即传参时传递一个对象 相当于指针,在方法中是<strong>可以改变参数</strong>的</p><p><strong>构造器</strong><br>默认有一个无参的,在new对象时就是调用,自己写了有参的之后需要把无参的构造方法加上,不然会损失无参构造.</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>只需要记住.属性私有(private)<br>则需要getter和setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//getter方法</span><br>   <span class="hljs-keyword">this</span>.age = age;<br>   <span class="hljs-keyword">return</span> age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span></span>&#123;<span class="hljs-comment">//setter方法</span><br>   <span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果是private非静态属性依旧需要new一个对象才能访问</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><img src="https://img-blog.csdnimg.cn/80d57daec6f94eff9658fd79f8873682.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>java只有单继承:简单的理解 一个儿子一个爸爸,一个爸爸多个儿子</p><p><img src="https://img-blog.csdnimg.cn/bb4aee66deba42269bc802c2ab7b78d7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>所有的类都是继承了object类的</p><p>继承之后,子类可以<strong>直接调用</strong>父类的方法,即使是没有static</p><p><strong>私有</strong>的方法是无法被继承的，即通过super也调<strong>不</strong>了，如上图所示就会报错<br><img src="https://img-blog.csdnimg.cn/18ef23a4825a48ceb99cb2d7d7727d7e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>在new子类的时候，也调用了父类的无参构造，在这里   super()；是隐藏代码<br><img src="https://img-blog.csdnimg.cn/146a1e925fa14bc98862a2072e698bfa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>父类的构造器必须在子类构造器的第一行，这里不写也没有关系，反正都是隐藏代码</p><p><strong>super的注意点</strong></p><ol><li>super调用父类的构造方法,必须在构造方法的第一位</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法</li></ol><p>和 this 比较</p><ol><li>代表的对象不同<br> this：本身调用者这个对象<br>   super：代表父类对象的应用</li><li>前提<br>this没有继承也可以使用<br>super：只能在继承关系下才能使用</li><li>构造方法<br>this();本类构造<br>super();父类的构造；<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><img src="https://img-blog.csdnimg.cn/71db29ee92db4294b98f8727b9740986.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>方法的重写<br>重写都是方法重写和属性无关<img src="https://img-blog.csdnimg.cn/3eb05644954848bc97909be10171bfcc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>如上图，static方法是无法被重写的，相当于两个方法，这时候能调什么方法都看左边是什么类型<br><img src="https://img-blog.csdnimg.cn/2fac47f4ae0c4cf38cd4e9b35e24995e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>重写后一般会有@override注释<br>并且重写只能是public方法，如果是私有方法，则会出现如上图所示的报错</li></ol><p><strong>关于重写</strong></p><ol><li>需要有继承关系，子类重写父类的方法</li><li>方法名必须相同</li><li>修饰符：范围可以扩大但不能缩小 publci &gt; Protected &gt;defalt&gt;private</li><li>抛出的异常：范围可以被缩小，但不能扩大：ClassNotFoundException –&gt;Exception</li><li>子类的方法和父类必要一致，方法体不同</li></ol><hr><p> <img src="https://img-blog.csdnimg.cn/3d28d93f36f946e08d935cf4008b29a6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>对象能执行那种方法主要看左边是什么类型和右边关系不大 要想调用,可以强制转换<br><img src="https://img-blog.csdnimg.cn/71e545f92fbd4be7a58861efe169e3f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>如上图：强制转换(上向下)就可以调用了<br><strong>多态注意事项</strong></p><ol><li>多态是方法的多态，属性没有多态</li><li>父类和子类，有联系  类型转换异常 ClassCastException</li><li>存在条件：继承关系，方法需要重写，父类引用指向子类对象 Father f1 = new Son();</li></ol><p><strong>不可以重写的</strong></p><ol><li>static 方法，属于类，它不属于实例</li><li>final常量</li><li>private方法</li></ol><p><strong>instanceof关键字</strong><img src="https://img-blog.csdnimg.cn/a6f01d41808f4acfb0ffd65b216736b9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>instanceof关键字就是用来判断子父类的关系的，值得注意的是再上图中Object是student new出来的所以在Teacher 那里依然是false</p><h2 id="static-详解"><a href="#static-详解" class="headerlink" title="static 详解"></a>static 详解</h2><p><img src="https://img-blog.csdnimg.cn/ff85d48a42c74b50abfb3494f14c0f12.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>简单的来说就是</p><ul><li><p>非可以调静</p></li><li><p>静不可以调非</p></li><li><p>main函数也是静，所以不可以直接调用非静的方法</p></li></ul><p><strong>关于代码块</strong><br><img src="https://img-blog.csdnimg.cn/223115825d5b4e9c9a7143a3d536adcc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>以下顺序是代码执行的顺序</p><ol><li>静 只执行一次</li><li>匿名</li><li>构造方法<br>构造方法竟是最后执行的，令人震惊<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><img src="https://img-blog.csdnimg.cn/4b9913a75b954ceab0ef0491ab30caaa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><img src="https://img-blog.csdnimg.cn/2b6235ed0a4d488ba5afdf2ba6b9fe61.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/356a0a672d6c48fdb4b011d88fd5b7fb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ol><ul><li><p>接口中的所有定义方法都是抽象的public abstract</p></li><li><p>在接口中常量都是public static final前缀</p></li><li><p>类可以实现接口implements</p></li><li><p>实现了接口中的类,就必须实现接口中的方法</p></li><li><p>接口可以实现多就继承</p></li></ul><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span>,<span class="hljs-title">TimService</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p><img src="https://img-blog.csdnimg.cn/df88ae293d614273bd77ab0ad070bba2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>成员内部类</strong><br><img src="https://img-blog.csdnimg.cn/fa07bb0be2794fc483d400434cad34c4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Outer.Inner inner = outer.<span class="hljs-function">new <span class="hljs-title">Inner</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//实例化一个内部类</span><br></code></pre></td></tr></table></figure><p>内部类可以获得外部类的私有属性</p><p><img src="https://img-blog.csdnimg.cn/7e178dbc5da64c1c8d9b897ae802ac92.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>一个Java类中可以有多个class类，但是只能有一个public class类（这不叫内部类）</p><p><strong>静态内部类</strong><br><img src="https://img-blog.csdnimg.cn/0c95a4ee1e054ba6a7b2e4ba277b094a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>局部内部类</strong><br><img src="https://img-blog.csdnimg.cn/2f7d902939434e20b89401cf3bde7d07.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>匿名内部类</strong><br><img src="https://img-blog.csdnimg.cn/2479caca973045f7965e87f169bad1b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="https://img-blog.csdnimg.cn/d0f7aed9cd5c4aea973e67698d955aec.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/aba73c6f1fd94cbe83399a5221723439.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/6b19ca19ea2b4820827131e1c6eb7911.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>最大就是throwable<img src="https://img-blog.csdnimg.cn/113158eeca0d4cafaee7d8e2c8126da0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/9b7ea35410fd4a63989454daaa6f61bb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/24853f5359e14a16a802aa39c865a8d6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="局部内部类"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>       <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">try</span>&#123;<span class="hljs-comment">//try监控区域</span><br>          System.out.println(a/b);<br>       &#125;<span class="hljs-keyword">catch</span>(ArithmeticException e)&#123;<br>          System.out.println(<span class="hljs-string">&quot;程序出现异常，变量b不能为0&quot;</span>);<br>       &#125;<span class="hljs-keyword">finally</span>&#123;<span class="hljs-comment">//处理善后工作</span><br>          System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);<br>       &#125;<br>     <br>   &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>finally可以不要,一般用于处理关闭IO流的相关操作</p><p>idea快捷键 ctrl+alt+T    try catch包裹代码</p><p><img src="https://img-blog.csdnimg.cn/075d7c2d3c6b4345b3d2f9681b119693.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p><img src="https://img-blog.csdnimg.cn/c2d45eb5285f466ca34f706235da61d5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/30e4c48cf1ba409499e470e9366ce709.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/180592be91c845729f47d99bc5dbaf4c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/6ccf4da3daa34ba392ffe2c42475035c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>JavaSE结束，后面开始Java多线程和注解反射</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM</title>
    <link href="/2021/07/15/SSM/"/>
    <url>/2021/07/15/SSM/</url>
    
    <content type="html"><![CDATA[<p>(<strong>写在开头：本文主要依据黑马程序员SSM框架教程PPT资料编写</strong>)</p><h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><h2 id="Spring的基本概念"><a href="#Spring的基本概念" class="headerlink" title="Spring的基本概念"></a>Spring的基本概念</h2><p>   loC  反转控制<br>    AOP 面向切面编程</p><h2 id="Spring的快速入门"><a href="#Spring的快速入门" class="headerlink" title="Spring的快速入门"></a>Spring的快速入门</h2><p><img src="https://img-blog.csdnimg.cn/20210715110221230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><h3 id="spring的基本开发步骤"><a href="#spring的基本开发步骤" class="headerlink" title="spring的基本开发步骤"></a>spring的基本开发步骤</h3><p>   1.导入Spring开发的基本包坐标</p><p>   2.编写Dao接口和实现类</p><p>   3.创建Spring核心配置文件</p><p>   4.在Spring配置文件中配置UserDaoImpl</p><p>   5.使用Spring的API获得Bean实例</p><p>&#8195;<strong>快速入门步骤</strong></p><p>   1.导入坐标</p><p>   2.创建Bean</p><p>   3.创建applicationContext.xml</p><p>   4.在配置文件中进行配置</p><p>   5.创建ApplicationContext对象getBean</p><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><h3 id="Bean标签的配置"><a href="#Bean标签的配置" class="headerlink" title="Bean标签的配置"></a>Bean标签的配置</h3><p>   &#8195;用于配置对象交由Soring来创建默认的情况下他会调用类中的无参构造函数，如果没有无参构造则不能创建成功</p><h4 id="Bean标签的基本属性"><a href="#Bean标签的基本属性" class="headerlink" title="Bean标签的基本属性"></a>Bean标签的基本属性</h4><p>   id :Bean实例在Spring容器中的唯一标识<br>      class:Bean的全限定名称 </p><p>&#8195;<strong>Bean标签的范围取值</strong></p><p> &#8195;scope：指对象的做哟ing范围，取值如下</p><p><img src="https://img-blog.csdnimg.cn/20210715110307817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><p><em><strong>scope的取值为singleton时</strong></em></p><p>   Bean的实例化个数：1个</p><p>   Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>   Bean的生命周期：</p><p>   &#8195; 对象创建：当应用加载，创建容器时，对象就被创建了</p><p>   &#8195;对象运行：只要容器在，对象就就一直活着</p><p>   &#8195;    对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p><p><em><strong>scope的取值为prototype</strong></em></p><p>Bean的实例化个数：多个</p><p>   Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p>   Bean的生命周期：</p><p>  &#8195; 对象创建：当使用对象时，创建新的对象实例</p><p>   &#8195;对象运行：只要对对象在使用中，对象就就一直活着</p><p>   &#8195;对象销毁：当对象长时间不用时，杯Java的垃圾回收器回收了</p><h4 id="Bean的生命周期配置"><a href="#Bean的生命周期配置" class="headerlink" title="Bean的生命周期配置"></a>Bean的生命周期配置</h4><p>   init-method:指定类中的初始化方法名称</p><p>   destroy-method:指定类中的销毁方法</p><h4 id="Bean实例化三种方式"><a href="#Bean实例化三种方式" class="headerlink" title="Bean实例化三种方式"></a>Bean实例化三种方式</h4><ul><li>无参构造方法实例化</li><li>工厂静态方法实例化</li><li>工厂实例方法实例化</li></ul><br><p>例：工厂实例方法实例化<br><img src="https://img-blog.csdnimg.cn/20210715110940785.png"></p><br><h4 id="Bean的依赖注入"><a href="#Bean的依赖注入" class="headerlink" title="Bean的依赖注入"></a>Bean的依赖注入</h4><p><img src="https://img-blog.csdnimg.cn/20210716163040737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210716163156941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><p><em><strong>依赖注入的具体分析</strong></em></p><p>依赖注入 (Denpendency Injection):它是Spring框架核心IOC的具体实现。</p><p>在编写程序时，通过控制反转，把对象的创建交给了Spring，但是代码中不可能出现没有依赖的情况。IOC解耦知识降低他们的依赖的关系，但是并不会消除。例如：业务层任然会调用持久层的方法。</p><p>那这种业务层和持久层的依赖关系，在使用Spring之后，就让Spring来维护了。简单的说，就是坐等框架把持久层的对象储如业务层，而不用我们自己去获取。</p><h4 id="依赖注入的方式"><a href="#依赖注入的方式" class="headerlink" title="依赖注入的方式"></a>依赖注入的方式</h4><p>思考：怎样将UserDao植入到UserService内部呢？</p><ul><li>构造方法</li><li>set方法</li></ul><p><em><strong>1.set方法的注入</strong></em></p><p>&#8195;<em>普通的set方法注入</em><br><img src="https://img-blog.csdnimg.cn/20210716163400924.png"><br>&#8195;<em>P命名空间的注入</em></p><p>P命名空间注入本质也是set方法注入，但比set方法的注入更加的方便，主要体现在配置文件中<br><img src="https://img-blog.csdnimg.cn/20210716163529146.png"><br>修改注入方式<br><img src="https://img-blog.csdnimg.cn/20210716163547251.png"><br><em><strong>2.构造注入</strong></em><br><img src="https://img-blog.csdnimg.cn/20210716163921155.png"></p><h4 id="Bean的依赖注入的数据类型"><a href="#Bean的依赖注入的数据类型" class="headerlink" title="Bean的依赖注入的数据类型"></a>Bean的依赖注入的数据类型</h4><p>除了对象的引用可以注入，普通的数据类型，集合等都可以在容器中进行注入</p><p>注入数据发的三种数据类型</p><ul><li><p>普通数据类型</p></li><li><p>引用数据类型</p></li><li><p>集合数据类型</p></li></ul><p><strong>引用其他配置文件（分模块开发）</strong></p><p>实际的开发中，Spring的配置内容非常多，这就导致Spring配置之很繁杂且体积很大，所以，可以将部分配置拆解到其他的配置文件中，而在Spring主配置文件通过impor标签进行加载<br><img src="https://img-blog.csdnimg.cn/20210716164427970.png"></p><h2 id="Spring相关的API"><a href="#Spring相关的API" class="headerlink" title="Spring相关的API"></a>Spring相关的API</h2><h3 id="ApplicationContext的继承体系"><a href="#ApplicationContext的继承体系" class="headerlink" title="ApplicationContext的继承体系"></a>ApplicationContext的继承体系</h3><p><strong>applicationContext</strong>:接口类型，代表应用上下文，可以通过其实例获得Spring容器中的Bean对象</p><p><strong>ApplicationContext的实现类</strong></p><ul><li>ClassPathXmlApplicationContext</li></ul><p> 他是从类根路径下加载配置文件 （推荐使用）</p><ul><li>FileSystemXmlApplicationContext</li></ul><p>他是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p><ul><li>AnnotationConfigApplicationContext</li></ul><p>使用注解配置容器对象时，需要使用此类来创建Spring容器。它用来读取注解。</p><p><strong>getBean可以通过多种方式进行获取</strong></p><p>app.getBean(“id”)  &#8195;  根据id获取 唯一的</p><p>app.getBean(class) &#8195; 根据类型获取 不一定唯一</p><h2 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h2><p><strong>数据源（连接池）的作用</strong></p><p>数据源是为了提高程序性能出现的；实现实例化数据源，初始化部分连接资源；使用连接资源时从数据源中获取；使用我完毕后将连接资源归还给数据源</p><p><strong>常见的数据源（连接池）</strong>：DBCP，C3P0,BoneCP,Druid等<br><br><strong>数据源的开发步骤</strong></p><ul><li><p>导入数据源的坐标和数据库驱动坐标</p></li><li><p>创建数据源对象</p></li><li><p>设置数据源的基本连接数据</p></li><li><p>使用数据源获取连接资源和归还连接资源</p><br> **1. 手动创建c3p0数据源**</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9381de845982cb2ac651c3353ef22dd0.png"></p><p>   <strong>2.手动创建Druid数据源</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/a1bcf31bc1ab7ba8abafa2528e0d1951.png"></p><p><strong>3.从配置文件中获取</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/42c04d69ba553bbf33c3b07d3a28c684.png"></p><p><strong>由Spring配置数据源</strong></p><p>可以将DataSource的创建权交由Spring容器去完成</p><ol><li>配置Bean<br><img src="https://img-blog.csdnimg.cn/img_convert/84395faaa2296c0d51e2d33be346b021.png"></li><li>Spring容器产生数据源对象<br><img src="https://img-blog.csdnimg.cn/img_convert/2522a1e673a6c4da03e99945bff3c071.png"></li></ol><p><strong>注意：</strong> c3p0和druid的bean配置时 他们的需要注入的driver，url等的名字不同，主要取决于他们内部对应的set方法不同，需要注入的名字就是set后面对应的名字</p><p><strong>由spring中加载properties配置文件</strong></p><ol><li>首先需要映入context命名空间和约束路径</li></ol><p>命名空间复制xmlns，在xmlns后面加上:context，最后将bean全部改为context，最后即是</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d20e8074e7909fdf2be0bcae03fb976a.png"></p><ol start="2"><li>同理约束路径为<br><img src="https://img-blog.csdnimg.cn/img_convert/39a355e6685efdfc9d5202067d487241.png"></li><li>加载外部的properties文件</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/ca3725cbded1fb476ed14d295cd98eea.png"></p><p>location即是文件的位置</p><p>使用EL表达式将properties中的数据传入bean</p><p>即  ${key}<br><img src="https://img-blog.csdnimg.cn/img_convert/ce28593edac8bb48ed51ca647ccfceca.png"></p><ol start="4"><li>最后同上</li></ol><h2 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h2><p><strong>Spring的原始注解</strong></p><p>spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。</p><p>spring的原始注解主要是替代Bean的配置<br><img src="https://img-blog.csdnimg.cn/img_convert/5957bde0abc9d48e9dd1644c7d523f1b.png"><br>注意：使用注解进行开发时，，需要applicationContext.xml中配置组件扫描，作用时指定哪个包及其子包下需要进行扫描以便识别使用注解配置的类，字段和方法</p><p><img src="https://img-blog.csdnimg.cn/71ea7f70fea148c5b7d74e137ce54359.png"></p><p>@Value注解</p><p>配合这个表达式使用<br><img src="https://img-blog.csdnimg.cn/53e3f6c76710459998f8cedff5a48a67.png"></p><p>spring的新注解</p><p><img src="https://img-blog.csdnimg.cn/a487b7aac6fc44839b9fd50ce80675c3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><p>具体实现<br>配置数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//说明这是一个核心配置文件</span><br><span class="hljs-meta">@ComponentScan(&quot;com.itheima&quot;)</span><br><span class="hljs-comment">//扫描组件对应着xml中的 &lt;context:component-scan base-package=&quot;com.itheima&quot;&gt;</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span>;<br><span class="hljs-comment">//从properties文件中获取那些数据 对应着xml中的 &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfiguration</span> </span>&#123;<br>    <span class="hljs-comment">//使用@Value注入值</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException</span>&#123;<br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource;<br>        dataSource.setDriverclass(driver);<br>        dataSource.setJdbcUrl(url);<br>        dataSource.setUser(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Spring集成Junit"><a href="#Spring集成Junit" class="headerlink" title="Spring集成Junit"></a>Spring集成Junit</h2><p><strong>步骤</strong></p><ol><li>导入spring集成junit的jar包</li><li>使用@Runwith注解替换原来的运行期</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ol><h2 id="Spring与Web环境的集成"><a href="#Spring与Web环境的集成" class="headerlink" title="Spring与Web环境的集成"></a>Spring与Web环境的集成</h2><ul><li><strong>ApplicationContext应用上下文获取方式</strong></li></ul><p>应用上下文对象是通过new ClasspathXmlApplicationContext (spring配置文件)方式获取的，但是每次从容器中获得Bean时都要编写new ClasspathXmlApplicationContext (spring配置文件)，这样的弊端是配置的时候文件加载多次，应用上下文对象创建多次。</p><p>在Web项目中可以使用ServletContextListener监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域servletContext域中，这样就可以在任意位置从域中获得上下文对象ApplicationContext对象了。</p><p><strong>spring提供获取应用上下文的工具</strong></p><p>Spring提供了一个监听器ContextLoaderListener就是对方法的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具WebApplicationContextUtils供使用者获取应用上下文对象。</p><p>所以我们只需要只有两件事</p><ol><li>在Web.XML中配置ContextLoaderListener监听器（导入spring-web坐标）<br><img src="https://img-blog.csdnimg.cn/2e6b4d9b96df40978c503155b3f7a67a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70">  </li><li>使用WebApplicationContextUtils获得上下文对象ApplicationContext<br><img src="https://img-blog.csdnimg.cn/e824d22c24f645fb90e40f540815a4b8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></li></ol><h1 id="二、SpringMVC"><a href="#二、SpringMVC" class="headerlink" title="二、SpringMVC"></a>二、SpringMVC</h1><h2 id="SpringMVC的简介"><a href="#SpringMVC的简介" class="headerlink" title="SpringMVC的简介"></a>SpringMVC的简介</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li>导入SpringMVC的相关坐标</li><li>配置SpringMVC核心控制器DispathcerServlet</li><li>创建Controller类和视图页面</li><li>使用注解配置Controller类中业务方法得到映射地址</li><li>配置SpringMVC核心文件Spring-mvc.xml</li><li>客户端发起请求测试</li><li>SpringMVC的执行流程</li></ol><p>图示<br><img src="https://img-blog.csdnimg.cn/e71e4fe33bb5416b9b9f0dbc5d8f3699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><p>文字</p><p><img src="https://img-blog.csdnimg.cn/4b7f8a4b052e4925a6590d9bac756dc1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="SpringMVC注解解析"><a href="#SpringMVC注解解析" class="headerlink" title="SpringMVC注解解析"></a>SpringMVC注解解析</h2><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>作用：用于建立请求 URL 和处理请求方法之间的对应关系<br>位置：<br>类上，请求URL 的第一级访问目录。此处不写的话，就相当于应用的根目录<br>方法上，请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径<br>属性：<br>value：用于指定请求的URL。它和path属性的作用是一样的<br>method：用于指定请求的方式<br>params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样<br>例如：<br>params = {“accountName”}，表示请求参数必须有accountName<br>params = {“moeny!100”}，表示请求参数中money不能是100</p><h3 id="mvc命名空间引入"><a href="#mvc命名空间引入" class="headerlink" title="mvc命名空间引入"></a>mvc命名空间引入</h3><p>命名空间：xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a><br>                xmlns:mvc=”<a href="http://www.springframework.org/schema/mvc&quot;">http://www.springframework.org/schema/mvc&quot;</a><br>约束地址：<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br>         <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a><br>         <a href="http://www.springframework.org/schema/mvc">http://www.springframework.org/schema/mvc</a><br>         <a href="http://www.springframework.org/schema/mvc/spring-mvc.xsd">http://www.springframework.org/schema/mvc/spring-mvc.xsd</a></p><h3 id="组件扫描"><a href="#组件扫描" class="headerlink" title="组件扫描"></a>组件扫描</h3><p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中，如果使用@Controller注解标注的话，就需要使用&lt;context:component-scan base-package=“com.itheima.controller”/&gt;进行组件扫描。</p><h2 id="SpringMVC的XML配置解析"><a href="#SpringMVC的XML配置解析" class="headerlink" title="SpringMVC的XML配置解析"></a>SpringMVC的XML配置解析</h2><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><p>SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址org/springframework/web/servlet/DispatcherServlet.properties，该文件中配置了默认的视图解析器，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver<br></code></pre></td></tr></table></figure><p><strong>我们可以通过属性注入的方式修改视图的的前后缀</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置内部资源视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="SpringMVC的相关组件"><a href="#SpringMVC的相关组件" class="headerlink" title="SpringMVC的相关组件"></a>SpringMVC的相关组件</h3><p>前端控制器：DispatcherServlet<br>处理器映射器：HandlerMapping<br>处理器适配器：HandlerAdapter<br>处理器：Handler<br>视图解析器：View Resolver<br>视图：View</p><h3 id="SpringMVC的注解和配置"><a href="#SpringMVC的注解和配置" class="headerlink" title="SpringMVC的注解和配置"></a>SpringMVC的注解和配置</h3><p>请求映射注解：@RequestMapping<br>视图解析器配置：<br>REDIRECT_URL_PREFIX = “redirect:”<br>FORWARD_URL_PREFIX = “forward:”<br>prefix = “”;<br>suffix = “”;     </p><h2 id="SpringMVC的数据响应方式"><a href="#SpringMVC的数据响应方式" class="headerlink" title="SpringMVC的数据响应方式"></a>SpringMVC的数据响应方式</h2><p>1） <strong>页面跳转</strong><br>直接返回字符串<br>通过ModelAndView对象返回</p><p>2） <strong>回写数据</strong><br>直接返回字符串<br>返回对象或集合</p><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><ul><li>返回字符串形式<br>直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转<br> <img src="https://img-blog.csdnimg.cn/be374d1b7dcb441f90a70f371f60ae2e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></li><li>返回ModelAndView对象<br><img src="https://img-blog.csdnimg.cn/eab5373039c2447eac88438b6fc40842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></li><li>向request域存储数据<br>A. 通过SpringMVC框架注入的request对象setAttribute()方法设置<br><img src="https://img-blog.csdnimg.cn/dce87c613dc8412b8b85f15c92e06f8f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br>B.通过ModelAndView的addObject()方法设置<br><img src="https://img-blog.csdnimg.cn/8b63ba7c31734f7886b47f97db6b64f4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h3></li></ul><p>  <strong>1.直接返回字符串</strong></p><p> 通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”) 回写数据，此时不需要视图跳转，业务方法返回值为void。<br><img src="https://img-blog.csdnimg.cn/e2d553be6a8d481f972793b4dbfe35c0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><p>将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回。<br><img src="https://img-blog.csdnimg.cn/990d89710ee643a7b924bfa2fab47c91.png"><br>在异步项目中，客户端与服务器端往往要进行json格式字符串交互，此时我们可以手动拼接json字符串返回。<br><img src="https://img-blog.csdnimg.cn/88ea71aa891147b2a853a40a48ae8262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br>上述方式手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串，我们可以使用web阶段学习过的json转换工具jackson进行转换，导入jackson坐标。<br><img src="https://img-blog.csdnimg.cn/3f9d0aa65d8441a9aaa29825b41ddb14.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br><strong>2. 返回对象或集合</strong><br>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置：<br><img src="https://img-blog.csdnimg.cn/593bf875e50b45f9bb557a4ce3b7a872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/9956fb64155548f8981fe20039258187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br>在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置。<br><img src="https://img-blog.csdnimg.cn/eb69021d1d1b46ee941c79ad4e2a2d70.png"><br>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。<br>使用<a href="mvc:annotation-driven">mvc:annotation-driven</a>自动加载 RequestMappingHandlerMapping（处理映射器）和<br>RequestMappingHandlerAdapter（ 处 理 适 配 器 ），可用在Spring-xml.xml配置文件中使用<br><a href="mvc:annotation-driven">mvc:annotation-driven</a>替代注解处理器和适配器的配置。<br>同时使用<a href="mvc:annotation-driven">mvc:annotation-driven</a>默认底层就会集成jackson进行对象或集合的json格式字符串的转换。</p><h2 id="SpringMVC-获得请求数据"><a href="#SpringMVC-获得请求数据" class="headerlink" title="SpringMVC 获得请求数据"></a>SpringMVC 获得请求数据</h2><h3 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h3><p>客户端请求参数的格式是：name=value&amp;name=value… …<br>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数：</p><ul><li>基本类型参数</li><li>POJO类型参数</li><li>数组类型参数</li><li>集合类型参数<h3 id="获得基本类型参数"><a href="#获得基本类型参数" class="headerlink" title="获得基本类型参数"></a>获得基本类型参数</h3>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。<br><img src="https://img-blog.csdnimg.cn/f3e2dceb0e614ad18459d6d3e9147a0a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="获得POJO类型参数"><a href="#获得POJO类型参数" class="headerlink" title="获得POJO类型参数"></a>获得POJO类型参数</h3>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。<br><img src="https://img-blog.csdnimg.cn/515d88889369428abaa127a60545fcba.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="获得数组类型参数"><a href="#获得数组类型参数" class="headerlink" title="获得数组类型参数"></a>获得数组类型参数</h3>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。<br><img src="https://img-blog.csdnimg.cn/262a22f5610243d08f53d972096f3808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="获得集合类型参数"><a href="#获得集合类型参数" class="headerlink" title="获得集合类型参数"></a>获得集合类型参数</h3>获得集合参数时，要将集合参数包装到一个POJO中才可以。<br><img src="https://img-blog.csdnimg.cn/15f78bd1a573482ba08dc9d27e4106f9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装。<br><img src="https://img-blog.csdnimg.cn/cbfc5ec4c0994e6a808f403866a60fc8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70" alt="1"><br><img src="https://img-blog.csdnimg.cn/c947e3a269f14848acd5288349eacbeb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70" alt="2"><br>注意：通过谷歌开发者工具抓包发现，没有加载到jquery文件，原因是SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是/,代表对所有的资源都进行过滤操作，我们可以通过以下两种方式指定放行静态资源：<br>在spring-mvc.xml配置文件中指定放行的资源<br>  &lt;mvc:resources mapping=”/js/**” location=”/js/“/&gt;<br>使用<a href="mvc:default-servlet-handler/">mvc:default-servlet-handler/</a>标签<h3 id="请求数据乱码问题"><a href="#请求数据乱码问题" class="headerlink" title="请求数据乱码问题"></a>请求数据乱码问题</h3>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。<br><img src="https://img-blog.csdnimg.cn/432424ab457d413282e2b8ad61f180d6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="参数绑定注解-requestParam"><a href="#参数绑定注解-requestParam" class="headerlink" title="参数绑定注解@requestParam"></a>参数绑定注解@requestParam</h3>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定。<br><img src="https://img-blog.csdnimg.cn/cdb0140cbb15486982ed9a8867fec7ca.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br>注解@RequestParam还有如下参数可以使用：</li><li>value：与请求参数名称</li><li>required：此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</li><li>defaultValue：当没有指定请求参数时，则使用指定的默认值赋值<br><img src="https://img-blog.csdnimg.cn/85018fd17ca24dd896679ba413594e44.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="获得Restful风格的参数"><a href="#获得Restful风格的参数" class="headerlink" title="获得Restful风格的参数"></a>获得Restful风格的参数</h3>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</li></ul><p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：<br>GET：用于获取资源<br>POST：用于新建资源<br>PUT：用于更新资源<br>DELETE：用于删除资源  </p><p>例如：</p><ul><li>/user/1    GET ：       得到 id = 1 的 user</li><li>/user/1    DELETE：  删除 id = 1 的 user</li><li>/user/1    PUT：       更新 id = 1 的 user</li><li>/user       POST：      新增 user</li></ul><p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址/user/1可以写成/user/{id}，占位符{id}对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作。<br><img src="https://img-blog.csdnimg.cn/2b366cbfe7754a7f972f45ce093a1e63.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><ul><li>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。</li><li>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</li></ul><p>自定义类型转换器的开发步骤：</p><ol><li>定义转换器类实现Converter接口</li><li>在配置文件中声明转换器</li><li>在<annotation-driven>中引用转换器</li></ol><p>第一步：定义转换器类实现Converter接口<br><img src="https://img-blog.csdnimg.cn/716cf7ac78244479a05ffad7bcf0bce8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br>第二步：在配置文件中声明转换器<br><img src="https://img-blog.csdnimg.cn/77303542b4bd4017af3eb23e48adfa8c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></p><p>第三步：在<annotation-driven>中引用转换器<br><img src="https://img-blog.csdnimg.cn/e0ccfa3301e14ee185ce5b40c14aedb5.png"></p><h3 id="获得Servlet相关API"><a href="#获得Servlet相关API" class="headerlink" title="获得Servlet相关API"></a>获得Servlet相关API</h3><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession<br><img src="https://img-blog.csdnimg.cn/7ebf8f4b4a70417d9a7ed77689353de1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="获得请求头"><a href="#获得请求头" class="headerlink" title="获得请求头"></a>获得请求头</h3></li></ul><p><strong>@RequestHeader</strong></p><p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name)<br>@RequestHeader注解的属性如下：</p><ul><li>value：请求头的名称</li><li>required：是否必须携带此请求头<br><img src="https://img-blog.csdnimg.cn/6c1ff3cdb70047ba949a91d2b04b0958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></li></ul><p> <strong>@CookieValue</strong><br> 使用@CookieValue可以获得指定Cookie的值<br>@CookieValue注解的属性如下：</p><ul><li>value：指定cookie的名称</li><li>required：是否必须携带此cookie<br><img src="https://img-blog.csdnimg.cn/d9e367c8f3914b71920452022feb9018.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3></li><li>文件上传客户端三要素</li><li>表单项type=“file”</li><li>表单的提交方式是post</li><li>表单的enctype属性是多部分表单形式，及enctype=“multipart/form-data”<br><img src="https://img-blog.csdnimg.cn/b63240a6a76e4525a92ada9ab15d0cef.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></li></ul><p> 2.文件上传原理</p><ul><li>当form表单修改为多部分表单时，request.getParameter()将失效。</li><li>enctype=“application/x-www-form-urlencoded”时，form表单的正文内容格式是：key=value&amp;key=value&amp;key=value</li><li>当form表单的enctype取值为Mutilpart/form-data时，请求正文内容就变成多部分形式：<br><img src="https://img-blog.csdnimg.cn/e9b033b204354e8aba76807f89fb8bb1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="单文件上传步骤"><a href="#单文件上传步骤" class="headerlink" title="单文件上传步骤"></a>单文件上传步骤</h3></li></ul><ol><li>导入fileupload和io坐标</li><li>配置文件上传解析器</li><li>编写文件上传代码</li></ol><h3 id="单文件上传实现"><a href="#单文件上传实现" class="headerlink" title="单文件上传实现"></a>单文件上传实现</h3><ol><li>导入fileupload和io坐标<br><img src="https://img-blog.csdnimg.cn/7efaf2016e28429e9d3635de3221d038.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></li><li>配置文件上传解析器<br><img src="https://img-blog.csdnimg.cn/beb05768c2ee45f9936ce9beac0b7747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"></li><li>编写文件上传代码<br><img src="https://img-blog.csdnimg.cn/eaf4d38a7d80401a8ac7c02c900ff56c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h3 id="多文件上传实现"><a href="#多文件上传实现" class="headerlink" title="多文件上传实现"></a>多文件上传实现</h3>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可<br><img src="https://img-blog.csdnimg.cn/b81abfe757294d3caf33477ee4857c51.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/091e57918d2f439d816eb39bf056bade.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTI2NzQ2NQ==,size_16,color_FFFFFF,t_70"><h2 id="SpingMVC拦截器"><a href="#SpingMVC拦截器" class="headerlink" title="SpingMVC拦截器"></a>SpingMVC拦截器</h2>Spring MVC 的拦截器类似于 Servlet  开发中的过滤器 Filter，用于对处理器进行预处理和后处理。</li></ol><p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（Interceptor Chain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。<br><img src="https://img-blog.csdnimg.cn/d42511f560db4662ae411f03f2802a4a.png"></p><h3 id="拦截器快速入门"><a href="#拦截器快速入门" class="headerlink" title="拦截器快速入门"></a>拦截器快速入门</h3><p>自定义拦截器很简单，只有如下三步：</p><ul><li>创建拦截器类实现HandlerInterceptor接口</li><li>配置拦截器</li><li>测试拦截器的拦截效果</li></ul><ol><li>创建拦截器类实现HanderInterceptor接口<br><img src="https://img-blog.csdnimg.cn/5c6d8f1e257d477ea5af538769825e80.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>配置拦截器<br><img src="https://img-blog.csdnimg.cn/8178ae803fe946a1bd730812c680eee7.png"></li><li>测试拦截器的拦截效果(编写目标方法)<br><img src="https://img-blog.csdnimg.cn/4506961bd9814200bbee39159c6a96e9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><h3 id="拦截器方法说明"><a href="#拦截器方法说明" class="headerlink" title="拦截器方法说明"></a>拦截器方法说明</h3><img src="https://img-blog.csdnimg.cn/b6e1470a7c224c08957ba1f54a78b6c6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16"><h2 id="SpringMVC异常处理"><a href="#SpringMVC异常处理" class="headerlink" title="SpringMVC异常处理"></a>SpringMVC异常处理</h2><h3 id="异常处理思路"><a href="#异常处理思路" class="headerlink" title="异常处理思路"></a>异常处理思路</h3>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生。</li></ol><p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理，如下图：<br><img src="https://img-blog.csdnimg.cn/46fa50f2b8ba4b2380212898600593e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="异常处理两种方式"><a href="#异常处理两种方式" class="headerlink" title="异常处理两种方式"></a>异常处理两种方式</h3><ul><li>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver</li><li>实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器<h3 id="简单异常处理器SimpleMappingExceptionResolver"><a href="#简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="简单异常处理器SimpleMappingExceptionResolver"></a>简单异常处理器SimpleMappingExceptionResolver</h3>SpringMVC已经定义好了该类型转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置<br><img src="https://img-blog.csdnimg.cn/108f3112b8494b96b1291345ef7ae81e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><h3 id="自定义异常处理步骤"><a href="#自定义异常处理步骤" class="headerlink" title="自定义异常处理步骤"></a>自定义异常处理步骤</h3></li><li>创建异常处理器类实现HandlerExceptionResolver</li><li>配置异常处理器</li><li>编写异常页面</li><li>测试异常跳转</li></ul><ol><li>创建异常处理器类实现HandlerExceptionResolver<br><img src="https://img-blog.csdnimg.cn/15fd2477860e410a9a6ab4310a971c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"></li><li>配置异常处理器<br><img src="https://img-blog.csdnimg.cn/34dfe53644f3401991adc8df5bfa0711.png"></li><li>编写异常界面<br><img src="https://img-blog.csdnimg.cn/c386286334864ab885334671c5084e38.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"></li><li>测试异常跳转<br><img src="https://img-blog.csdnimg.cn/7c482c2c432d41028f23d2236eff5e21.png"><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h3><h4 id="what-is-AOP"><a href="#what-is-AOP" class="headerlink" title="what is AOP"></a>what is AOP</h4>AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</li></ol><p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h3 id="AOP的作用及其优势"><a href="#AOP的作用及其优势" class="headerlink" title="AOP的作用及其优势"></a>AOP的作用及其优势</h3><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强<br>优势：减少重复代码，提高开发效率，并且便于维护</p><h4 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h4><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p><h4 id="AOP的动态代理技术"><a href="#AOP的动态代理技术" class="headerlink" title="AOP的动态代理技术"></a>AOP的动态代理技术</h4><p>常用的动态代理技术</p><ul><li>JDK 代理 : 基于接口的动态代理技术</li><li>cglib 代理：基于父类的动态代理技术<br><img src="https://img-blog.csdnimg.cn/597b487129e544ca8433c1addb2c5985.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16"><h4 id="JDK的动态代理"><a href="#JDK的动态代理" class="headerlink" title="JDK的动态代理"></a>JDK的动态代理</h4></li></ul><ol><li>目标类接口<br><img src="https://img-blog.csdnimg.cn/7d79d56d680c448f861f52411aa969c6.png"></li><li>目标类<br><img src="https://img-blog.csdnimg.cn/dcc05f9a4a3442058c0550325c333b4a.png"></li><li>动态代理代码<br><img src="https://img-blog.csdnimg.cn/5b8282ad19a14c9cad04e18fac8c044a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_16,color_FFFFFF,t_70,g_se,x_16"></li><li>  调用代理对象的方法测试<br><img src="https://img-blog.csdnimg.cn/7e15f7efcfde451f973beea01a9f5a76.png"></li></ol><h4 id="cglib-的动态代理"><a href="#cglib-的动态代理" class="headerlink" title="cglib 的动态代理"></a>cglib 的动态代理</h4><ol><li>目标类<br><img src="https://img-blog.csdnimg.cn/7cc6af3d2e7f40a393baab14ff33509a.png"></li><li>动态代理代码<br><img src="https://img-blog.csdnimg.cn/90060857e1984fca9cc3e27ed7bf64b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></li><li>调用代理对象的方法测试<br><img src="https://img-blog.csdnimg.cn/578dad23ff914b4faeb5bc027e1a7e51.png"><h4 id="AOP相关的概念"><a href="#AOP相关的概念" class="headerlink" title="AOP相关的概念"></a>AOP相关的概念</h4>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</li></ol><p>Target（目标对象）：代理的目标对象<br> Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类<br> Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点<br> Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义<br> Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知<br> Aspect（切面）：是切入点和通知（引介）的结合<br> Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</p><h4 id="AOP-开发明确的事项"><a href="#AOP-开发明确的事项" class="headerlink" title="AOP 开发明确的事项"></a>AOP 开发明确的事项</h4><ol><li>需要编写的内容<br>编写核心业务代码（目标类的目标方法）<br> 编写切面类，切面类中有通知(增强功能方法)<br> 在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li><li>AOP 技术实现的内容<br>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</li><li>AOP 底层使用哪种代理方式<br>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。<h4 id="AOP知识要点"><a href="#AOP知识要点" class="headerlink" title="AOP知识要点"></a>AOP知识要点</h4>aop：面向切面编程<br>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理<br>aop的重点概念：<pre><code class="hljs"> Pointcut（切入点）：被增强的方法 Advice（通知/ 增强）：封装增强业务逻辑的方法 Aspect（切面）：切点+通知 Weaving（织入）：将切点与通知结合的过程</code></pre>开发明确事项：<pre><code class="hljs"> 谁是切点（切点表达式配置） 谁是通知（切面类中的增强方法） 将切点和通知进行织入配置</code></pre><h3 id="基于XMl的AOP开发"><a href="#基于XMl的AOP开发" class="headerlink" title="基于XMl的AOP开发"></a>基于XMl的AOP开发</h3><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4></li><li>导入AOP相关坐标<br><img src="https://img-blog.csdnimg.cn/02d1f1c0ecfd44e2b3f40f22b575e586.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></li><li>创建目标接口和目标类(内部有切点)<br><img src="https://img-blog.csdnimg.cn/b8aaf1eb93124800a5e990e7030221f6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"></li><li>创建切面类(内部有增强方法)<br><img src="https://img-blog.csdnimg.cn/4fbce9b92d884288a3c86d8a093c3888.png"></li><li>将目标类和切面类 的对象创建权交给spring<br><img src="https://img-blog.csdnimg.cn/7a12cf2570d0404482d6105f4f5e473a.png"></li><li>在applicationContext.xml中配置关系<br>导入aop命名空间<br><img src="https://img-blog.csdnimg.cn/ffa56a43dcb54143b09d555ba144db55.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"><br>配置切点表达式和前置增强的植入关系<br><img src="https://img-blog.csdnimg.cn/7e520373a68d45939dadef880e3903af.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"></li><li>测试代码<br><img src="https://img-blog.csdnimg.cn/a3e5afd1a8494d2199e32c308277636d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"><h4 id="XML配置AOP详解"><a href="#XML配置AOP详解" class="headerlink" title="XML配置AOP详解"></a>XML配置AOP详解</h4></li><li>切点表达式的写法<br>表达式语法<br><img src="https://img-blog.csdnimg.cn/6cfa85d125844c4c8e504cc63c6dec52.png"><br>访问修饰符可以省略<br>返回值类型、包名、类名、方法名可以使用星号*  代表任意<br>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类<br>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表<br>such as<br><img src="https://img-blog.csdnimg.cn/2cd6ea67d2014b2097a15999cfa85121.png"></li><li>通知的类型<br>通知的配置语法<br><img src="https://img-blog.csdnimg.cn/b8d940713ced47589309eca4dbcfe7fc.png"><br><img src="https://img-blog.csdnimg.cn/d653ff26f203465e876cd05e243498c9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>切点表达式的抽取<br>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。<br><img src="https://img-blog.csdnimg.cn/0f55b30f55ac48e2bb3e86f061b5e6c7.png"><h4 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h4>aop织入的配置<br><img src="https://img-blog.csdnimg.cn/f5f01f76bd5b47828406c338de16188c.png"></li></ol><p>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知<br>切点表达式的写法：<br><img src="https://img-blog.csdnimg.cn/f37dc67e5c48445dacfc1c24e4237254.png"></p><h3 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h3><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><p>基于注解的aop开发步骤：</p><ul><li>创建目标接口和目标类（内部有切点）</li><li>创建切面类（内部有增强方法）</li><li>将目标类和切面类的对象创建权交给 spring</li><li>在切面类中使用注解配置织入关系</li><li>在配置文件中开启组件扫描和 AOP 的自动代理</li><li>测试</li></ul><ul><li>创建目标接口和目标类（内部有切点）<br><img src="https://img-blog.csdnimg.cn/f8896412ff9c43c6a88ce1da01280225.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></li><li>创建切面类<br><img src="https://img-blog.csdnimg.cn/225cb81e24214304b24a4a13596b1494.png"></li><li>将目标类和切面类的对象创建权交给 spring<br><img src="https://img-blog.csdnimg.cn/a8ec6e8652ef4ed4b615ab9678b80a24.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></li><li>在切面类中使用注解配置织入关系<br><img src="https://img-blog.csdnimg.cn/b5f21dae22d447d1a3270fedf57b8488.png"></li><li>在配置文件中开启组件扫描和 AOP 的自动代理<br><img src="https://img-blog.csdnimg.cn/a9071c431c17487b85768b6f2199083a.png"></li><li>测试代码<br><img src="https://img-blog.csdnimg.cn/3eacece3ec2a4a6ba67daae1fbf73663.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16"><h4 id="注解配置-AOP-详解"><a href="#注解配置-AOP-详解" class="headerlink" title="注解配置 AOP 详解"></a>注解配置 AOP 详解</h4></li><li>注解通知的类型<br>通知的配置语法：@通知注解(“切点表达式”)<br><img src="https://img-blog.csdnimg.cn/ad15f9b2e01b456280c4254393070d1a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>切点表达式的抽取<br>同 xml 配置 aop 一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。具体如下：<br><img src="https://img-blog.csdnimg.cn/e3de90ec8a644289aa3986dc099f135c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"><h4 id="知识要点-1"><a href="#知识要点-1" class="headerlink" title="知识要点"></a>知识要点</h4>注解aop开发步骤</li><li>使用@Aspect标注切面类</li><li>使用@通知注解标注通知方法</li><li>在配置文件中配置aop自动代理<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a></li></ul><p>通知注解类型<br><img src="https://img-blog.csdnimg.cn/77ad6c92507f49e197088f5a6f2e7096.png"></p><h3 id="编程式事物控制相关对象"><a href="#编程式事物控制相关对象" class="headerlink" title="编程式事物控制相关对象"></a>编程式事物控制相关对象</h3><h4 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h4><p>PlatformTransactionManager 接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法。<br><img src="https://img-blog.csdnimg.cn/1393e4db1d214b42880dfb5fb31aa980.png"><br> 注意：<br>PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类，例如：Dao 层技术是jdbc 或 mybatis 时：org.springframework.jdbc.datasource.DataSourceTransactionManager<br>Dao 层技术是hibernate时：org.springframework.orm.hibernate5.HibernateTransactionManager</p><h4 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h4><p>TransactionDefinition 是事务的定义信息对象，里面有如下方法：<br><img src="https://img-blog.csdnimg.cn/aa6d441c4e8542619f25fda9aae1317f.png"></p><ul><li><p>事务隔离级别<br>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。</p></li><li><p>ISOLATION_DEFAULT</p></li><li><p>ISOLATION_READ_UNCOMMITTED</p></li><li><p>ISOLATION_READ_COMMITTED</p></li><li><p>ISOLATION_REPEATABLE_READ</p></li><li><p>ISOLATION_SERIALIZABLE</p></li><li><p>事务传播行为</p></li><li><p>REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</p></li><li><p>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</p></li><li><p>MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常</p></li><li><p>REQUERS_NEW：新建事务，如果当前在事务中，把当前事务挂起。</p></li><li><p>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</p></li><li><p>NEVER：以非事务方式运行，如果当前存在事务，抛出异常</p></li><li><p>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作</p></li><li><p>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</p></li><li><p>是否只读：建议查询时设置为只读</p></li></ul><p>TransactionStatus 接口提供的是事务具体的运行状态，方法介绍如下。<br><img src="https://img-blog.csdnimg.cn/8406dde798c24cf18588811363403670.png"></p><h4 id="知识要点-2"><a href="#知识要点-2" class="headerlink" title="知识要点"></a>知识要点</h4><p>编程式事务控制三大对象</p><ul><li>PlatformTransactionManager</li><li>TransactionDefinition</li><li>TransactionStatus<h3 id="基于-XML-的声明式事务控制"><a href="#基于-XML-的声明式事务控制" class="headerlink" title="基于 XML 的声明式事务控制"></a>基于 XML 的声明式事务控制</h3></li></ul><p><strong>什么是声明式事务控制</strong><br>Spring 的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。<br><strong>声明式事务处理的作用</strong></p><ul><li><p>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可</p></li><li><p>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便<br>注意：Spring 声明式事务控制底层就是AOP。</p><h4 id="声明式事务控制的实现"><a href="#声明式事务控制的实现" class="headerlink" title="声明式事务控制的实现"></a>声明式事务控制的实现</h4></li><li><p>引入tx命名空间 <img src="https://img-blog.csdnimg.cn/7ab3cf3a98fd4df39019ab46f26dd053.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>配置事务增强<br><img src="https://img-blog.csdnimg.cn/ce9cc82c597c47d1b907380c0cd4e099.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>配置事务AOP织入<br><img src="https://img-blog.csdnimg.cn/ac548a87ed4c48eebffc6d9bf24ffe0a.png"></p></li><li><p>测试事务控制转账业务代码<br><img src="https://img-blog.csdnimg.cn/a702ceb329e14d268f06e44273ae1ad7.png"></p><h4 id="切点方法的事务参数的配置"><a href="#切点方法的事务参数的配置" class="headerlink" title="切点方法的事务参数的配置"></a>切点方法的事务参数的配置</h4><p><img src="https://img-blog.csdnimg.cn/e6c4b56f28984a77b03a4db7f8288b15.png"><br>其中，<a href="tx:method">tx:method</a> 代表切点方法的事务参数的配置，例如：<br>&lt;tx:method name=”transfer” isolation=”REPEATABLE_READ” propagation=”REQUIRED” timeout=”-1” read-only=”false”/&gt;</p></li><li><p>name：切点方法名称</p></li><li><p>isolation:事务的隔离级别</p></li><li><p>propogation：事务的传播行为</p></li><li><p>timeout：超时时间</p></li><li><p>read-only：是否只读</p></li></ul><h3 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h3><h4 id="使用注解怕配置声明式事务控制"><a href="#使用注解怕配置声明式事务控制" class="headerlink" title="使用注解怕配置声明式事务控制"></a>使用注解怕配置声明式事务控制</h4><ul><li><p>编写AccountDao<br><img src="https://img-blog.csdnimg.cn/894d123f7e524261a6b6886077542a35.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>编写AccountService<br><img src="https://img-blog.csdnimg.cn/dc910d02eceb4338957acc4086b7b743.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>编写applicationContext.xml配置文件<br><img src="https://img-blog.csdnimg.cn/7779f1dcdb654863b55b0c165a985a9c.png"></p><h4 id="注解配置声明式事务控制解析"><a href="#注解配置声明式事务控制解析" class="headerlink" title="注解配置声明式事务控制解析"></a>注解配置声明式事务控制解析</h4></li><li><p>使用 @Transactional 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离级别、传播行为等。</p></li><li><p>注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</p></li><li><p>使用在方法上，不同的方法可以采用不同的事务参数配置。</p></li><li><p>Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven /&gt;</p></li></ul><h1 id="三、Mybatis"><a href="#三、Mybatis" class="headerlink" title="三、Mybatis"></a>三、Mybatis</h1><h2 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h2><h3 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h3><ul><li><p>mybatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p></li><li><p>mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</p></li><li><p>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。</p><h2 id="Mybatis快速入门"><a href="#Mybatis快速入门" class="headerlink" title="Mybatis快速入门"></a>Mybatis快速入门</h2><h3 id="Mybatis开发步骤"><a href="#Mybatis开发步骤" class="headerlink" title="Mybatis开发步骤"></a>Mybatis开发步骤</h3><p>Mybatis官网地址:<a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a> </p></li><li><p>添加MyBatis的坐标</p></li><li><p>创建user数据表</p></li><li><p>编写User实体类</p></li><li><p>编写映射文件UserMapper.xml</p></li><li><p>编写核心文件SqlMapConfig.xml</p></li><li><p>编写测试类</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3></li><li><p>导入Mybatis坐标及其他的相关坐标<br><img src="https://img-blog.csdnimg.cn/225158e128ea4e5f9b5453602758a74e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/a212bdab459b46d6a1888e7fd3cae927.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>创建user表格<br><img src="https://img-blog.csdnimg.cn/43bead460b1547be97ea217221b9e9b9.png"></p></li><li><p>编写user实体<br><img src="https://img-blog.csdnimg.cn/da55da36266f4127b41472521768535e.png"></p></li><li><p>编写UserMapper映射文件<br><img src="https://img-blog.csdnimg.cn/a368a5d98bbc4bfa8ffdf3e1f41b5d5e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>编写Mybatis核心文件<br><img src="https://img-blog.csdnimg.cn/d6b67ec5fb2748b49c3b4106cf8171ef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>编写测试代码<br><img src="https://img-blog.csdnimg.cn/05b415fa27f84132a03fcf1c63ef54bc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="Mybatis映射文件概述"><a href="#Mybatis映射文件概述" class="headerlink" title="Mybatis映射文件概述"></a>Mybatis映射文件概述</h2><p><img src="https://img-blog.csdnimg.cn/aad594d3007d46d2bb5dc5b177bf7bf6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="Mybatis的增删改查操作"><a href="#Mybatis的增删改查操作" class="headerlink" title="Mybatis的增删改查操作"></a>Mybatis的增删改查操作</h2><h3 id="插入数据操作"><a href="#插入数据操作" class="headerlink" title="插入数据操作"></a>插入数据操作</h3></li><li><p>编写UserMapper映射文件<br><img src="https://img-blog.csdnimg.cn/bccd584e23e44a8f9a40ba4a66e81e2d.png"></p></li><li><p>编写插入实体的User的代码<br><img src="https://img-blog.csdnimg.cn/b9fde840bf8044d393f2dc4279a70e38.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>插入操作需要注意的问题</p></li><li><p>插入语句使用insert标签</p></li><li><p>在映射文件中使用parameterType属性指定要插入的数据类型</p></li><li><p>Sql语句中使用#{实体属性名}方式引用实体中的属性值</p></li><li><p>插入操作使用的API是sqlSession.insert(“命名空间.id”,实体对象);</p></li><li><p>插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务，即sqlSession.commit()</p><h3 id="修改数据操作"><a href="#修改数据操作" class="headerlink" title="修改数据操作"></a>修改数据操作</h3></li><li><p>编写UserMapper的映射文件<img src="https://img-blog.csdnimg.cn/2cfad8f0631b4caf92eaab9350924833.png"></p></li><li><p>编写修改 实体User的代码<img src="https://img-blog.csdnimg.cn/6cbdffb9cd524e81a5de7ed773e4ef17.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p>修改操作需要注意的问题</p></li><li><p>修改语句使用update标签</p></li><li><p>修改操作使用的API是sqlSession.update(“命名空间.id”,实体对象);</p><h3 id="删除数据操作"><a href="#删除数据操作" class="headerlink" title="删除数据操作"></a>删除数据操作</h3></li></ul><ol><li><p> 编写UserMapper的映射文件<br><img src="https://img-blog.csdnimg.cn/b7db8b877fdb4e14a62c8ee5a31c8e9c.png"></p></li><li><p>编写删除数据的代码<img src="https://img-blog.csdnimg.cn/63448c5b51dc4c3a84747ea5e25bf699.png"></p></li><li><p>删除操作需注意问题</p></li></ol><ul><li><p>删除语句使用delete标签</p></li><li><p>Sql语句中使用#{任意字符串}方式引用传递的单个参数</p></li><li><p>删除操作使用的API是sqlSession.delete(“命名空间.id”,Object);</p><h3 id="知识小结"><a href="#知识小结" class="headerlink" title="知识小结"></a>知识小结</h3><p>增删改查映射配置与API：</p></li></ul><p><strong>查询数据：</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">List<span class="hljs-tag">&lt;<span class="hljs-name">User</span>&gt;</span> userList = sqlSession.selectList(&quot;userMapper.findAll&quot;);<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.domain.User&quot;</span>&gt;</span> <br>           select * from User    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加数据： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">sqlSession.insert(&quot;userMapper.add&quot;, user);<br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.itheima.domain.User&quot;</span>&gt;</span>   <br>         insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>修改数据：</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">sqlSession.update(&quot;userMapper.update&quot;, user);<br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.itheima.domain.User&quot;</span>&gt;</span><br>            update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>删除数据：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">sqlSession.delete(&quot;userMapper.delete&quot;,3);<br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>            delete from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Mybatis核心配置文件概述"><a href="#Mybatis核心配置文件概述" class="headerlink" title="Mybatis核心配置文件概述"></a>Mybatis核心配置文件概述</h2><h3 id="Mybatis核心配置文件的层级关系"><a href="#Mybatis核心配置文件的层级关系" class="headerlink" title="Mybatis核心配置文件的层级关系"></a>Mybatis核心配置文件的层级关系</h3><p><img src="https://img-blog.csdnimg.cn/2eb7dbb054a643e386e8b479007d3458.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_13,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="Mybatis常用配置文件解析"><a href="#Mybatis常用配置文件解析" class="headerlink" title="Mybatis常用配置文件解析"></a>Mybatis常用配置文件解析</h3><h4 id="environment标签"><a href="#environment标签" class="headerlink" title="environment标签"></a>environment标签</h4><p>数据库环境的配置，支持多环境配置<br><img src="https://img-blog.csdnimg.cn/d2cbeb9afd984ca2b3ae1a310f4f1c7e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>其中，事务管理器（transactionManager）类型有<strong>两种：</strong></p><ul><li>JDBC：这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</li><li>MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。<br>默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false来阻止它默认的关闭行为。</li></ul><p>其中，数据源（dataSource）类型有<strong>三种：</strong></p><ul><li>UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接。</li><li>POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</li><li>JNDI：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI<br>上下文的引用。</li></ul><h4 id="mapper标签"><a href="#mapper标签" class="headerlink" title="mapper标签"></a>mapper标签</h4><p>该标签的作用是加载映射的，加载方式有如下几种：</p><ul><li><p>使用相对于类路径的资源引用，例如：<mapperresource="org/mybatis/builder/AuthorMapper.xml"/></p></li><li><p>使用完全限定资源定位符（URL），例如：<mapperurl="file:///var/mappers/AuthorMapper.xml"/></p></li><li><p>使用映射器接口实现类的完全限定类名，例如：<mapperclass="org.mybatis.builder.AuthorMapper"/></p></li><li><p>将包内的映射器接口实现全部注册为映射器，例如：<package name="org.mybatis.builder"/></p></li></ul><h4 id="Properties标签"><a href="#Properties标签" class="headerlink" title="Properties标签"></a>Properties标签</h4><p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件<br><img src="https://img-blog.csdnimg.cn/72516f858758455690e3d8ca8d6c8da4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h4><p>类型别名是为Java 类型设置一个短的名字。原来的类型名称配置如下<img src="https://img-blog.csdnimg.cn/4343e89b90724414853772d3272d7d24.png"></p><p>配置typeAliases，为com.itheima.domain.User定义别名为user<img src="https://img-blog.csdnimg.cn/15e38df494db4a40a50a525960a0ce6d.png"><br>上面我们是自定义的别名，mybatis框架已经为我们设置好的一些常用的类型的别名<img src="https://img-blog.csdnimg.cn/0d9690527d8849658aad22c7feae916f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_16,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="知识小结-1"><a href="#知识小结-1" class="headerlink" title="知识小结"></a>知识小结</h4><p><img src="https://img-blog.csdnimg.cn/eaa67ee5a7a84a7aa8ff90641af17568.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/cf8422297d1d47ae95e5bbfe1336f9f2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_18,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="Mybatis相应的API"><a href="#Mybatis相应的API" class="headerlink" title="Mybatis相应的API"></a>Mybatis相应的API</h3><h4 id="SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="SqlSession工厂构建器SqlSessionFactoryBuilder"></a>SqlSession工厂构建器SqlSessionFactoryBuilder</h4><p>常用API：SqlSessionFactory  build(InputStream inputStream)<br>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象<img src="https://img-blog.csdnimg.cn/b8fdea1de07a400da906212d5d9be0be.png"></p><p>其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。</p><h4 id="SqlSession工厂对象SqlSessionFactory"><a href="#SqlSession工厂对象SqlSessionFactory" class="headerlink" title="SqlSession工厂对象SqlSessionFactory"></a>SqlSession工厂对象SqlSessionFactory</h4><p>SqlSessionFactory 有多个个方法创建 SqlSession 实例。常用的有如下两个：<br><img src="https://img-blog.csdnimg.cn/d30d95b8cf3541d092a53db93666966f.png"></p><h4 id="SqlSession会话对象"><a href="#SqlSession会话对象" class="headerlink" title="SqlSession会话对象"></a>SqlSession会话对象</h4><p>SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。<br>执行语句的方法主要有：<img src="https://img-blog.csdnimg.cn/fd1559ea74cc438eab1a64d46a5abea1.png"></p><p>操作事务的方法主要有： <img src="https://img-blog.csdnimg.cn/de415019464e41d583a217585437e0e5.png"></p><h2 id="MyBatis的Dao层实现"><a href="#MyBatis的Dao层实现" class="headerlink" title="MyBatis的Dao层实现"></a>MyBatis的Dao层实现</h2><h3 id="传统开发方式"><a href="#传统开发方式" class="headerlink" title="传统开发方式"></a>传统开发方式</h3><ol><li><p>编写UserDao接口<img src="https://img-blog.csdnimg.cn/193a2fe2fafe4389aaa7a42e71c5581e.png"></p></li><li><p>编写UserDaoImpl实现<img src="https://img-blog.csdnimg.cn/51aa877c88844a93a60b1b460a7870b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p> 测试传统方式<img src="https://img-blog.csdnimg.cn/c522d5a567c140ee886a3021a7c23995.png"></p></li></ol><h3 id="代理开发方式"><a href="#代理开发方式" class="headerlink" title="代理开发方式"></a>代理开发方式</h3><ul><li>代理开发方式介绍<br>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是我们后面进入企业的主流。<br>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。<br>Mapper 接口开发需要遵循以下规范：<br>1、 Mapper.xml文件中的namespace与mapper接口的全限定名相同<br>2、 Mapper接口方法名和Mapper.xml中定义的每个statement的id相同<br>3、 Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同<br>4、 Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</li><li>编写UserMapper接口<img src="https://img-blog.csdnimg.cn/e3189f1a722d436ab9d61833d35a2fb1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>测试代理方法<img src="https://img-blog.csdnimg.cn/da1ba5b48ea5495996a344e1fdcd26ab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"><h3 id="知识小结-2"><a href="#知识小结-2" class="headerlink" title="知识小结"></a>知识小结</h3><img src="https://img-blog.csdnimg.cn/3e9e85e6f6914b7ca1a2a04e80c464ef.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><h2 id="Mybatis映射文件深入"><a href="#Mybatis映射文件深入" class="headerlink" title="Mybatis映射文件深入"></a>Mybatis映射文件深入</h2><h3 id="动态sql语句"><a href="#动态sql语句" class="headerlink" title="动态sql语句"></a>动态sql语句</h3></li></ul><p><strong>1. 概述</strong><br>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL是动态变化的，此时在前面的学习中我们的 SQL 就不能满足要求了。<br><strong>2. 动态语句之if</strong><br>我们根据实体类的不同取值，使用不同的 SQL语句来进行查询。比如在 id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。<br><img src="https://img-blog.csdnimg.cn/8b5a41f45185499a9e7c046d69d2d430.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"><br>当查询条件id和username都存在时，控制台打印的sql语句如下：<img src="https://img-blog.csdnimg.cn/cf279a20875d426b820f66505dbcb555.png"><br>当查询条件只有id存在时，控制台打印的sql语句如下：<img src="https://img-blog.csdnimg.cn/edfb53af732641f69002baeb8474381c.png"><br><strong>动态 SQL  之foreach</strong><br>循环执行sql的拼接操作，例如：SELECT * FROM USER WHERE id IN (1,2,5)。<img src="https://img-blog.csdnimg.cn/a0b68833b0c342cb8832c1ceedfc5140.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>测试代码片段如下：<img src="https://img-blog.csdnimg.cn/ea525e7cba5b4ba79789e7680d097c8a.png"><br>foreach标签的属性含义如下：<br><foreach>标签用于遍历集合，它的属性：</p><ul><li>collection：代表要遍历的集合元素，注意编写时不要写#{}</li><li>open：代表语句的开始部分</li><li>close：代表结束部分</li><li>item：代表遍历集合的每个元素，生成的变量名</li><li>sperator：代表分隔符<h3 id="SQL片段抽取"><a href="#SQL片段抽取" class="headerlink" title="SQL片段抽取"></a>SQL片段抽取</h3>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的<img src="https://img-blog.csdnimg.cn/2bdfdc078f5f429e8de44df484791ac2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_17,color_FFFFFF,t_70,g_se,x_16"><h3 id="知识小结-3"><a href="#知识小结-3" class="headerlink" title="知识小结"></a>知识小结</h3>MyBatis映射文件配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;select&gt;：查询<br>&lt;insert&gt;：插入<br>&lt;update&gt;：修改<br>&lt;delete&gt;：删除<br>&lt;where&gt;：where条件<br>&lt;<span class="hljs-keyword">if</span>&gt;：<span class="hljs-keyword">if</span>判断<br>&lt;foreach&gt;：循环<br>&lt;sql&gt;：sql片段抽取<br></code></pre></td></tr></table></figure><h2 id="Mybatis核心文件深入"><a href="#Mybatis核心文件深入" class="headerlink" title="Mybatis核心文件深入"></a>Mybatis核心文件深入</h2><h3 id="typeHandlers标签"><a href="#typeHandlers标签" class="headerlink" title="typeHandlers标签"></a>typeHandlers标签</h3><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器（截取部分）。<br><img src="https://img-blog.csdnimg.cn/d47d38f1defb4d9d86a236e133dcb8e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 然后可以选择性地将它映射到一个JDBC类型。例如需求：一个Java中的Date数据类型，我想将之存到数据库的时候存成一个1970年至今的毫秒数，取出来时转换成java的Date，即java的Date与数据库的varchar毫秒值之间转换。</p><p><strong>开发步骤：</strong></p><ol><li>定义转换类继承类BaseTypeHandler<T></li><li>覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，</li><li>getNullableResult为查询时 mysql的字符串类型转换成 java的Type类型的方法</li><li>在MyBatis核心配置文件中进行注册</li><li>测试转换是否正确<img src="https://img-blog.csdnimg.cn/bed28e4fe8ca43578029481d8bb5adba.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ol><p><img src="https://img-blog.csdnimg.cn/d1cc363925e04dca83a3349995555e01.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="plugins标签"><a href="#plugins标签" class="headerlink" title="plugins标签"></a>plugins标签</h3><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据<br><strong>开发步骤：</strong></p><ol><li>导入通用PageHelper的坐标</li><li>在mybatis核心配置文件中配置PageHelper插件</li><li>测试分页数据获取</li></ol><p> 导入通用PageHelper坐标<img src="https://img-blog.csdnimg.cn/8dcea71496d44080a82997e0eed5a530.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>在mybatis核心配置文件中配置PageHelper插件<img src="https://img-blog.csdnimg.cn/ad6dc90750b7478a964eb48a83760e46.png"><br>测试分页代码实现<img src="https://img-blog.csdnimg.cn/3ea7f69dcca34363b09a0cadec40d6d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>获得分页相关的其他参数<img src="https://img-blog.csdnimg.cn/94b75747b4874e70987c4fcea91a224d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="知识小结-4"><a href="#知识小结-4" class="headerlink" title="知识小结"></a>知识小结</h3><p>MyBatis核心配置文件常用标签：<br>1、properties标签：该标签可以加载外部的properties文件<br>2、typeAliases标签：设置类型别名<br>3、environments标签：数据源环境配置标签<br>4、typeHandlers标签：配置自定义类型处理器<br>5、plugins标签：配置MyBatis的插件</p><h2 id="Mybatis的多表操作"><a href="#Mybatis的多表操作" class="headerlink" title="Mybatis的多表操作"></a>Mybatis的多表操作</h2><h3 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h3><ol><li>一对一查询的模型<br>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户<br>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户<img src="https://img-blog.csdnimg.cn/f26fcdd3b8a740dea3fec531f9acff2a.png"></li><li>一对一查询的语句<br>对应的sql语句：select *  from orders o,user u where o.uid=u.id;<br>查询的结果如下：<img src="https://img-blog.csdnimg.cn/0968cc81b2ba484eb785a1c5e93624ad.png"></li><li> 创建Order和User实体<img src="https://img-blog.csdnimg.cn/ae4d24f609e94fce9737dc5a6465ebcc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li> 创建OrderMapper接口<br><img src="https://img-blog.csdnimg.cn/4c1b39fb8ae34d019d257b6a2bc3730b.png"></li><li> 配置OrderMapper.xml<img src="https://img-blog.csdnimg.cn/81e3f21081df4ed3a5eecea75adcf8fc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>其中resultMap还可以配置如下：<img src="https://img-blog.csdnimg.cn/526e4c58701b4f9aaef6029dee7b1cfc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16"></li><li> 测试结果<img src="https://img-blog.csdnimg.cn/e87dd5d63e604ffd9e96924093aaea9e.png"><h3 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h3></li><li>一对多查询的模型<br>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户<br>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单<img src="https://img-blog.csdnimg.cn/1f61004f263c49aab77f4059c90e37d8.png"></li><li>一对多查询的语句<br>对应的sql语句：select *,o.id oid from user u left join orders o on u.id=o.uid;<br>查询的结果如下：<img src="https://img-blog.csdnimg.cn/f4cac2e6e9be44149d4dbfeae0247bd9.png"></li><li> 修改User实体<img src="https://img-blog.csdnimg.cn/90bcbc81caff4e58b4152e0bca4e1f0b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li> 创建UserMapper接口<img src="https://img-blog.csdnimg.cn/9040b43c412042f79f2fb5e3d10c0fd8.png"></li><li> 配置UserMapper.xml<img src="https://img-blog.csdnimg.cn/bf4547942f3a4a83ac3a8cd7802f64fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16"></li><li> 测试结果<img src="https://img-blog.csdnimg.cn/44b9d2df06ed4b46b4972b5b7c933ade.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><h3 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h3></li><li>多对多查询的模型<br>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用<br>多对多查询的需求：查询用户同时查询出该用户的所有角色<img src="https://img-blog.csdnimg.cn/66ef638df034407b8dba74b85bfdcda9.png"></li><li>多对多查询的语句<br>对应的sql语句：select u.<em>,r.</em>,r.id rid from user u left join user_role ur on u.id=ur.user_id<br>inner join role r on ur.role_id=r.id;<br>查询的结果如下：<img src="https://img-blog.csdnimg.cn/49aa165292704626916ae145ae9abd21.png"></li><li> 创建Role实体，修改User实体<img src="https://img-blog.csdnimg.cn/269937e7fa3443079f28b280bce2033e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li> 添加UserMapper接口方法<img src="https://img-blog.csdnimg.cn/b5845dd85fc240aca7d58d11360d0e8e.png"></li><li> 配置UserMapper.xml<img src="https://img-blog.csdnimg.cn/1abb4415bcdd465a8fc7db301dbb6f74.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16">6.  测试结果<br><img src="https://img-blog.csdnimg.cn/e0c8ebb538c84239b25a876e166f8a6a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><h3 id="知识小结-5"><a href="#知识小结-5" class="headerlink" title="知识小结"></a>知识小结</h3>MyBatis多表配置方式：<br>一对一配置：使用 &lt; resultMap &gt; 做配置<br>一对多配置：使用&lt; resultMap &gt; + &lt; collection &gt;做配置<br>多对多配置：使用&lt; resultMap &gt; + &lt; collection &gt;做配置<h2 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h2><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper<br>映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</li></ol><p>@Insert：实现新增<br>@Update：实现更新<br>@Delete：实现删除<br>@Select：实现查询<br>@Result：实现结果集封装<br>@Results：可以与@Result 一起使用，封装多个结果集<br>@One：实现一对一结果集封装<br>@Many：实现一对多结果集封装</p><h3 id="MyBatis的增删改查"><a href="#MyBatis的增删改查" class="headerlink" title="MyBatis的增删改查"></a>MyBatis的增删改查</h3><p>我们完成简单的user表的增删改查的操作<br><img src="https://img-blog.csdnimg.cn/9481606329ca45c1a3a678b0ece92d43.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/a911324b4fb845678cd25b69a6913ff7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/1efa92bdab904438b1c6a474abd28630.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br>修改MyBatis的核心配置文件，我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口即可<img src="https://img-blog.csdnimg.cn/a36cd22878694de884820c5894ccb27c.png"><br>或者指定扫描包含映射关系的接口所在的包也可以<img src="https://img-blog.csdnimg.cn/fd377d801b00491a8d53aad562367062.png"></p><h3 id="MyBatis的注解实现复杂映射开发"><a href="#MyBatis的注解实现复杂映射开发" class="headerlink" title="MyBatis的注解实现复杂映射开发"></a>MyBatis的注解实现复杂映射开发</h3><p>实现复杂关系映射之前我们可以在映射文件中通过配置<resultMap>来实现，使用注解开发后，我们可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置<img src="https://img-blog.csdnimg.cn/0335c8ed633348d3b3b7732c2f145198.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/5482d132aefc4e94a9ce341c12c09720.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="一对一查询-1"><a href="#一对一查询-1" class="headerlink" title="一对一查询"></a>一对一查询</h3><ol><li>一对一查询的模型<br>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户<br>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户<img src="https://img-blog.csdnimg.cn/081a29ea48b14dc792109fea857fc698.png"></li><li>一对一查询的语句<br>对应的sql语句：<br> select * from orders;<br> select * from user where id=查询出订单的uid;<br>查询的结果如下：<img src="https://img-blog.csdnimg.cn/6f3bdc24f77441209e2b41f7b9bca5c7.png"></li><li>创建Order和User实体<img src="https://img-blog.csdnimg.cn/ffce0836056b4b91a93f4fe52fdc0a3a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_19,color_FFFFFF,t_70,g_se,x_16"></li><li>创建OrderMapper接口<br><img src="https://img-blog.csdnimg.cn/ead61cec330240df96727bd60a3c490b.png"></li><li>使用注解配置Mapper<br><img src="https://img-blog.csdnimg.cn/61a2d2ed5a124e8ebfd0e32395964895.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>测试结果<br><img src="https://img-blog.csdnimg.cn/a5cdf7b707c34729a1b0a0abdbed0740.png"><h3 id="一对多查询-1"><a href="#一对多查询-1" class="headerlink" title="一对多查询"></a>一对多查询</h3></li><li>一对多查询的模型<br>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户<br>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单<img src="https://img-blog.csdnimg.cn/dcb974cd7cdf4503923ce7108df14b97.png"></li><li>一对多查询的语句<br>对应的sql语句：<br> select * from user;<br> select * from orders where uid=查询出用户的id;<br>查询的结果如下：<img src="https://img-blog.csdnimg.cn/7248fb5f424540058d5b26cc623c1aa7.png"></li><li>修改User实体<br><img src="https://img-blog.csdnimg.cn/0dd5a78fabda4f68b4c32342fd29321c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li>创建UserMapper接口<br><img src="https://img-blog.csdnimg.cn/ee9f2624473b4651bbf382784556080c.png"></li><li> 使用注解配置Mapper<img src="https://img-blog.csdnimg.cn/2ee2a3b29fb7443c93be52c59070a0ac.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li> 测试结果<img src="https://img-blog.csdnimg.cn/f9e6747f5fda474f9af72e3fd1c2153c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"><h3 id="多对多查询-1"><a href="#多对多查询-1" class="headerlink" title="多对多查询"></a>多对多查询</h3></li><li>多对多查询的模型<br>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用<br>多对多查询的需求：查询用户同时查询出该用户的所有角色<img src="https://img-blog.csdnimg.cn/9ca29a1f088945e3955650791d152e65.png"></li><li>多对多查询的语句<br>对应的sql语句：<br> select * from user;<br> select * from role r,user_role ur where r.id=ur.role_id and ur.user_id=用户的id<br>查询的结果如下：<img src="https://img-blog.csdnimg.cn/c5be8d6050ab425980e9acab7a13368a.png"></li><li> 创建Role实体，修改User实体<img src="https://img-blog.csdnimg.cn/c99aaadbf66346098e5c20fc7b10118a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li> 添加UserMapper接口方法<img src="https://img-blog.csdnimg.cn/fa5fdbafd71247a7b05640bc16e4dd36.png"></li><li> 使用注解配置Mapper<img src="https://img-blog.csdnimg.cn/81e3e446872148e5a5126d122895a1aa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li> 测试结果<img src="https://img-blog.csdnimg.cn/092b7e2fbcae454da6ed1cad3015f72b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATWVyY3VyeTIuIDA=,size_20,color_FFFFFF,t_70,g_se,x_16"></li></ol><h2>至此为全部的SSM笔记.</h2>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>mybatis</tag>
      
      <tag>springMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
